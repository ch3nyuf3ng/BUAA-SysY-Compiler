BLKS
LIT 1
LIT 0
LIT 0
LIT 1
OPR 7
LIT 1
OPR 7
LIT 0
LIT 0
LIT 1
LIT 3
LIT 1
LIT 0
LIT 0
LIT 1
OPR 7
LIT 1
OPR 7
LIT 0
LIT 0
LIT 1
LIT 1
LIT 2
LIT 0
LIT 3
LIT 1
CAL #main_start
JMP #main_end
#getDif3N_start:
LIT 1
LIT 1
LIT 1
LIT 0
LIT 1
LIT 2
#loop[0]_start:
LIT 0
LOD 0,6
LIT 3
OPR 14
JPC #loop[0]_end
BLKS
LIT 1
LIT 0
LEA 1,7
STO -1,0
#loop[1]_start:
LIT 0
LOD 1,7
LIT 3
OPR 14
JPC #loop[1]_end
BLKS
LIT 1
LIT 0
LEA 2,8
STO -1,0
#loop[2]_start:
LIT 0
LOD 2,8
LIT 3
OPR 14
JPC #loop[2]_end
BLKS
#and[0]_start:
LIT 0
LOD 3,6
LIT 0
LOD 3,7
OPR 12
JPC #and[0]_shortcut
LIT 1
LIT 0
LOD 3,6
LIT 0
LOD 3,8
OPR 12
OPR 9
JPC #and[0]_shortcut
LIT 1
LIT 0
LOD 3,7
LIT 0
LOD 3,8
OPR 12
OPR 9
JMP #and[0]_end
#and[0]_shortcut:
LIT 0
#and[0]_end:
JPC #if[0]_else
#if[0]_start:
BLKS
LIT 0
LOD 4,9
LIT 1
OPR 1
LIT 0
LEA 4,9
STO -1,0
BLKE 0
JMP #if[0]_end
#if[0]_else:
#if[0]_end:
LIT 0
LOD 3,8
LIT 1
OPR 1
LIT 0
LEA 3,8
STO -1,0
BLKE 0
#loop[2]_iter:
JMP #loop[2]_start
#loop[2]_end:
LIT 0
LOD 2,7
LIT 1
OPR 1
LIT 0
LEA 2,7
STO -1,0
BLKE 0
#loop[1]_iter:
JMP #loop[1]_start
#loop[1]_end:
LIT 0
LOD 1,6
LIT 1
OPR 1
LIT 0
LEA 1,6
STO -1,0
BLKE 0
#loop[0]_iter:
JMP #loop[0]_start
#loop[0]_end:
LIT 0
LOD 0,9
RET 1
#getDif3N_end:
#judgeB_start:
LIT 0
LOD 0,4
LIT 0
LOD 0,5
OPR 14
JPC #if[1]_else
#if[1]_start:
BLKS
LIT 0
LOD 1,4
LIT 0
LOD 1,5
OPR 13
JPC #if[2]_else
#if[2]_start:
BLKS
LIT 0
LOD 2,4
LIT 0
LOD 2,5
OPR 2
BLKE 1
BLKE 1
RET 1
BLKE 0
JMP #if[2]_end
#if[2]_else:
LIT 0
LOD 1,4
LIT 0
LOD 1,5
OPR 11
JPC #if[3]_else
#if[3]_start:
BLKS
LIT 0
BLKE 1
BLKE 1
RET 1
BLKE 0
JMP #if[3]_end
#if[3]_else:
#if[3]_end:
#if[2]_end:
BLKE 0
JMP #if[1]_end
#if[1]_else:
LIT 0
LOD 0,4
LIT 0
LOD 0,5
OPR 16
JPC #if[4]_else
#if[4]_start:
BLKS
LIT 0
LOD 1,4
LIT 0
LOD 1,5
OPR 15
JPC #if[5]_else
#if[5]_start:
BLKS
LIT 0
LOD 2,4
LIT 0
LOD 2,5
OPR 2
BLKE 1
BLKE 1
RET 1
BLKE 0
JMP #if[5]_end
#if[5]_else:
LIT 0
LOD 1,4
LIT 0
LOD 1,5
OPR 11
JPC #if[6]_else
#if[6]_start:
BLKS
LIT 0
BLKE 1
BLKE 1
RET 1
BLKE 0
JMP #if[6]_end
#if[6]_else:
#if[6]_end:
#if[5]_end:
BLKE 0
JMP #if[4]_end
#if[4]_else:
#if[4]_end:
#if[1]_end:
LIT 0
RET 1
#judgeB_end:
#printArr_start:
LIT 0
#loop[3]_start:
LIT 0
LOD 0,5
LIT 2
OPR 13
JPC #loop[3]_end
BLKS
WRTS ""
LIT 0
LIT 0
LOD 1,5
LIT 1
OPR 3
OPR 1
LIT 0
LOD 1,4
OPR 1
LOD -1,0
WRT
LIT 0
LOD 1,5
LIT 1
OPR 1
LIT 0
LEA 1,5
STO -1,0
BLKE 0
#loop[3]_iter:
JMP #loop[3]_start
#loop[3]_end:
WRTS "\n"
RET 0
#printArr_end:
#printArr2_start:
LIT 0
#loop[4]_start:
LIT 0
LOD 0,5
LIT 4
OPR 13
JPC #loop[4]_end
BLKS
LIT 0
LIT 0
LOD 1,5
LIT 2
OPR 3
OPR 1
LIT 0
LOD 1,4
OPR 1
CAL #printArr_start
INT -1
LIT 0
LOD 1,5
LIT 1
OPR 1
LIT 0
LEA 1,5
STO -1,0
BLKE 0
#loop[4]_iter:
JMP #loop[4]_start
#loop[4]_end:
RET 0
#printArr2_end:
#printHello_start:
MAZ 1
RED
LIT 0
LEA 0,4
STO -1,0
WRTS "Hello "
LIT 0
LOD 0,4
WRT
WRTS "\n"
RET 0
#printHello_end:
#add_start:
MAZ 1
LIT 0
LOD 0,4
LIT 3
OPR 1
LIT 0
LEA 0,5
STO -1,0
LIT 0
LOD 0,5
RET 1
#add_end:
#opp_start:
RET 0
#opp_end:
#main_start:
MAZ 1
BLKS
BLKE 0
BLKS
LIT 3
LIT 0
LEA 1,4
STO -1,0
BLKE 0
LIT 0
LIT 1
LIT 0
LOD 0,6
OPR 8
JPC #if[7]_else
#if[7]_start:
BLKS
LIT 0
LIT 0
LEA 1,6
STO -1,0
BLKE 0
JMP #if[7]_end
#if[7]_else:
#if[7]_end:
LIT 1
OPR 6
LIT 0
LEA 0,6
STO -1,0
LIT 1
OPR 7
LIT 0
LEA 0,6
STO -1,0
MAZ 1
LIT 16
LIT 2
OPR 1
LIT 0
LOD 0,5
LIT 1
OPR 1
OPR 4
LIT 14
OPR 2
LIT 0
LIT 0
LIT 2
OPR 3
OPR 1
LIT 0
LIT 1
OPR 3
OPR 1
LOD 1,4
OPR 1
LIT 0
LEA 0,7
STO -1,0
#loop[5]_start:
LIT 0
LOD 0,5
LIT 5
OPR 14
JPC #loop[5]_end
BLKS
LIT 0
LOD 1,5
LIT 3
OPR 11
JPC #if[8]_else
#if[8]_start:
BLKS
LIT 0
LOD 2,5
LIT 1
OPR 1
LIT 0
LEA 2,5
STO -1,0
BLKE 0
BLKE 0
JMP #loop[5]_iter
BLKE 0
JMP #if[8]_end
#if[8]_else:
#if[8]_end:
LIT 0
LOD 1,5
LIT 5
OPR 11
JPC #if[9]_else
#if[9]_start:
BLKS
BLKE 0
BLKE 0
JMP #loop[5]_end
BLKE 0
JMP #if[9]_end
#if[9]_else:
BLKS
LIT 0
LOD 2,5
BLKE 0
#if[9]_end:
LIT 0
LOD 1,5
LIT 1
OPR 1
LIT 0
LEA 1,5
STO -1,0
BLKE 0
#loop[5]_iter:
JMP #loop[5]_start
#loop[5]_end:
RED
LIT 0
LEA 0,4
STO -1,0
WRTS ""
LIT 0
LOD 0,4
CAL #add_start
WRT
WRTS "\n"
LIT 1
LIT 999
CAL #getDif3N_start
LIT 0
LEA 0,4
STO -1,0
WRTS ""
LIT 0
LOD 0,4
WRT
WRTS "\n"
LIT 2
LIT 3
CAL #judgeB_start
LIT 0
LEA 0,4
STO -1,0
WRTS "judgeB 2,3 = "
LIT 0
LOD 0,4
WRT
WRTS "\n"
CAL #printHello_start
INT -1
LIT 0
LEA 1,4
CAL #printArr2_start
INT -1
LIT 0
LIT 0
LIT 2
OPR 3
OPR 1
LEA 1,4
CAL #printArr_start
INT -1
LIT 0
LEA 1,24
CAL #printArr_start
INT -1
LIT 0
RET 1
#main_end:
BLKE 0

[INFO] Test 1
[INFO] Matching <CompileUnit>
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: ZERO
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <ConstExpression>: 0
[INFO] Matched <ScalarConstInitValue>: 0
[INFO] Matched <ConstInitValue>: 0
[INFO] Matched <ConstDefinition>.ZERO = 0
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: ONE
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Matched <ConstDefinition>.ONE = 1
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int ZERO = 0, ONE = 1;
[INFO] Matched <Declaration>: const int ZERO = 0, ONE = 1;
[INFO] Consumed Token: int
[INFO] Consumed Token: var2
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: var2
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: var2
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Matched <VarDefinition>: var2 = 2
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: var3
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Matched <VarDefinition>: var3 = 3
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int var2 = 2, var3 = 3;
[INFO] Matched <Declaration>: int var2 = 2, var3 = 3;
[INFO] Consumed Token: void
[INFO] Consumed Token: fun
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: fun
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Failed to match <BasicType>.
[INFO] Failed to match <FuncParam>.
[INFO] Failed to match <FuncParamList>.
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: i
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Matched <VarDefinition>: i = 1
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int i = 1;
[INFO] Matched <Declaration>: int i = 1;
[INFO] Matched <BlockItem>:
int i = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: yuming
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: yuming
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: yuming
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: yuming
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Matched <VarDefinition>: yuming = 1
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int yuming = 1;
[INFO] Matched <Declaration>: int yuming = 1;
[INFO] Matched <BlockItem>:
int yuming = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: yuming
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: yuming
[INFO] Matched <LeftValue>: yuming
[INFO] Matched <PrimaryExpression>: yuming
[INFO] Matched <UnaryExpression>: yuming
[INFO] Matched <MultiplicativeExpression>: yuming
[INFO] Matched <AdditiveExpression>: yuming
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1000
[INFO] Matched <Number>: 1000
[INFO] Matched <PrimaryExpression>: 1000
[INFO] Matched <UnaryExpression>: 1000
[INFO] Matched <MultiplicativeExpression>: 1000
[INFO] Matched <AdditiveExpression>: 1000
[INFO] Matched <RelationalExpression>: yuming < 1000
[INFO] Matched <EqualityExpression>: yuming < 1000
[INFO] Matched <LogicalAndExpression>: yuming < 1000
[INFO] Matched <LogicalOrExpression>: yuming < 1000
[INFO] Matched <Condition>: yuming < 1000
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: yuming
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: yuming
[INFO] Matched <LeftValue>: yuming
[INFO] Matched <PrimaryExpression>: yuming
[INFO] Matched <UnaryExpression>: yuming
[INFO] Matched <MultiplicativeExpression>: yuming
[INFO] Matched <AdditiveExpression>: yuming
[INFO] Matched <Expression>: yuming
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: yuming
[INFO] Matched <LeftValue>: yuming
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: yuming
[INFO] Matched <LeftValue>: yuming
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: yuming
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: yuming
[INFO] Matched <LeftValue>: yuming
[INFO] Matched <PrimaryExpression>: yuming
[INFO] Matched <UnaryExpression>: yuming
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: yuming * 2
[INFO] Matched <AdditiveExpression>: yuming * 2
[INFO] Matched <Expression>: yuming * 2
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: yuming = yuming * 2;
[INFO] Matched <Statement>: yuming = yuming * 2;
[INFO] Matched <BlockItem>:
yuming = yuming * 2;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    yuming = yuming * 2;
}
[INFO] Matched <Statement>:
{
    yuming = yuming * 2;
}
[INFO] Matched <ForStatementSelection>:
for (; yuming < 1000; ) {
    yuming = yuming * 2;
}
[INFO] Matched <Statement>:
for (; yuming < 1000; ) {
    yuming = yuming * 2;
}
[INFO] Matched <BlockItem>:
for (; yuming < 1000; ) {
    yuming = yuming * 2;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "\n%d"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: yuming
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: yuming
[INFO] Matched <LeftValue>: yuming
[INFO] Matched <PrimaryExpression>: yuming
[INFO] Matched <UnaryExpression>: yuming
[INFO] Matched <MultiplicativeExpression>: yuming
[INFO] Matched <AdditiveExpression>: yuming
[INFO] Matched <Expression>: yuming
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("\n%d", yuming);
[INFO] Matched <Statement>: printf("\n%d", yuming);
[INFO] Matched <BlockItem>:
printf("\n%d", yuming);
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int yuming = 1;
    for (; yuming < 1000; ) {
        yuming = yuming * 2;
    }
    printf("\n%d", yuming);
}
[INFO] Matched <Statement>:
{
    int yuming = 1;
    for (; yuming < 1000; ) {
        yuming = yuming * 2;
    }
    printf("\n%d", yuming);
}
[INFO] Matched <BlockItem>:
{
    int yuming = 1;
    for (; yuming < 1000; ) {
        yuming = yuming * 2;
    }
    printf("\n%d", yuming);
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int i = 1;
    {
        int yuming = 1;
        for (; yuming < 1000; ) {
            yuming = yuming * 2;
        }
        printf("\n%d", yuming);
    }
    return;
}
[INFO] Matched <FuncDefinition>:
void fun() {
    int i = 1;
    {
        int yuming = 1;
        for (; yuming < 1000; ) {
            yuming = yuming * 2;
        }
        printf("\n%d", yuming);
    }
    return;
}
[INFO] Consumed Token: int
[INFO] Lexer rolling back...
[INFO] Matching <MainFuncDefinition>.
[INFO] Consumed Token: int
[INFO] Consumed Token: main
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "21373457\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("21373457\n");
[INFO] Matched <Statement>: printf("21373457\n");
[INFO] Matched <BlockItem>:
printf("21373457\n");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ZERO
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ZERO
[INFO] Matched <LeftValue>: ZERO
[INFO] Matched <PrimaryExpression>: ZERO
[INFO] Matched <UnaryExpression>: ZERO
[INFO] Matched <MultiplicativeExpression>: ZERO
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var2
[INFO] Matched <LeftValue>: var2
[INFO] Matched <PrimaryExpression>: var2
[INFO] Matched <UnaryExpression>: var2
[INFO] Matched <MultiplicativeExpression>: var2
[INFO] Matched <AdditiveExpression>: ZERO + var2
[INFO] Matched <RelationalExpression>: ZERO + var2
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var3
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var3
[INFO] Matched <LeftValue>: var3
[INFO] Matched <PrimaryExpression>: var3
[INFO] Matched <UnaryExpression>: var3
[INFO] Matched <MultiplicativeExpression>: var3
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ONE
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ONE
[INFO] Matched <LeftValue>: ONE
[INFO] Matched <PrimaryExpression>: ONE
[INFO] Matched <UnaryExpression>: ONE
[INFO] Matched <MultiplicativeExpression>: ONE
[INFO] Matched <AdditiveExpression>: var3 - ONE
[INFO] Matched <RelationalExpression>: var3 - ONE
[INFO] Matched <EqualityExpression>: ZERO + var2 == var3 - ONE
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ONE
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ONE
[INFO] Matched <LeftValue>: ONE
[INFO] Matched <PrimaryExpression>: ONE
[INFO] Matched <UnaryExpression>: ONE
[INFO] Matched <MultiplicativeExpression>: ONE
[INFO] Matched <AdditiveExpression>: ONE
[INFO] Matched <RelationalExpression>: ONE
[INFO] Matched <EqualityExpression>: ONE
[INFO] Matched <LogicalAndExpression>: ZERO + var2 == var3 - ONE && ONE
[INFO] Matched <LogicalOrExpression>: ZERO + var2 == var3 - ONE && ONE
[INFO] Matched <Condition>: ZERO + var2 == var3 - ONE && ONE
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ZERO
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ZERO
[INFO] Matched <LeftValue>: ZERO
[INFO] Matched <PrimaryExpression>: ZERO
[INFO] Matched <UnaryExpression>: ZERO
[INFO] Matched <MultiplicativeExpression>: ZERO
[INFO] Matched <AdditiveExpression>: ZERO
[INFO] Matched <RelationalExpression>: ZERO
[INFO] Matched <EqualityExpression>: ZERO
[INFO] Matched <LogicalAndExpression>: ZERO
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ZERO
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ZERO
[INFO] Matched <LeftValue>: ZERO
[INFO] Matched <PrimaryExpression>: ZERO
[INFO] Matched <UnaryExpression>: ZERO
[INFO] Matched <UnaryOperatedExpression>: !ZERO
[INFO] Matched <UnaryExpression>: !ZERO
[INFO] Matched <MultiplicativeExpression>: !ZERO
[INFO] Matched <AdditiveExpression>: !ZERO
[INFO] Matched <RelationalExpression>: !ZERO
[INFO] Matched <EqualityExpression>: !ZERO
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ONE
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ONE
[INFO] Matched <LeftValue>: ONE
[INFO] Matched <PrimaryExpression>: ONE
[INFO] Matched <UnaryExpression>: ONE
[INFO] Matched <MultiplicativeExpression>: ONE
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var2
[INFO] Matched <LeftValue>: var2
[INFO] Matched <PrimaryExpression>: var2
[INFO] Matched <UnaryExpression>: var2
[INFO] Matched <MultiplicativeExpression>: var2
[INFO] Matched <AdditiveExpression>: ONE + 1 + var2
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: ONE + 1 + var2 < 0
[INFO] Matched <EqualityExpression>: ONE + 1 + var2 < 0
[INFO] Matched <LogicalAndExpression>: !ZERO && ONE + 1 + var2 < 0
[INFO] Matched <LogicalOrExpression>: ZERO || !ZERO && ONE + 1 + var2 < 0
[INFO] Matched <Condition>: ZERO || !ZERO && ONE + 1 + var2 < 0
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "ERROR!\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("ERROR!\n");
[INFO] Matched <Statement>: printf("ERROR!\n");
[INFO] Matched <BlockItem>:
printf("ERROR!\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("ERROR!\n");
}
[INFO] Matched <Statement>:
{
    printf("ERROR!\n");
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "And success!\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("And success!\n");
[INFO] Matched <Statement>: printf("And success!\n");
[INFO] Matched <BlockItem>:
printf("And success!\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("And success!\n");
}
[INFO] Matched <Statement>:
{
    printf("And success!\n");
}
[INFO] Matched <IfStatement>:
if (ZERO || !ZERO && ONE + 1 + var2 < 0) {
    printf("ERROR!\n");
} else {
    printf("And success!\n");
}
[INFO] Matched <Statement>:
if (ZERO || !ZERO && ONE + 1 + var2 < 0) {
    printf("ERROR!\n");
} else {
    printf("And success!\n");
}
[INFO] Matched <BlockItem>:
if (ZERO || !ZERO && ONE + 1 + var2 < 0) {
    printf("ERROR!\n");
} else {
    printf("And success!\n");
}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (ZERO || !ZERO && ONE + 1 + var2 < 0) {
        printf("ERROR!\n");
    } else {
        printf("And success!\n");
    }
}
[INFO] Matched <Statement>:
{
    if (ZERO || !ZERO && ONE + 1 + var2 < 0) {
        printf("ERROR!\n");
    } else {
        printf("And success!\n");
    }
}
[INFO] Matched <IfStatement>:
if (ZERO + var2 == var3 - ONE && ONE) {
    if (ZERO || !ZERO && ONE + 1 + var2 < 0) {
        printf("ERROR!\n");
    } else {
        printf("And success!\n");
    }
}  
[INFO] Matched <Statement>:
if (ZERO + var2 == var3 - ONE && ONE) {
    if (ZERO || !ZERO && ONE + 1 + var2 < 0) {
        printf("ERROR!\n");
    } else {
        printf("And success!\n");
    }
}  
[INFO] Matched <BlockItem>:
if (ZERO + var2 == var3 - ONE && ONE) {
    if (ZERO || !ZERO && ONE + 1 + var2 < 0) {
        printf("ERROR!\n");
    } else {
        printf("And success!\n");
    }
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var3
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var3
[INFO] Matched <LeftValue>: var3
[INFO] Matched <PrimaryExpression>: var3
[INFO] Matched <UnaryExpression>: var3
[INFO] Matched <MultiplicativeExpression>: var3
[INFO] Matched <AdditiveExpression>: var3
[INFO] Matched <RelationalExpression>: var3
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <RelationalExpression>: 3
[INFO] Matched <EqualityExpression>: var3 != 3
[INFO] Matched <LogicalAndExpression>: var3 != 3
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var2
[INFO] Matched <LeftValue>: var2
[INFO] Matched <PrimaryExpression>: var2
[INFO] Matched <UnaryExpression>: var2
[INFO] Matched <MultiplicativeExpression>: var2
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 22
[INFO] Matched <Number>: 22
[INFO] Matched <PrimaryExpression>: 22
[INFO] Matched <UnaryExpression>: 22
[INFO] Matched <MultiplicativeExpression>: 22
[INFO] Matched <AdditiveExpression>: var2 - 22
[INFO] Matched <RelationalExpression>: var2 - 22
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 20
[INFO] Matched <Number>: 20
[INFO] Matched <PrimaryExpression>: 20
[INFO] Matched <UnaryExpression>: 20
[INFO] Matched <UnaryOperatedExpression>: -20
[INFO] Matched <UnaryExpression>: -20
[INFO] Matched <MultiplicativeExpression>: -20
[INFO] Matched <AdditiveExpression>: -20
[INFO] Matched <RelationalExpression>: -20
[INFO] Matched <EqualityExpression>: var2 - 22 == -20
[INFO] Matched <LogicalAndExpression>: var2 - 22 == -20
[INFO] Matched <LogicalOrExpression>: var3 != 3 || var2 - 22 == -20
[INFO] Matched <Condition>: var3 != 3 || var2 - 22 == -20
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ONE
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ONE
[INFO] Matched <LeftValue>: ONE
[INFO] Matched <PrimaryExpression>: ONE
[INFO] Matched <UnaryExpression>: ONE
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: ONE % 2
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 4 * 2
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var3
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var3
[INFO] Matched <LeftValue>: var3
[INFO] Matched <PrimaryExpression>: var3
[INFO] Matched <UnaryExpression>: var3
[INFO] Matched <MultiplicativeExpression>: var3
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var2
[INFO] Matched <LeftValue>: var2
[INFO] Matched <PrimaryExpression>: var2
[INFO] Matched <UnaryExpression>: var2
[INFO] Matched <MultiplicativeExpression>: var2
[INFO] Matched <AdditiveExpression>: ONE % 2 + 3 - 4 * 2 + var3 + var2
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 100
[INFO] Matched <Number>: 100
[INFO] Matched <PrimaryExpression>: 100
[INFO] Matched <UnaryExpression>: 100
[INFO] Matched <MultiplicativeExpression>: 100
[INFO] Matched <AdditiveExpression>: 100
[INFO] Matched <RelationalExpression>: ONE % 2 + 3 - 4 * 2 + var3 + var2 <= 100
[INFO] Matched <EqualityExpression>: ONE % 2 + 3 - 4 * 2 + var3 + var2 <= 100
[INFO] Matched <LogicalAndExpression>: ONE % 2 + 3 - 4 * 2 + var3 + var2 <= 100
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ONE
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ONE
[INFO] Matched <LeftValue>: ONE
[INFO] Matched <PrimaryExpression>: ONE
[INFO] Matched <UnaryExpression>: ONE
[INFO] Matched <MultiplicativeExpression>: ONE
[INFO] Matched <AdditiveExpression>: ONE
[INFO] Matched <RelationalExpression>: ONE
[INFO] Matched <EqualityExpression>: ONE
[INFO] Matched <LogicalAndExpression>: ONE
[INFO] Matched <LogicalOrExpression>: ONE % 2 + 3 - 4 * 2 + var3 + var2 <= 100 || ONE
[INFO] Matched <Condition>: ONE % 2 + 3 - 4 * 2 + var3 + var2 <= 100 || ONE
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "Or pass!\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("Or pass!\n");
[INFO] Matched <Statement>: printf("Or pass!\n");
[INFO] Matched <BlockItem>:
printf("Or pass!\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("Or pass!\n");
}
[INFO] Matched <Statement>:
{
    printf("Or pass!\n");
}
[INFO] Matched <IfStatement>:
if (ONE % 2 + 3 - 4 * 2 + var3 + var2 <= 100 || ONE) {
    printf("Or pass!\n");
}  
[INFO] Matched <Statement>:
if (ONE % 2 + 3 - 4 * 2 + var3 + var2 <= 100 || ONE) {
    printf("Or pass!\n");
}  
[INFO] Matched <BlockItem>:
if (ONE % 2 + 3 - 4 * 2 + var3 + var2 <= 100 || ONE) {
    printf("Or pass!\n");
}  
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (ONE % 2 + 3 - 4 * 2 + var3 + var2 <= 100 || ONE) {
        printf("Or pass!\n");
    }  
}
[INFO] Matched <Statement>:
{
    if (ONE % 2 + 3 - 4 * 2 + var3 + var2 <= 100 || ONE) {
        printf("Or pass!\n");
    }  
}
[INFO] Matched <IfStatement>:
if (var3 != 3 || var2 - 22 == -20) {
    if (ONE % 2 + 3 - 4 * 2 + var3 + var2 <= 100 || ONE) {
        printf("Or pass!\n");
    }  
}  
[INFO] Matched <Statement>:
if (var3 != 3 || var2 - 22 == -20) {
    if (ONE % 2 + 3 - 4 * 2 + var3 + var2 <= 100 || ONE) {
        printf("Or pass!\n");
    }  
}  
[INFO] Matched <BlockItem>:
if (var3 != 3 || var2 - 22 == -20) {
    if (ONE % 2 + 3 - 4 * 2 + var3 + var2 <= 100 || ONE) {
        printf("Or pass!\n");
    }  
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "Test1 Success!"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("Test1 Success!");
[INFO] Matched <Statement>: printf("Test1 Success!");
[INFO] Matched <BlockItem>:
printf("Test1 Success!");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: fun
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: fun
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: fun()
[INFO] Matched <UnaryExpression>: fun()
[INFO] Matched <MultiplicativeExpression>: fun()
[INFO] Matched <AdditiveExpression>: fun()
[INFO] Matched <Expression>: fun()
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: fun();
[INFO] Matched <Statement>: fun();
[INFO] Matched <BlockItem>:
fun();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: fun
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: fun
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: fun()
[INFO] Matched <UnaryExpression>: fun()
[INFO] Matched <MultiplicativeExpression>: fun()
[INFO] Matched <AdditiveExpression>: fun()
[INFO] Matched <Expression>: fun()
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: fun();
[INFO] Matched <Statement>: fun();
[INFO] Matched <BlockItem>:
fun();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: fun
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: fun
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: fun()
[INFO] Matched <UnaryExpression>: fun()
[INFO] Matched <MultiplicativeExpression>: fun()
[INFO] Matched <AdditiveExpression>: fun()
[INFO] Matched <Expression>: fun()
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: fun();
[INFO] Matched <Statement>: fun();
[INFO] Matched <BlockItem>:
fun();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: fun
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: fun
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: fun()
[INFO] Matched <UnaryExpression>: fun()
[INFO] Matched <MultiplicativeExpression>: fun()
[INFO] Matched <AdditiveExpression>: fun()
[INFO] Matched <Expression>: fun()
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: fun();
[INFO] Matched <Statement>: fun();
[INFO] Matched <BlockItem>:
fun();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: fun
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: fun
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: fun()
[INFO] Matched <UnaryExpression>: fun()
[INFO] Matched <MultiplicativeExpression>: fun()
[INFO] Matched <AdditiveExpression>: fun()
[INFO] Matched <Expression>: fun()
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: fun();
[INFO] Matched <Statement>: fun();
[INFO] Matched <BlockItem>:
fun();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: fun
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: fun
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: fun()
[INFO] Matched <UnaryExpression>: fun()
[INFO] Matched <MultiplicativeExpression>: fun()
[INFO] Matched <AdditiveExpression>: fun()
[INFO] Matched <Expression>: fun()
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: fun();
[INFO] Matched <Statement>: fun();
[INFO] Matched <BlockItem>:
fun();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("21373457\n");
    if (ZERO + var2 == var3 - ONE && ONE) {
        if (ZERO || !ZERO && ONE + 1 + var2 < 0) {
            printf("ERROR!\n");
        } else {
            printf("And success!\n");
        }
    }  
    if (var3 != 3 || var2 - 22 == -20) {
        if (ONE % 2 + 3 - 4 * 2 + var3 + var2 <= 100 || ONE) {
            printf("Or pass!\n");
        }  
    }  
    printf("Test1 Success!");
    {}
    fun();
    fun();
    fun();
    fun();
    fun();
    fun();
    return 0;
}
[INFO] Matched <MainFuncDefinition>:
int main() {
    printf("21373457\n");
    if (ZERO + var2 == var3 - ONE && ONE) {
        if (ZERO || !ZERO && ONE + 1 + var2 < 0) {
            printf("ERROR!\n");
        } else {
            printf("And success!\n");
        }
    }  
    if (var3 != 3 || var2 - 22 == -20) {
        if (ONE % 2 + 3 - 4 * 2 + var3 + var2 <= 100 || ONE) {
            printf("Or pass!\n");
        }  
    }  
    printf("Test1 Success!");
    {}
    fun();
    fun();
    fun();
    fun();
    fun();
    fun();
    return 0;
}
[INFO] Matched <CompileUnit>:
const int ZERO = 0, ONE = 1;
int var2 = 2, var3 = 3;

void fun() {
    int i = 1;
    {
        int yuming = 1;
        for (; yuming < 1000; ) {
            yuming = yuming * 2;
        }
        printf("\n%d", yuming);
    }
    return;
}

int main() {
    printf("21373457\n");
    if (ZERO + var2 == var3 - ONE && ONE) {
        if (ZERO || !ZERO && ONE + 1 + var2 < 0) {
            printf("ERROR!\n");
        } else {
            printf("And success!\n");
        }
    }  
    if (var3 != 3 || var2 - 22 == -20) {
        if (ONE % 2 + 3 - 4 * 2 + var3 + var2 <= 100 || ONE) {
            printf("Or pass!\n");
        }  
    }  
    printf("Test1 Success!");
    {}
    fun();
    fun();
    fun();
    fun();
    fun();
    fun();
    return 0;
}
[INFO] Test 2
[INFO] Matching <CompileUnit>
[INFO] Consumed Token: int
[INFO] Consumed Token: a_global
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a_global
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: a_global
[INFO] Matched <VarDefinition>: a_global
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int a_global;
[INFO] Matched <Declaration>: int a_global;
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: b_global
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Matched <ConstDefinition>.b_global = 1
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int b_global = 1;
[INFO] Matched <Declaration>: const int b_global = 1;
[INFO] Lexer rolling back...
[INFO] Consumed Token: void
[INFO] Consumed Token: func1
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: func1
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Failed to match <BasicType>.
[INFO] Failed to match <FuncParam>.
[INFO] Failed to match <FuncParamList>.
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "21182621\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("21182621\n");
[INFO] Matched <Statement>: printf("21182621\n");
[INFO] Matched <BlockItem>:
printf("21182621\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("21182621\n");
}
[INFO] Matched <FuncDefinition>:
void func1() {
    printf("21182621\n");
}
[INFO] Consumed Token: void
[INFO] Consumed Token: func2
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: func2
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Matched <FuncParamList>: int a
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: a - 1
[INFO] Matched <Expression>: a - 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = a - 1;
[INFO] Matched <Statement>: a = a - 1;
[INFO] Matched <BlockItem>:
a = a - 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a = a - 1;
    return;
}
[INFO] Matched <FuncDefinition>:
void func2(int a) {
    a = a - 1;
    return;
}
[INFO] Consumed Token: void
[INFO] Consumed Token: func3
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: func3
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: arr
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int arr[]
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: arrrr
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int arrrr[][2]
[INFO] Matched <FuncParamList>: int a, int arr[], int arrrr[][2]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: arr
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arr
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arr[0]
[INFO] Matched <PrimaryExpression>: arr[0]
[INFO] Matched <UnaryExpression>: arr[0]
[INFO] Matched <MultiplicativeExpression>: arr[0]
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: arrrr
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arrrr
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arrrr[0][0]
[INFO] Matched <PrimaryExpression>: arrrr[0][0]
[INFO] Matched <UnaryExpression>: arrrr[0][0]
[INFO] Matched <MultiplicativeExpression>: arrrr[0][0]
[INFO] Matched <AdditiveExpression>: arr[0] + arrrr[0][0]
[INFO] Matched <Expression>: arr[0] + arrrr[0][0]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = arr[0] + arrrr[0][0];
[INFO] Matched <Statement>: a = arr[0] + arrrr[0][0];
[INFO] Matched <BlockItem>:
a = arr[0] + arrrr[0][0];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a = arr[0] + arrrr[0][0];
    return;
}
[INFO] Matched <FuncDefinition>:
void func3(int a, int arr[], int arrrr[][2]) {
    a = arr[0] + arrrr[0][0];
    return;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: func4
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: func4
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Failed to match <BasicType>.
[INFO] Failed to match <FuncParam>.
[INFO] Failed to match <FuncParamList>.
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "21182621\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("21182621\n");
[INFO] Matched <Statement>: printf("21182621\n");
[INFO] Matched <BlockItem>:
printf("21182621\n");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("21182621\n");
    return 0;
}
[INFO] Matched <FuncDefinition>:
int func4() {
    printf("21182621\n");
    return 0;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: func5
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: func5
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Matched <FuncParamList>: int a
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: a + 1
[INFO] Matched <Expression>: a + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = a + 1;
[INFO] Matched <Statement>: a = a + 1;
[INFO] Matched <BlockItem>:
a = a + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return a;
[INFO] Matched <Statement>: return a;
[INFO] Matched <BlockItem>:
return a;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a = a + 1;
    return a;
}
[INFO] Matched <FuncDefinition>:
int func5(int a) {
    a = a + 1;
    return a;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: func6
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: func6
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: arr
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int arr[]
[INFO] Matched <FuncParamList>: int a, int arr[]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: arr
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arr
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arr[0]
[INFO] Matched <PrimaryExpression>: arr[0]
[INFO] Matched <UnaryExpression>: arr[0]
[INFO] Matched <MultiplicativeExpression>: arr[0]
[INFO] Matched <AdditiveExpression>: a + arr[0]
[INFO] Matched <Expression>: a + arr[0]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = a + arr[0];
[INFO] Matched <Statement>: a = a + arr[0];
[INFO] Matched <BlockItem>:
a = a + arr[0];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return a;
[INFO] Matched <Statement>: return a;
[INFO] Matched <BlockItem>:
return a;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a = a + arr[0];
    return a;
}
[INFO] Matched <FuncDefinition>:
int func6(int a, int arr[]) {
    a = a + arr[0];
    return a;
}
[INFO] Consumed Token: int
[INFO] Lexer rolling back...
[INFO] Matching <MainFuncDefinition>.
[INFO] Consumed Token: int
[INFO] Consumed Token: main
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: gett
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: gett
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: gett
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: gett
[INFO] Matched <VarDefinition>: gett
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int gett;
[INFO] Matched <Declaration>: int gett;
[INFO] Matched <BlockItem>:
int gett;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: gett
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: gett
[INFO] Matched <LeftValue>: gett
[INFO] Matched <PrimaryExpression>: gett
[INFO] Matched <UnaryExpression>: gett
[INFO] Matched <MultiplicativeExpression>: gett
[INFO] Matched <AdditiveExpression>: gett
[INFO] Matched <Expression>: gett
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: gett
[INFO] Matched <LeftValue>: gett
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: gett = getint();
[INFO] Matched <Statement>: gett = getint();
[INFO] Matched <BlockItem>:
gett = getint();
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: a
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <ConstExpression>: 0
[INFO] Matched <ScalarConstInitValue>: 0
[INFO] Matched <ConstInitValue>: 0
[INFO] Matched <ConstDefinition>.a = 0
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int a = 0;
[INFO] Matched <Declaration>: const int a = 0;
[INFO] Matched <BlockItem>:
const int a = 0;
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: aa
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <ConstExpression>: 0
[INFO] Matched <ScalarConstInitValue>: 0
[INFO] Matched <ConstInitValue>: 0
[INFO] Matched <ConstDefinition>.aa = 0
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: bb
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Matched <ConstDefinition>.bb = 1
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int aa = 0, bb = 1;
[INFO] Matched <Declaration>: const int aa = 0, bb = 1;
[INFO] Matched <BlockItem>:
const int aa = 0, bb = 1;
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: aaa
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <ConstExpression>: 0
[INFO] Matched <ScalarConstInitValue>: 0
[INFO] Matched <ConstInitValue>: 0
[INFO] Matched <ConstDefinition>.aaa = 0
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: bbb
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Matched <ConstDefinition>.bbb = 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: ccc
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Matched <ConstDefinition>.ccc = 2
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int aaa = 0, bbb = 1, ccc = 2;
[INFO] Matched <Declaration>: const int aaa = 0, bbb = 1, ccc = 2;
[INFO] Matched <BlockItem>:
const int aaa = 0, bbb = 1, ccc = 2;
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: arr_a
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {1, 2}
[INFO] Matched <ConstInitValue>: {1, 2}
[INFO] Matched <ConstDefinition>.arr_a[2] = {1, 2}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int arr_a[2] = {1, 2};
[INFO] Matched <Declaration>: const int arr_a[2] = {1, 2};
[INFO] Matched <BlockItem>:
const int arr_a[2] = {1, 2};
[INFO] Matching <BlockItem>.
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: arr_aa
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {1, 2}
[INFO] Matched <ConstInitValue>: {1, 2}
[INFO] Matched <ConstDefinition>.arr_aa[2] = {1, 2}
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: arr_bb
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Matched <ScalarConstInitValue>: 3
[INFO] Matched <ConstInitValue>: 3
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <ConstExpression>: 4
[INFO] Matched <ScalarConstInitValue>: 4
[INFO] Matched <ConstInitValue>: 4
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <ConstExpression>: 5
[INFO] Matched <ScalarConstInitValue>: 5
[INFO] Matched <ConstInitValue>: 5
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {3, 4, 5}
[INFO] Matched <ConstInitValue>: {3, 4, 5}
[INFO] Matched <ConstDefinition>.arr_bb[3] = {3, 4, 5}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int arr_aa[2] = {1, 2}, arr_bb[3] = {3, 4, 5};
[INFO] Matched <Declaration>: const int arr_aa[2] = {1, 2}, arr_bb[3] = {3, 4, 5};
[INFO] Matched <BlockItem>:
const int arr_aa[2] = {1, 2}, arr_bb[3] = {3, 4, 5};
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: arrrr_a
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {1, 2}
[INFO] Matched <ConstInitValue>: {1, 2}
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {1, 2}
[INFO] Matched <ConstInitValue>: {1, 2}
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {{1, 2}, {1, 2}}
[INFO] Matched <ConstInitValue>: {{1, 2}, {1, 2}}
[INFO] Matched <ConstDefinition>.arrrr_a[2][2] = {{1, 2}, {1, 2}}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int arrrr_a[2][2] = {{1, 2}, {1, 2}};
[INFO] Matched <Declaration>: const int arrrr_a[2][2] = {{1, 2}, {1, 2}};
[INFO] Matched <BlockItem>:
const int arrrr_a[2][2] = {{1, 2}, {1, 2}};
[INFO] Matching <BlockItem>.
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: arrrr_aa
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {1, 2}
[INFO] Matched <ConstInitValue>: {1, 2}
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {1, 2}
[INFO] Matched <ConstInitValue>: {1, 2}
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {{1, 2}, {1, 2}}
[INFO] Matched <ConstInitValue>: {{1, 2}, {1, 2}}
[INFO] Matched <ConstDefinition>.arrrr_aa[2][2] = {{1, 2}, {1, 2}}
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: arrrr_bb
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Matched <ScalarConstInitValue>: 3
[INFO] Matched <ConstInitValue>: 3
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {1, 2, 3}
[INFO] Matched <ConstInitValue>: {1, 2, 3}
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {{1, 2, 3}}
[INFO] Matched <ConstInitValue>: {{1, 2, 3}}
[INFO] Matched <ConstDefinition>.arrrr_bb[1][3] = {{1, 2, 3}}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int arrrr_aa[2][2] = {{1, 2}, {1, 2}}, arrrr_bb[1][3] = {{1, 2, 3}};
[INFO] Matched <Declaration>: const int arrrr_aa[2][2] = {{1, 2}, {1, 2}}, arrrr_bb[1][3] = {{1, 2, 3}};
[INFO] Matched <BlockItem>:
const int arrrr_aa[2][2] = {{1, 2}, {1, 2}}, arrrr_bb[1][3] = {{1, 2, 3}};
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "21182621\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("21182621\n");
[INFO] Matched <Statement>: printf("21182621\n");
[INFO] Matched <BlockItem>:
printf("21182621\n");
[INFO] Consumed Token: int
[INFO] Consumed Token: d
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: d
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: d
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: d
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: d = 0
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int d = 0;
[INFO] Matched <Declaration>: int d = 0;
[INFO] Matched <BlockItem>:
int d = 0;
[INFO] Consumed Token: int
[INFO] Consumed Token: dd
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: dd
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: dd
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: dd
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: dd = 0
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: ee
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Matched <VarDefinition>: ee = 1
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: ff
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Matched <VarDefinition>: ff = 2
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int dd = 0, ee = 1, ff = 2;
[INFO] Matched <Declaration>: int dd = 0, ee = 1, ff = 2;
[INFO] Matched <BlockItem>:
int dd = 0, ee = 1, ff = 2;
[INFO] Consumed Token: int
[INFO] Consumed Token: ddd
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: ddd
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: ddd
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: ddd
[INFO] Matched <VarDefinition>: ddd
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: eee
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Matched <VarDefinition>: eee = 1
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int ddd, eee = 1;
[INFO] Matched <Declaration>: int ddd, eee = 1;
[INFO] Matched <BlockItem>:
int ddd, eee = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ddd
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ddd
[INFO] Matched <LeftValue>: ddd
[INFO] Matched <PrimaryExpression>: ddd
[INFO] Matched <UnaryExpression>: ddd
[INFO] Matched <MultiplicativeExpression>: ddd
[INFO] Matched <AdditiveExpression>: ddd
[INFO] Matched <Expression>: ddd
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ddd
[INFO] Matched <LeftValue>: ddd
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ddd
[INFO] Matched <LeftValue>: ddd
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: ddd = 0;
[INFO] Matched <Statement>: ddd = 0;
[INFO] Matched <BlockItem>:
ddd = 0;
[INFO] Consumed Token: int
[INFO] Consumed Token: arr_d
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: arr_d
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: arr_d
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: arr_d
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2}
[INFO] Matched <VarInitValue>: {1, 2}
[INFO] Matched <VarDefinition>: arr_d[2] = {1, 2}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int arr_d[2] = {1, 2};
[INFO] Matched <Declaration>: int arr_d[2] = {1, 2};
[INFO] Matched <BlockItem>:
int arr_d[2] = {1, 2};
[INFO] Consumed Token: int
[INFO] Consumed Token: arr_dd
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: arr_dd
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: arr_dd
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: arr_dd
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2}
[INFO] Matched <VarInitValue>: {1, 2}
[INFO] Matched <VarDefinition>: arr_dd[2] = {1, 2}
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: arr_ee
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <Expression>: 4
[INFO] Matched <ScalarVarInitValue>: 4
[INFO] Matched <VarInitValue>: 4
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <Expression>: 5
[INFO] Matched <ScalarVarInitValue>: 5
[INFO] Matched <VarInitValue>: 5
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {3, 4, 5}
[INFO] Matched <VarInitValue>: {3, 4, 5}
[INFO] Matched <VarDefinition>: arr_ee[3] = {3, 4, 5}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int arr_dd[2] = {1, 2}, arr_ee[3] = {3, 4, 5};
[INFO] Matched <Declaration>: int arr_dd[2] = {1, 2}, arr_ee[3] = {3, 4, 5};
[INFO] Matched <BlockItem>:
int arr_dd[2] = {1, 2}, arr_ee[3] = {3, 4, 5};
[INFO] Consumed Token: int
[INFO] Consumed Token: arr_ddd
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: arr_ddd
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: arr_ddd
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: arr_ddd
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <VarDefinition>: arr_ddd[2]
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: arr_eee
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <Expression>: 4
[INFO] Matched <ScalarVarInitValue>: 4
[INFO] Matched <VarInitValue>: 4
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <Expression>: 5
[INFO] Matched <ScalarVarInitValue>: 5
[INFO] Matched <VarInitValue>: 5
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {3, 4, 5}
[INFO] Matched <VarInitValue>: {3, 4, 5}
[INFO] Matched <VarDefinition>: arr_eee[3] = {3, 4, 5}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int arr_ddd[2], arr_eee[3] = {3, 4, 5};
[INFO] Matched <Declaration>: int arr_ddd[2], arr_eee[3] = {3, 4, 5};
[INFO] Matched <BlockItem>:
int arr_ddd[2], arr_eee[3] = {3, 4, 5};
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: arr_ddd
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arr_ddd
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arr_ddd[1]
[INFO] Matched <PrimaryExpression>: arr_ddd[1]
[INFO] Matched <UnaryExpression>: arr_ddd[1]
[INFO] Matched <MultiplicativeExpression>: arr_ddd[1]
[INFO] Matched <AdditiveExpression>: arr_ddd[1]
[INFO] Matched <Expression>: arr_ddd[1]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arr_ddd
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arr_ddd[1]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arr_ddd
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arr_ddd[1]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: arr_ddd[1] = 1;
[INFO] Matched <Statement>: arr_ddd[1] = 1;
[INFO] Matched <BlockItem>:
arr_ddd[1] = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: arr_eee
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arr_eee
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arr_eee[1]
[INFO] Matched <PrimaryExpression>: arr_eee[1]
[INFO] Matched <UnaryExpression>: arr_eee[1]
[INFO] Matched <MultiplicativeExpression>: arr_eee[1]
[INFO] Matched <AdditiveExpression>: arr_eee[1]
[INFO] Matched <Expression>: arr_eee[1]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arr_eee
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arr_eee[1]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arr_eee
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arr_eee[1]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: arr_eee[1] = 3;
[INFO] Matched <Statement>: arr_eee[1] = 3;
[INFO] Matched <BlockItem>:
arr_eee[1] = 3;
[INFO] Consumed Token: int
[INFO] Consumed Token: arrrr_d
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: arrrr_d
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: arrrr_d
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: arrrr_d
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2}
[INFO] Matched <VarInitValue>: {1, 2}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2}
[INFO] Matched <VarInitValue>: {1, 2}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{1, 2}, {1, 2}}
[INFO] Matched <VarInitValue>: {{1, 2}, {1, 2}}
[INFO] Matched <VarDefinition>: arrrr_d[2][2] = {{1, 2}, {1, 2}}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int arrrr_d[2][2] = {{1, 2}, {1, 2}};
[INFO] Matched <Declaration>: int arrrr_d[2][2] = {{1, 2}, {1, 2}};
[INFO] Matched <BlockItem>:
int arrrr_d[2][2] = {{1, 2}, {1, 2}};
[INFO] Consumed Token: int
[INFO] Consumed Token: arrrr_dd
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: arrrr_dd
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: arrrr_dd
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: arrrr_dd
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2}
[INFO] Matched <VarInitValue>: {1, 2}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2}
[INFO] Matched <VarInitValue>: {1, 2}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{1, 2}, {1, 2}}
[INFO] Matched <VarInitValue>: {{1, 2}, {1, 2}}
[INFO] Matched <VarDefinition>: arrrr_dd[2][2] = {{1, 2}, {1, 2}}
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: arrrr_ee
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2, 3}
[INFO] Matched <VarInitValue>: {1, 2, 3}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{1, 2, 3}}
[INFO] Matched <VarInitValue>: {{1, 2, 3}}
[INFO] Matched <VarDefinition>: arrrr_ee[1][3] = {{1, 2, 3}}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int arrrr_dd[2][2] = {{1, 2}, {1, 2}}, arrrr_ee[1][3] = {{1, 2, 3}};
[INFO] Matched <Declaration>: int arrrr_dd[2][2] = {{1, 2}, {1, 2}}, arrrr_ee[1][3] = {{1, 2, 3}};
[INFO] Matched <BlockItem>:
int arrrr_dd[2][2] = {{1, 2}, {1, 2}}, arrrr_ee[1][3] = {{1, 2, 3}};
[INFO] Consumed Token: int
[INFO] Consumed Token: arrrr_ddd
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: arrrr_ddd
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: arrrr_ddd
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: arrrr_ddd
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2}
[INFO] Matched <VarInitValue>: {1, 2}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2}
[INFO] Matched <VarInitValue>: {1, 2}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{1, 2}, {1, 2}}
[INFO] Matched <VarInitValue>: {{1, 2}, {1, 2}}
[INFO] Matched <VarDefinition>: arrrr_ddd[2][2] = {{1, 2}, {1, 2}}
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: arrrr_eee
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2, 3}
[INFO] Matched <VarInitValue>: {1, 2, 3}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{1, 2, 3}}
[INFO] Matched <VarInitValue>: {{1, 2, 3}}
[INFO] Matched <VarDefinition>: arrrr_eee[1][3] = {{1, 2, 3}}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int arrrr_ddd[2][2] = {{1, 2}, {1, 2}}, arrrr_eee[1][3] = {{1, 2, 3}};
[INFO] Matched <Declaration>: int arrrr_ddd[2][2] = {{1, 2}, {1, 2}}, arrrr_eee[1][3] = {{1, 2, 3}};
[INFO] Matched <BlockItem>:
int arrrr_ddd[2][2] = {{1, 2}, {1, 2}}, arrrr_eee[1][3] = {{1, 2, 3}};
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: arrrr_ddd
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arrrr_ddd
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arrrr_ddd[1][1]
[INFO] Matched <PrimaryExpression>: arrrr_ddd[1][1]
[INFO] Matched <UnaryExpression>: arrrr_ddd[1][1]
[INFO] Matched <MultiplicativeExpression>: arrrr_ddd[1][1]
[INFO] Matched <AdditiveExpression>: arrrr_ddd[1][1]
[INFO] Matched <Expression>: arrrr_ddd[1][1]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arrrr_ddd
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arrrr_ddd[1][1]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arrrr_ddd
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arrrr_ddd[1][1]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: arrrr_ddd[1][1] = 1;
[INFO] Matched <Statement>: arrrr_ddd[1][1] = 1;
[INFO] Matched <BlockItem>:
arrrr_ddd[1][1] = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: arrrr_eee
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arrrr_eee
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arrrr_eee[0][1]
[INFO] Matched <PrimaryExpression>: arrrr_eee[0][1]
[INFO] Matched <UnaryExpression>: arrrr_eee[0][1]
[INFO] Matched <MultiplicativeExpression>: arrrr_eee[0][1]
[INFO] Matched <AdditiveExpression>: arrrr_eee[0][1]
[INFO] Matched <Expression>: arrrr_eee[0][1]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arrrr_eee
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arrrr_eee[0][1]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arrrr_eee
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arrrr_eee[0][1]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: arrrr_eee[0][1] = 1;
[INFO] Matched <Statement>: arrrr_eee[0][1] = 1;
[INFO] Matched <BlockItem>:
arrrr_eee[0][1] = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "21182621\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("21182621\n");
[INFO] Matched <Statement>: printf("21182621\n");
[INFO] Matched <BlockItem>:
printf("21182621\n");
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: func1
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: func1
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: func1()
[INFO] Matched <UnaryExpression>: func1()
[INFO] Matched <MultiplicativeExpression>: func1()
[INFO] Matched <AdditiveExpression>: func1()
[INFO] Matched <Expression>: func1()
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: func1();
[INFO] Matched <Statement>: func1();
[INFO] Matched <BlockItem>:
func1();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: func2
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: func2
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <FuncArgList>: 1
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: func2(1)
[INFO] Matched <UnaryExpression>: func2(1)
[INFO] Matched <MultiplicativeExpression>: func2(1)
[INFO] Matched <AdditiveExpression>: func2(1)
[INFO] Matched <Expression>: func2(1)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: func2(1);
[INFO] Matched <Statement>: func2(1);
[INFO] Matched <BlockItem>:
func2(1);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: func3
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: func3
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: arrrr_d
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arrrr_d
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arrrr_d[0]
[INFO] Matched <PrimaryExpression>: arrrr_d[0]
[INFO] Matched <UnaryExpression>: arrrr_d[0]
[INFO] Matched <MultiplicativeExpression>: arrrr_d[0]
[INFO] Matched <AdditiveExpression>: arrrr_d[0]
[INFO] Matched <Expression>: arrrr_d[0]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: arrrr_d
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arrrr_d
[INFO] Matched <LeftValue>: arrrr_d
[INFO] Matched <PrimaryExpression>: arrrr_d
[INFO] Matched <UnaryExpression>: arrrr_d
[INFO] Matched <MultiplicativeExpression>: arrrr_d
[INFO] Matched <AdditiveExpression>: arrrr_d
[INFO] Matched <Expression>: arrrr_d
[INFO] Matched <FuncArgList>: 1, arrrr_d[0], arrrr_d
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: func3(1, arrrr_d[0], arrrr_d)
[INFO] Matched <UnaryExpression>: func3(1, arrrr_d[0], arrrr_d)
[INFO] Matched <MultiplicativeExpression>: func3(1, arrrr_d[0], arrrr_d)
[INFO] Matched <AdditiveExpression>: func3(1, arrrr_d[0], arrrr_d)
[INFO] Matched <Expression>: func3(1, arrrr_d[0], arrrr_d)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: func3(1, arrrr_d[0], arrrr_d);
[INFO] Matched <Statement>: func3(1, arrrr_d[0], arrrr_d);
[INFO] Matched <BlockItem>:
func3(1, arrrr_d[0], arrrr_d);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: func4
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: func4
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: func4()
[INFO] Matched <UnaryExpression>: func4()
[INFO] Matched <MultiplicativeExpression>: func4()
[INFO] Matched <AdditiveExpression>: func4()
[INFO] Matched <Expression>: func4()
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: func4();
[INFO] Matched <Statement>: func4();
[INFO] Matched <BlockItem>:
func4();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: func5
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: func5
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <FuncArgList>: 1
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: func5(1)
[INFO] Matched <UnaryExpression>: func5(1)
[INFO] Matched <MultiplicativeExpression>: func5(1)
[INFO] Matched <AdditiveExpression>: func5(1)
[INFO] Matched <Expression>: func5(1)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: func5(1);
[INFO] Matched <Statement>: func5(1);
[INFO] Matched <BlockItem>:
func5(1);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: func6
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: func6
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: arr_d
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arr_d
[INFO] Matched <LeftValue>: arr_d
[INFO] Matched <PrimaryExpression>: arr_d
[INFO] Matched <UnaryExpression>: arr_d
[INFO] Matched <MultiplicativeExpression>: arr_d
[INFO] Matched <AdditiveExpression>: arr_d
[INFO] Matched <Expression>: arr_d
[INFO] Matched <FuncArgList>: 1, arr_d
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: func6(1, arr_d)
[INFO] Matched <UnaryExpression>: func6(1, arr_d)
[INFO] Matched <MultiplicativeExpression>: func6(1, arr_d)
[INFO] Matched <AdditiveExpression>: func6(1, arr_d)
[INFO] Matched <Expression>: func6(1, arr_d)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: func6(1, arr_d);
[INFO] Matched <Statement>: func6(1, arr_d);
[INFO] Matched <BlockItem>:
func6(1, arr_d);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "21182621\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("21182621\n");
[INFO] Matched <Statement>: printf("21182621\n");
[INFO] Matched <BlockItem>:
printf("21182621\n");
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: i
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <Expression>: 5
[INFO] Matched <ScalarVarInitValue>: 5
[INFO] Matched <VarInitValue>: 5
[INFO] Matched <VarDefinition>: i = 5
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int i = 5;
[INFO] Matched <Declaration>: int i = 5;
[INFO] Matched <BlockItem>:
int i = 5;
[INFO] Consumed Token: int
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: j
[INFO] Matched <VarDefinition>: j
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int j;
[INFO] Matched <Declaration>: int j;
[INFO] Matched <BlockItem>:
int j;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ForStatement>: j = 1
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <RelationalExpression>: j <= 5
[INFO] Matched <EqualityExpression>: j <= 5
[INFO] Matched <LogicalAndExpression>: j <= 5
[INFO] Matched <LogicalOrExpression>: j <= 5
[INFO] Matched <Condition>: j <= 5
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: j + 1
[INFO] Matched <Expression>: j + 1
[INFO] Matched <ForStatement>: j = j + 1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    ;
}
[INFO] Matched <Statement>:
{
    ;
}
[INFO] Matched <ForStatementSelection>:
for (j = 1; j <= 5; j = j + 1) {
    ;
}
[INFO] Matched <Statement>:
for (j = 1; j <= 5; j = j + 1) {
    ;
}
[INFO] Matched <BlockItem>:
for (j = 1; j <= 5; j = j + 1) {
    ;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <Expression>: j
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: j = 1;
[INFO] Matched <Statement>: j = 1;
[INFO] Matched <BlockItem>:
j = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <RelationalExpression>: j <= 5
[INFO] Matched <EqualityExpression>: j <= 5
[INFO] Matched <LogicalAndExpression>: j <= 5
[INFO] Matched <LogicalOrExpression>: j <= 5
[INFO] Matched <Condition>: j <= 5
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: j + 1
[INFO] Matched <Expression>: j + 1
[INFO] Matched <ForStatement>: j = j + 1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ContinueStatement>.
[INFO] Consumed Token: continue
[INFO] Consumed Token: ;
[INFO] Matched <ContinueStatement>: continue;
[INFO] Matched <Statement>: continue;
[INFO] Matched <BlockItem>:
continue;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    ;
    continue;
}
[INFO] Matched <Statement>:
{
    ;
    continue;
}
[INFO] Matched <ForStatementSelection>:
for (; j <= 5; j = j + 1) {
    ;
    continue;
}
[INFO] Matched <Statement>:
for (; j <= 5; j = j + 1) {
    ;
    continue;
}
[INFO] Matched <BlockItem>:
for (; j <= 5; j = j + 1) {
    ;
    continue;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ForStatement>: j = 1
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <RelationalExpression>.
[INFO] Failed to match <EqualityExpression>.
[INFO] Failed to match <LogicalAndExpression>.
[INFO] Failed to match <LogicalOrExpression>.
[INFO] Failed to match <Condition>.
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: j + 1
[INFO] Matched <Expression>: j + 1
[INFO] Matched <ForStatement>: j = j + 1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    break;
}
[INFO] Matched <Statement>:
{
    break;
}
[INFO] Matched <ForStatementSelection>:
for (j = 1; ; j = j + 1) {
    break;
}
[INFO] Matched <Statement>:
for (j = 1; ; j = j + 1) {
    break;
}
[INFO] Matched <BlockItem>:
for (j = 1; ; j = j + 1) {
    break;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ForStatement>: j = 1
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <RelationalExpression>: j <= 5
[INFO] Matched <EqualityExpression>: j <= 5
[INFO] Matched <LogicalAndExpression>: j <= 5
[INFO] Matched <LogicalOrExpression>: j <= 5
[INFO] Matched <Condition>: j <= 5
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <Expression>: j
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: j + 1
[INFO] Matched <Expression>: j + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: j = j + 1;
[INFO] Matched <Statement>: j = j + 1;
[INFO] Matched <BlockItem>:
j = j + 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    j = j + 1;
}
[INFO] Matched <Statement>:
{
    j = j + 1;
}
[INFO] Matched <ForStatementSelection>:
for (j = 1; j <= 5; ) {
    j = j + 1;
}
[INFO] Matched <Statement>:
for (j = 1; j <= 5; ) {
    j = j + 1;
}
[INFO] Matched <BlockItem>:
for (j = 1; j <= 5; ) {
    j = j + 1;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ForStatement>: j = 1
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <RelationalExpression>.
[INFO] Failed to match <EqualityExpression>.
[INFO] Failed to match <LogicalAndExpression>.
[INFO] Failed to match <LogicalOrExpression>.
[INFO] Failed to match <Condition>.
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    break;
}
[INFO] Matched <Statement>:
{
    break;
}
[INFO] Matched <ForStatementSelection>:
for (j = 1; ; ) {
    break;
}
[INFO] Matched <Statement>:
for (j = 1; ; ) {
    break;
}
[INFO] Matched <BlockItem>:
for (j = 1; ; ) {
    break;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <RelationalExpression>: j <= 5
[INFO] Matched <EqualityExpression>: j <= 5
[INFO] Matched <LogicalAndExpression>: j <= 5
[INFO] Matched <LogicalOrExpression>: j <= 5
[INFO] Matched <Condition>: j <= 5
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    break;
}
[INFO] Matched <Statement>:
{
    break;
}
[INFO] Matched <ForStatementSelection>:
for (; j <= 5; ) {
    break;
}
[INFO] Matched <Statement>:
for (; j <= 5; ) {
    break;
}
[INFO] Matched <BlockItem>:
for (; j <= 5; ) {
    break;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <RelationalExpression>.
[INFO] Failed to match <EqualityExpression>.
[INFO] Failed to match <LogicalAndExpression>.
[INFO] Failed to match <LogicalOrExpression>.
[INFO] Failed to match <Condition>.
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: j + 1
[INFO] Matched <Expression>: j + 1
[INFO] Matched <ForStatement>: j = j + 1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    break;
}
[INFO] Matched <Statement>:
{
    break;
}
[INFO] Matched <ForStatementSelection>:
for (; ; j = j + 1) {
    break;
}
[INFO] Matched <Statement>:
for (; ; j = j + 1) {
    break;
}
[INFO] Matched <BlockItem>:
for (; ; j = j + 1) {
    break;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <RelationalExpression>.
[INFO] Failed to match <EqualityExpression>.
[INFO] Failed to match <LogicalAndExpression>.
[INFO] Failed to match <LogicalOrExpression>.
[INFO] Failed to match <Condition>.
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    break;
}
[INFO] Matched <Statement>:
{
    break;
}
[INFO] Matched <ForStatementSelection>:
for (; ; ) {
    break;
}
[INFO] Matched <Statement>:
for (; ; ) {
    break;
}
[INFO] Matched <BlockItem>:
for (; ; ) {
    break;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <RelationalExpression>: i
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <RelationalExpression>: 3
[INFO] Matched <EqualityExpression>: i == 3
[INFO] Matched <LogicalAndExpression>: i == 3
[INFO] Matched <LogicalOrExpression>: i == 3
[INFO] Matched <Condition>: i == 3
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    ;
}
[INFO] Matched <Statement>:
{
    ;
}
[INFO] Matched <IfStatement>:
if (i == 3) {
    ;
}  
[INFO] Matched <Statement>:
if (i == 3) {
    ;
}  
[INFO] Matched <BlockItem>:
if (i == 3) {
    ;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <RelationalExpression>: i
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <RelationalExpression>: 2
[INFO] Matched <EqualityExpression>: i == 2
[INFO] Matched <LogicalAndExpression>: i == 2
[INFO] Matched <LogicalOrExpression>: i == 2
[INFO] Matched <Condition>: i == 2
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    ;
}
[INFO] Matched <Statement>:
{
    ;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    ;
}
[INFO] Matched <Statement>:
{
    ;
}
[INFO] Matched <IfStatement>:
if (i == 2) {
    ;
} else {
    ;
}
[INFO] Matched <Statement>:
if (i == 2) {
    ;
} else {
    ;
}
[INFO] Matched <BlockItem>:
if (i == 2) {
    ;
} else {
    ;
}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (i == 3) {
        ;
    }  
    if (i == 2) {
        ;
    } else {
        ;
    }
}
[INFO] Matched <Statement>:
{
    if (i == 3) {
        ;
    }  
    if (i == 2) {
        ;
    } else {
        ;
    }
}
[INFO] Matched <BlockItem>:
{
    if (i == 3) {
        ;
    }  
    if (i == 2) {
        ;
    } else {
        ;
    }
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", a);
[INFO] Matched <Statement>: printf("%d\n", a);
[INFO] Matched <BlockItem>:
printf("%d\n", a);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "21182621\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("21182621\n");
[INFO] Matched <Statement>: printf("21182621\n");
[INFO] Matched <BlockItem>:
printf("21182621\n");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: d
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: d
[INFO] Matched <LeftValue>: d
[INFO] Matched <PrimaryExpression>: d
[INFO] Matched <UnaryExpression>: d
[INFO] Matched <MultiplicativeExpression>: d
[INFO] Matched <AdditiveExpression>: d
[INFO] Matched <Expression>: d
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: d
[INFO] Matched <LeftValue>: d
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: d
[INFO] Matched <LeftValue>: d
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <UnaryOperatedExpression>: -3
[INFO] Matched <UnaryExpression>: -3
[INFO] Matched <MultiplicativeExpression>: -3
[INFO] Matched <AdditiveExpression>: -3
[INFO] Matched <Expression>: -3
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (-3)
[INFO] Matched <PrimaryExpression>: (-3)
[INFO] Matched <UnaryExpression>: (-3)
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 2 * (-3) / 4 % 5
[INFO] Matched <AdditiveExpression>: 1 + 2 * (-3) / 4 % 5
[INFO] Matched <Expression>: 1 + 2 * (-3) / 4 % 5
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: d = 1 + 2 * (-3) / 4 % 5;
[INFO] Matched <Statement>: d = 1 + 2 * (-3) / 4 % 5;
[INFO] Matched <BlockItem>:
d = 1 + 2 * (-3) / 4 % 5;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: d
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: d
[INFO] Matched <LeftValue>: d
[INFO] Matched <PrimaryExpression>: d
[INFO] Matched <UnaryExpression>: d
[INFO] Matched <MultiplicativeExpression>: d
[INFO] Matched <AdditiveExpression>: d
[INFO] Matched <Expression>: d
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: d
[INFO] Matched <LeftValue>: d
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: d
[INFO] Matched <LeftValue>: d
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: d
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: d
[INFO] Matched <LeftValue>: d
[INFO] Matched <PrimaryExpression>: d
[INFO] Matched <UnaryExpression>: d
[INFO] Matched <UnaryOperatedExpression>: -d
[INFO] Matched <UnaryExpression>: -d
[INFO] Matched <UnaryOperatedExpression>: +-d
[INFO] Matched <UnaryExpression>: +-d
[INFO] Matched <UnaryOperatedExpression>: -+-d
[INFO] Matched <UnaryExpression>: -+-d
[INFO] Matched <MultiplicativeExpression>: -+-d
[INFO] Matched <AdditiveExpression>: -+-d
[INFO] Matched <Expression>: -+-d
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: d = -+-d;
[INFO] Matched <Statement>: d = -+-d;
[INFO] Matched <BlockItem>:
d = -+-d;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <RelationalExpression>: 3
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <RelationalExpression>: 4
[INFO] Matched <EqualityExpression>: 3 != 4
[INFO] Matched <LogicalAndExpression>: 3 != 4
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <UnaryOperatedExpression>: !a
[INFO] Matched <UnaryExpression>: !a
[INFO] Matched <MultiplicativeExpression>: !a
[INFO] Matched <AdditiveExpression>: !a
[INFO] Matched <Expression>: !a
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (!a)
[INFO] Matched <PrimaryExpression>: (!a)
[INFO] Matched <UnaryExpression>: (!a)
[INFO] Matched <MultiplicativeExpression>: (!a)
[INFO] Matched <AdditiveExpression>: (!a)
[INFO] Matched <RelationalExpression>: (!a)
[INFO] Matched <EqualityExpression>: (!a)
[INFO] Matched <LogicalAndExpression>: (!a)
[INFO] Matched <LogicalOrExpression>: 3 != 4 || (!a)
[INFO] Matched <Condition>: 3 != 4 || (!a)
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    ;
}
[INFO] Matched <Statement>:
{
    ;
}
[INFO] Matched <IfStatement>:
if (3 != 4 || (!a)) {
    ;
}  
[INFO] Matched <Statement>:
if (3 != 4 || (!a)) {
    ;
}  
[INFO] Matched <BlockItem>:
if (3 != 4 || (!a)) {
    ;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <RelationalExpression>: 1 < 2
[INFO] Matched <EqualityExpression>: 1 < 2
[INFO] Matched <LogicalAndExpression>: 1 < 2
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <RelationalExpression>: 1 > 3
[INFO] Matched <EqualityExpression>: 1 > 3
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <RelationalExpression>: 1 <= 2
[INFO] Matched <EqualityExpression>: 1 <= 2
[INFO] Matched <LogicalAndExpression>: 1 > 3 && 1 <= 2
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <RelationalExpression>: 1 >= 3
[INFO] Matched <EqualityExpression>: 1 >= 3
[INFO] Matched <LogicalAndExpression>: 1 >= 3
[INFO] Matched <LogicalOrExpression>: 1 < 2 || 1 > 3 && 1 <= 2 || 1 >= 3
[INFO] Matched <Condition>: 1 < 2 || 1 > 3 && 1 <= 2 || 1 >= 3
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    ;
}
[INFO] Matched <Statement>:
{
    ;
}
[INFO] Matched <IfStatement>:
if (1 < 2 || 1 > 3 && 1 <= 2 || 1 >= 3) {
    ;
}  
[INFO] Matched <Statement>:
if (1 < 2 || 1 > 3 && 1 <= 2 || 1 >= 3) {
    ;
}  
[INFO] Matched <BlockItem>:
if (1 < 2 || 1 > 3 && 1 <= 2 || 1 >= 3) {
    ;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: d
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: d
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: d
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: d
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <Expression>: 10
[INFO] Matched <ScalarVarInitValue>: 10
[INFO] Matched <VarInitValue>: 10
[INFO] Matched <VarDefinition>: d = 10
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int d = 10;
[INFO] Matched <Declaration>: int d = 10;
[INFO] Matched <BlockItem>:
int d = 10;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int d = 10;
}
[INFO] Matched <Statement>:
{
    int d = 10;
}
[INFO] Matched <BlockItem>:
{
    int d = 10;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "21182621\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("21182621\n");
[INFO] Matched <Statement>: printf("21182621\n");
[INFO] Matched <BlockItem>:
printf("21182621\n");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "21182621\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("21182621\n");
[INFO] Matched <Statement>: printf("21182621\n");
[INFO] Matched <BlockItem>:
printf("21182621\n");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "21182621\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("21182621\n");
[INFO] Matched <Statement>: printf("21182621\n");
[INFO] Matched <BlockItem>:
printf("21182621\n");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int gett;
    gett = getint();
    const int a = 0;
    const int aa = 0, bb = 1;
    const int aaa = 0, bbb = 1, ccc = 2;
    const int arr_a[2] = {1, 2};
    const int arr_aa[2] = {1, 2}, arr_bb[3] = {3, 4, 5};
    const int arrrr_a[2][2] = {{1, 2}, {1, 2}};
    const int arrrr_aa[2][2] = {{1, 2}, {1, 2}}, arrrr_bb[1][3] = {{1, 2, 3}};
    printf("21182621\n");
    int d = 0;
    int dd = 0, ee = 1, ff = 2;
    int ddd, eee = 1;
    ddd = 0;
    int arr_d[2] = {1, 2};
    int arr_dd[2] = {1, 2}, arr_ee[3] = {3, 4, 5};
    int arr_ddd[2], arr_eee[3] = {3, 4, 5};
    arr_ddd[1] = 1;
    arr_eee[1] = 3;
    int arrrr_d[2][2] = {{1, 2}, {1, 2}};
    int arrrr_dd[2][2] = {{1, 2}, {1, 2}}, arrrr_ee[1][3] = {{1, 2, 3}};
    int arrrr_ddd[2][2] = {{1, 2}, {1, 2}}, arrrr_eee[1][3] = {{1, 2, 3}};
    arrrr_ddd[1][1] = 1;
    arrrr_eee[0][1] = 1;
    printf("21182621\n");
    func1();
    func2(1);
    func3(1, arrrr_d[0], arrrr_d);
    func4();
    func5(1);
    func6(1, arr_d);
    printf("21182621\n");
    int i = 5;
    int j;
    for (j = 1; j <= 5; j = j + 1) {
        ;
    }
    j = 1;
    for (; j <= 5; j = j + 1) {
        ;
        continue;
    }
    for (j = 1; ; j = j + 1) {
        break;
    }
    for (j = 1; j <= 5; ) {
        j = j + 1;
    }
    for (j = 1; ; ) {
        break;
    }
    for (; j <= 5; ) {
        break;
    }
    for (; ; j = j + 1) {
        break;
    }
    for (; ; ) {
        break;
    }
    {
        if (i == 3) {
            ;
        }  
        if (i == 2) {
            ;
        } else {
            ;
        }
    }
    printf("%d\n", a);
    printf("21182621\n");
    d = 1 + 2 * (-3) / 4 % 5;
    d = -+-d;
    if (3 != 4 || (!a)) {
        ;
    }  
    if (1 < 2 || 1 > 3 && 1 <= 2 || 1 >= 3) {
        ;
    }  
    {
        int d = 10;
    }
    {}
    printf("21182621\n");
    printf("21182621\n");
    printf("21182621\n");
    return 0;
}
[INFO] Matched <MainFuncDefinition>:
int main() {
    int gett;
    gett = getint();
    const int a = 0;
    const int aa = 0, bb = 1;
    const int aaa = 0, bbb = 1, ccc = 2;
    const int arr_a[2] = {1, 2};
    const int arr_aa[2] = {1, 2}, arr_bb[3] = {3, 4, 5};
    const int arrrr_a[2][2] = {{1, 2}, {1, 2}};
    const int arrrr_aa[2][2] = {{1, 2}, {1, 2}}, arrrr_bb[1][3] = {{1, 2, 3}};
    printf("21182621\n");
    int d = 0;
    int dd = 0, ee = 1, ff = 2;
    int ddd, eee = 1;
    ddd = 0;
    int arr_d[2] = {1, 2};
    int arr_dd[2] = {1, 2}, arr_ee[3] = {3, 4, 5};
    int arr_ddd[2], arr_eee[3] = {3, 4, 5};
    arr_ddd[1] = 1;
    arr_eee[1] = 3;
    int arrrr_d[2][2] = {{1, 2}, {1, 2}};
    int arrrr_dd[2][2] = {{1, 2}, {1, 2}}, arrrr_ee[1][3] = {{1, 2, 3}};
    int arrrr_ddd[2][2] = {{1, 2}, {1, 2}}, arrrr_eee[1][3] = {{1, 2, 3}};
    arrrr_ddd[1][1] = 1;
    arrrr_eee[0][1] = 1;
    printf("21182621\n");
    func1();
    func2(1);
    func3(1, arrrr_d[0], arrrr_d);
    func4();
    func5(1);
    func6(1, arr_d);
    printf("21182621\n");
    int i = 5;
    int j;
    for (j = 1; j <= 5; j = j + 1) {
        ;
    }
    j = 1;
    for (; j <= 5; j = j + 1) {
        ;
        continue;
    }
    for (j = 1; ; j = j + 1) {
        break;
    }
    for (j = 1; j <= 5; ) {
        j = j + 1;
    }
    for (j = 1; ; ) {
        break;
    }
    for (; j <= 5; ) {
        break;
    }
    for (; ; j = j + 1) {
        break;
    }
    for (; ; ) {
        break;
    }
    {
        if (i == 3) {
            ;
        }  
        if (i == 2) {
            ;
        } else {
            ;
        }
    }
    printf("%d\n", a);
    printf("21182621\n");
    d = 1 + 2 * (-3) / 4 % 5;
    d = -+-d;
    if (3 != 4 || (!a)) {
        ;
    }  
    if (1 < 2 || 1 > 3 && 1 <= 2 || 1 >= 3) {
        ;
    }  
    {
        int d = 10;
    }
    {}
    printf("21182621\n");
    printf("21182621\n");
    printf("21182621\n");
    return 0;
}
[INFO] Matched <CompileUnit>:
int a_global;
const int b_global = 1;

void func1() {
    printf("21182621\n");
}

void func2(int a) {
    a = a - 1;
    return;
}

void func3(int a, int arr[], int arrrr[][2]) {
    a = arr[0] + arrrr[0][0];
    return;
}

int func4() {
    printf("21182621\n");
    return 0;
}

int func5(int a) {
    a = a + 1;
    return a;
}

int func6(int a, int arr[]) {
    a = a + arr[0];
    return a;
}

int main() {
    int gett;
    gett = getint();
    const int a = 0;
    const int aa = 0, bb = 1;
    const int aaa = 0, bbb = 1, ccc = 2;
    const int arr_a[2] = {1, 2};
    const int arr_aa[2] = {1, 2}, arr_bb[3] = {3, 4, 5};
    const int arrrr_a[2][2] = {{1, 2}, {1, 2}};
    const int arrrr_aa[2][2] = {{1, 2}, {1, 2}}, arrrr_bb[1][3] = {{1, 2, 3}};
    printf("21182621\n");
    int d = 0;
    int dd = 0, ee = 1, ff = 2;
    int ddd, eee = 1;
    ddd = 0;
    int arr_d[2] = {1, 2};
    int arr_dd[2] = {1, 2}, arr_ee[3] = {3, 4, 5};
    int arr_ddd[2], arr_eee[3] = {3, 4, 5};
    arr_ddd[1] = 1;
    arr_eee[1] = 3;
    int arrrr_d[2][2] = {{1, 2}, {1, 2}};
    int arrrr_dd[2][2] = {{1, 2}, {1, 2}}, arrrr_ee[1][3] = {{1, 2, 3}};
    int arrrr_ddd[2][2] = {{1, 2}, {1, 2}}, arrrr_eee[1][3] = {{1, 2, 3}};
    arrrr_ddd[1][1] = 1;
    arrrr_eee[0][1] = 1;
    printf("21182621\n");
    func1();
    func2(1);
    func3(1, arrrr_d[0], arrrr_d);
    func4();
    func5(1);
    func6(1, arr_d);
    printf("21182621\n");
    int i = 5;
    int j;
    for (j = 1; j <= 5; j = j + 1) {
        ;
    }
    j = 1;
    for (; j <= 5; j = j + 1) {
        ;
        continue;
    }
    for (j = 1; ; j = j + 1) {
        break;
    }
    for (j = 1; j <= 5; ) {
        j = j + 1;
    }
    for (j = 1; ; ) {
        break;
    }
    for (; j <= 5; ) {
        break;
    }
    for (; ; j = j + 1) {
        break;
    }
    for (; ; ) {
        break;
    }
    {
        if (i == 3) {
            ;
        }  
        if (i == 2) {
            ;
        } else {
            ;
        }
    }
    printf("%d\n", a);
    printf("21182621\n");
    d = 1 + 2 * (-3) / 4 % 5;
    d = -+-d;
    if (3 != 4 || (!a)) {
        ;
    }  
    if (1 < 2 || 1 > 3 && 1 <= 2 || 1 >= 3) {
        ;
    }  
    {
        int d = 10;
    }
    {}
    printf("21182621\n");
    printf("21182621\n");
    printf("21182621\n");
    return 0;
}
[INFO] Test 3
[INFO] Matching <CompileUnit>
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: a1
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Matched <ConstDefinition>.a1 = 1
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int a1 = 1;
[INFO] Matched <Declaration>: const int a1 = 1;
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: a2
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Matched <ConstDefinition>.a2 = 2
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: a3
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Matched <ScalarConstInitValue>: 3
[INFO] Matched <ConstInitValue>: 3
[INFO] Matched <ConstDefinition>.a3 = 3
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int a2 = 2, a3 = 3;
[INFO] Matched <Declaration>: const int a2 = 2, a3 = 3;
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: a4
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Matched <ConstDefinition>.a4 = 2
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: a5
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Matched <ScalarConstInitValue>: 3
[INFO] Matched <ConstInitValue>: 3
[INFO] Matched <ConstDefinition>.a5 = 3
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: a6
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <ConstExpression>: 4
[INFO] Matched <ScalarConstInitValue>: 4
[INFO] Matched <ConstInitValue>: 4
[INFO] Matched <ConstDefinition>.a6 = 4
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int a4 = 2, a5 = 3, a6 = 4;
[INFO] Matched <Declaration>: const int a4 = 2, a5 = 3, a6 = 4;
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: b
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <ConstExpression>: 0
[INFO] Matched <ScalarConstInitValue>: 0
[INFO] Matched <ConstInitValue>: 0
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {0, 1}
[INFO] Matched <ConstInitValue>: {0, 1}
[INFO] Matched <ConstDefinition>.b[2] = {0, 1}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int b[2] = {0, 1};
[INFO] Matched <Declaration>: const int b[2] = {0, 1};
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: c
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <ConstExpression>: 0
[INFO] Matched <ScalarConstInitValue>: 0
[INFO] Matched <ConstInitValue>: 0
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <ConstExpression>: 0
[INFO] Matched <ScalarConstInitValue>: 0
[INFO] Matched <ConstInitValue>: 0
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {0, 0, 1}
[INFO] Matched <ConstInitValue>: {0, 0, 1}
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <ConstExpression>: 0
[INFO] Matched <ScalarConstInitValue>: 0
[INFO] Matched <ConstInitValue>: 0
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <ConstExpression>: 0
[INFO] Matched <ScalarConstInitValue>: 0
[INFO] Matched <ConstInitValue>: 0
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {0, 0, 2}
[INFO] Matched <ConstInitValue>: {0, 0, 2}
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {{0, 0, 1}, {0, 0, 2}}
[INFO] Matched <ConstInitValue>: {{0, 0, 1}, {0, 0, 2}}
[INFO] Matched <ConstDefinition>.c[2][3] = {{0, 0, 1}, {0, 0, 2}}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int c[2][3] = {{0, 0, 1}, {0, 0, 2}};
[INFO] Matched <Declaration>: const int c[2][3] = {{0, 0, 1}, {0, 0, 2}};
[INFO] Consumed Token: void
[INFO] Consumed Token: test1
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: test1
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: b
[INFO] Matched <FuncParamList>: int a, int b
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return;
}
[INFO] Matched <FuncDefinition>:
void test1(int a, int b) {
    return;
}
[INFO] Consumed Token: void
[INFO] Consumed Token: test2
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: test2
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Failed to match <BasicType>.
[INFO] Failed to match <FuncParam>.
[INFO] Failed to match <FuncParamList>.
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return;
}
[INFO] Matched <FuncDefinition>:
void test2() {
    return;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: test3
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: test3
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int a[]
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: b
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int b[][3]
[INFO] Matched <FuncParamList>: int a[], int b[][3]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 1;
[INFO] Matched <Statement>: return 1;
[INFO] Matched <BlockItem>:
return 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return 1;
}
[INFO] Matched <FuncDefinition>:
int test3(int a[], int b[][3]) {
    return 1;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: test4
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: test4
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: b
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: c
[INFO] Matched <FuncParamList>: int a, int b, int c
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: a + b
[INFO] Matched <Expression>: a + b
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (a + b)
[INFO] Matched <PrimaryExpression>: (a + b)
[INFO] Matched <UnaryExpression>: (a + b)
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Matched <LeftValue>: c
[INFO] Matched <PrimaryExpression>: c
[INFO] Matched <UnaryExpression>: c
[INFO] Matched <MultiplicativeExpression>: (a + b) * c
[INFO] Matched <AdditiveExpression>: (a + b) * c
[INFO] Matched <Expression>: (a + b) * c
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return (a + b) * c;
[INFO] Matched <Statement>: return (a + b) * c;
[INFO] Matched <BlockItem>:
return (a + b) * c;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return (a + b) * c;
}
[INFO] Matched <FuncDefinition>:
int test4(int a, int b, int c) {
    return (a + b) * c;
}
[INFO] Consumed Token: void
[INFO] Consumed Token: test5
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: test5
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: b
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int b[]
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: c
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int c[][3]
[INFO] Matched <FuncParamList>: int a, int b[], int c[][3]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return;
}
[INFO] Matched <FuncDefinition>:
void test5(int a, int b[], int c[][3]) {
    return;
}
[INFO] Consumed Token: void
[INFO] Consumed Token: test6
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: test6
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: x
[INFO] Matched <FuncParamList>: int x
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return;
}
[INFO] Matched <FuncDefinition>:
void test6(int x) {
    return;
}
[INFO] Consumed Token: int
[INFO] Lexer rolling back...
[INFO] Matching <MainFuncDefinition>.
[INFO] Consumed Token: int
[INFO] Consumed Token: main
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "21373119"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("21373119");
[INFO] Matched <Statement>: printf("21373119");
[INFO] Matched <BlockItem>:
printf("21373119");
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: a
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Matched <VarDefinition>: a = 1
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int a = 1;
[INFO] Matched <Declaration>: int a = 1;
[INFO] Matched <BlockItem>:
int a = 1;
[INFO] Consumed Token: int
[INFO] Consumed Token: xm
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: xm
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: xm
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: xm
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: xm = 0
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: xmm
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: xmm = 0
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int xm = 0, xmm = 0;
[INFO] Matched <Declaration>: int xm = 0, xmm = 0;
[INFO] Matched <BlockItem>:
int xm = 0, xmm = 0;
[INFO] Consumed Token: int
[INFO] Consumed Token: yxm
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: yxm
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: yxm
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: yxm
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 0}
[INFO] Matched <VarInitValue>: {1, 0}
[INFO] Matched <VarDefinition>: yxm[2] = {1, 0}
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: yxmm
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <ConstExpression>: 4
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <ConstExpression>: 5
[INFO] Consumed Token: ]
[INFO] Matched <VarDefinition>: yxmm[4][5]
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: yxmmm
[INFO] Matched <VarDefinition>: yxmmm
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int yxm[2] = {1, 0}, yxmm[4][5], yxmmm;
[INFO] Matched <Declaration>: int yxm[2] = {1, 0}, yxmm[4][5], yxmmm;
[INFO] Matched <BlockItem>:
int yxm[2] = {1, 0}, yxmm[4][5], yxmmm;
[INFO] Consumed Token: int
[INFO] Consumed Token: b1
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: b1
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: b1
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: b1
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2}
[INFO] Matched <VarInitValue>: {1, 2}
[INFO] Matched <VarDefinition>: b1[2] = {1, 2}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int b1[2] = {1, 2};
[INFO] Matched <Declaration>: int b1[2] = {1, 2};
[INFO] Matched <BlockItem>:
int b1[2] = {1, 2};
[INFO] Consumed Token: int
[INFO] Consumed Token: c1
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: c1
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: c1
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: c1
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2, 3}
[INFO] Matched <VarInitValue>: {1, 2, 3}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <Expression>: 4
[INFO] Matched <ScalarVarInitValue>: 4
[INFO] Matched <VarInitValue>: 4
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <Expression>: 5
[INFO] Matched <ScalarVarInitValue>: 5
[INFO] Matched <VarInitValue>: 5
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: 6
[INFO] Matched <Expression>: 6
[INFO] Matched <ScalarVarInitValue>: 6
[INFO] Matched <VarInitValue>: 6
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {4, 5, 6}
[INFO] Matched <VarInitValue>: {4, 5, 6}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{1, 2, 3}, {4, 5, 6}}
[INFO] Matched <VarInitValue>: {{1, 2, 3}, {4, 5, 6}}
[INFO] Matched <VarDefinition>: c1[2][3] = {{1, 2, 3}, {4, 5, 6}}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int c1[2][3] = {{1, 2, 3}, {4, 5, 6}};
[INFO] Matched <Declaration>: int c1[2][3] = {{1, 2, 3}, {4, 5, 6}};
[INFO] Matched <BlockItem>:
int c1[2][3] = {{1, 2, 3}, {4, 5, 6}};
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: a
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Matched <VarDefinition>: a = 1
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int a = 1;
[INFO] Matched <Declaration>: int a = 1;
[INFO] Matched <BlockItem>:
int a = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", a);
[INFO] Matched <Statement>: printf("%d\n", a);
[INFO] Matched <BlockItem>:
printf("%d\n", a);
[INFO] Lexer rolling back...
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int a = 1;
    printf("%d\n", a);
}
[INFO] Matched <Statement>:
{
    int a = 1;
    printf("%d\n", a);
}
[INFO] Matched <BlockItem>:
{
    int a = 1;
    printf("%d\n", a);
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: x
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 12
[INFO] Matched <Number>: 12
[INFO] Matched <PrimaryExpression>: 12
[INFO] Matched <UnaryExpression>: 12
[INFO] Matched <MultiplicativeExpression>: 12
[INFO] Matched <AdditiveExpression>: 12
[INFO] Matched <Expression>: 12
[INFO] Matched <ScalarVarInitValue>: 12
[INFO] Matched <VarInitValue>: 12
[INFO] Matched <VarDefinition>: x = 12
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int x = 12;
[INFO] Matched <Declaration>: int x = 12;
[INFO] Matched <BlockItem>:
int x = 12;
[INFO] Consumed Token: int
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: y
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <Expression>: 10
[INFO] Matched <ScalarVarInitValue>: 10
[INFO] Matched <VarInitValue>: 10
[INFO] Matched <VarDefinition>: y = 10
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int y = 10;
[INFO] Matched <Declaration>: int y = 10;
[INFO] Matched <BlockItem>:
int y = 10;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Matched <MultiplicativeExpression>: x * y
[INFO] Matched <AdditiveExpression>: x * y
[INFO] Matched <Expression>: x * y
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = x * y;
[INFO] Matched <Statement>: a = x * y;
[INFO] Matched <BlockItem>:
a = x * y;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Matched <MultiplicativeExpression>: x / y
[INFO] Matched <AdditiveExpression>: x / y
[INFO] Matched <Expression>: x / y
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = x / y;
[INFO] Matched <Statement>: a = x / y;
[INFO] Matched <BlockItem>:
a = x / y;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Matched <MultiplicativeExpression>: x % y
[INFO] Matched <AdditiveExpression>: x % y
[INFO] Matched <Expression>: x % y
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = x % y;
[INFO] Matched <Statement>: a = x % y;
[INFO] Matched <BlockItem>:
a = x % y;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Matched <MultiplicativeExpression>: x
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Matched <MultiplicativeExpression>: y
[INFO] Matched <AdditiveExpression>: x + y
[INFO] Matched <Expression>: x + y
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = x + y;
[INFO] Matched <Statement>: a = x + y;
[INFO] Matched <BlockItem>:
a = x + y;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Matched <MultiplicativeExpression>: x
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Matched <MultiplicativeExpression>: y
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1 + 1
[INFO] Matched <Expression>: 1 + 1
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (1 + 1)
[INFO] Matched <PrimaryExpression>: (1 + 1)
[INFO] Matched <UnaryExpression>: (1 + 1)
[INFO] Matched <MultiplicativeExpression>: (1 + 1)
[INFO] Matched <AdditiveExpression>: x + y + (1 + 1)
[INFO] Matched <Expression>: x + y + (1 + 1)
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = x + y + (1 + 1);
[INFO] Matched <Statement>: a = x + y + (1 + 1);
[INFO] Matched <BlockItem>:
a = x + y + (1 + 1);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Matched <MultiplicativeExpression>: x
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Matched <MultiplicativeExpression>: y
[INFO] Matched <AdditiveExpression>: x - y
[INFO] Matched <Expression>: x - y
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = x - y;
[INFO] Matched <Statement>: a = x - y;
[INFO] Matched <BlockItem>:
a = x - y;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: x * y * x / 2
[INFO] Matched <AdditiveExpression>: x * y * x / 2
[INFO] Matched <Expression>: x * y * x / 2
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = x * y * x / 2;
[INFO] Matched <Statement>: a = x * y * x / 2;
[INFO] Matched <BlockItem>:
a = x * y * x / 2;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Matched <MultiplicativeExpression>: x
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Matched <MultiplicativeExpression>: y
[INFO] Matched <AdditiveExpression>: x + y
[INFO] Matched <Expression>: x + y
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (x + y)
[INFO] Matched <PrimaryExpression>: (x + y)
[INFO] Matched <UnaryExpression>: (x + y)
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: (x + y) / x * 2
[INFO] Matched <AdditiveExpression>: (x + y) / x * 2
[INFO] Matched <Expression>: (x + y) / x * 2
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = (x + y) / x * 2;
[INFO] Matched <Statement>: a = (x + y) / x * 2;
[INFO] Matched <BlockItem>:
a = (x + y) / x * 2;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Matched <MultiplicativeExpression>: x
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Matched <MultiplicativeExpression>: y
[INFO] Matched <AdditiveExpression>: x - y
[INFO] Matched <Expression>: x - y
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (x - y)
[INFO] Matched <PrimaryExpression>: (x - y)
[INFO] Matched <UnaryExpression>: (x - y)
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Matched <MultiplicativeExpression>: (x - y) * x
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 7
[INFO] Matched <Number>: 7
[INFO] Matched <PrimaryExpression>: 7
[INFO] Matched <UnaryExpression>: 7
[INFO] Matched <MultiplicativeExpression>: x % 7
[INFO] Matched <AdditiveExpression>: (x - y) * x + x % 7
[INFO] Matched <Expression>: (x - y) * x + x % 7
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = (x - y) * x + x % 7;
[INFO] Matched <Statement>: a = (x - y) * x + x % 7;
[INFO] Matched <BlockItem>:
a = (x - y) * x + x % 7;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = 0;
[INFO] Matched <Statement>: a = 0;
[INFO] Matched <BlockItem>:
a = 0;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: -1
[INFO] Matched <UnaryExpression>: -1
[INFO] Matched <MultiplicativeExpression>: -1
[INFO] Matched <AdditiveExpression>: -1
[INFO] Matched <Expression>: -1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = -1;
[INFO] Matched <Statement>: a = -1;
[INFO] Matched <BlockItem>:
a = -1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: +1
[INFO] Matched <UnaryExpression>: +1
[INFO] Matched <UnaryOperatedExpression>: -+1
[INFO] Matched <UnaryExpression>: -+1
[INFO] Matched <UnaryOperatedExpression>: +-+1
[INFO] Matched <UnaryExpression>: +-+1
[INFO] Matched <MultiplicativeExpression>: +-+1
[INFO] Matched <AdditiveExpression>: +-+1
[INFO] Matched <Expression>: +-+1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = +-+1;
[INFO] Matched <Statement>: a = +-+1;
[INFO] Matched <BlockItem>:
a = +-+1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: -1
[INFO] Matched <UnaryExpression>: -1
[INFO] Matched <UnaryOperatedExpression>: +-1
[INFO] Matched <UnaryExpression>: +-1
[INFO] Matched <UnaryOperatedExpression>: -+-1
[INFO] Matched <UnaryExpression>: -+-1
[INFO] Matched <MultiplicativeExpression>: -+-1
[INFO] Matched <AdditiveExpression>: -+-1
[INFO] Matched <Expression>: -+-1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = -+-1;
[INFO] Matched <Statement>: a = -+-1;
[INFO] Matched <BlockItem>:
a = -+-1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: test1
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: test1
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Matched <FuncArgList>: a, a
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: test1(a, a)
[INFO] Matched <UnaryExpression>: test1(a, a)
[INFO] Matched <MultiplicativeExpression>: test1(a, a)
[INFO] Matched <AdditiveExpression>: test1(a, a)
[INFO] Matched <Expression>: test1(a, a)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: test1(a, a);
[INFO] Matched <Statement>: test1(a, a);
[INFO] Matched <BlockItem>:
test1(a, a);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: test2
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: test2
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: test2()
[INFO] Matched <UnaryExpression>: test2()
[INFO] Matched <MultiplicativeExpression>: test2()
[INFO] Matched <AdditiveExpression>: test2()
[INFO] Matched <Expression>: test2()
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: test2();
[INFO] Matched <Statement>: test2();
[INFO] Matched <BlockItem>:
test2();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: b1[1]
[INFO] Matched <PrimaryExpression>: b1[1]
[INFO] Matched <UnaryExpression>: b1[1]
[INFO] Matched <MultiplicativeExpression>: b1[1]
[INFO] Matched <AdditiveExpression>: b1[1]
[INFO] Matched <Expression>: b1[1]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: b1[1]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: b1[1]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: b1[1] = 1;
[INFO] Matched <Statement>: b1[1] = 1;
[INFO] Matched <BlockItem>:
b1[1] = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: c1[0][0]
[INFO] Matched <PrimaryExpression>: c1[0][0]
[INFO] Matched <UnaryExpression>: c1[0][0]
[INFO] Matched <MultiplicativeExpression>: c1[0][0]
[INFO] Matched <AdditiveExpression>: c1[0][0]
[INFO] Matched <Expression>: c1[0][0]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: c1[0][0]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: c1[0][0]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: c1[0][0] = 0;
[INFO] Matched <Statement>: c1[0][0] = 0;
[INFO] Matched <BlockItem>:
c1[0][0] = 0;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: c1[0][0]
[INFO] Matched <PrimaryExpression>: c1[0][0]
[INFO] Matched <UnaryExpression>: c1[0][0]
[INFO] Matched <MultiplicativeExpression>: c1[0][0]
[INFO] Matched <AdditiveExpression>: c1[0][0]
[INFO] Matched <Expression>: c1[0][0]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = c1[0][0];
[INFO] Matched <Statement>: a = c1[0][0];
[INFO] Matched <BlockItem>:
a = c1[0][0];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: b1[1]
[INFO] Matched <PrimaryExpression>: b1[1]
[INFO] Matched <UnaryExpression>: b1[1]
[INFO] Matched <MultiplicativeExpression>: b1[1]
[INFO] Matched <AdditiveExpression>: b1[1]
[INFO] Matched <Expression>: b1[1]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = b1[1];
[INFO] Matched <Statement>: a = b1[1];
[INFO] Matched <BlockItem>:
a = b1[1];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: a = getint();
[INFO] Matched <Statement>: a = getint();
[INFO] Matched <BlockItem>:
a = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: test5
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: test5
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b1
[INFO] Matched <LeftValue>: b1
[INFO] Matched <PrimaryExpression>: b1
[INFO] Matched <UnaryExpression>: b1
[INFO] Matched <MultiplicativeExpression>: b1
[INFO] Matched <AdditiveExpression>: b1
[INFO] Matched <Expression>: b1
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c1
[INFO] Matched <LeftValue>: c1
[INFO] Matched <PrimaryExpression>: c1
[INFO] Matched <UnaryExpression>: c1
[INFO] Matched <MultiplicativeExpression>: c1
[INFO] Matched <AdditiveExpression>: c1
[INFO] Matched <Expression>: c1
[INFO] Matched <FuncArgList>: a, b1, c1
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: test5(a, b1, c1)
[INFO] Matched <UnaryExpression>: test5(a, b1, c1)
[INFO] Matched <MultiplicativeExpression>: test5(a, b1, c1)
[INFO] Matched <AdditiveExpression>: test5(a, b1, c1)
[INFO] Matched <Expression>: test5(a, b1, c1)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: test5(a, b1, c1);
[INFO] Matched <Statement>: test5(a, b1, c1);
[INFO] Matched <BlockItem>:
test5(a, b1, c1);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: test3
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: test3
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b1
[INFO] Matched <LeftValue>: b1
[INFO] Matched <PrimaryExpression>: b1
[INFO] Matched <UnaryExpression>: b1
[INFO] Matched <MultiplicativeExpression>: b1
[INFO] Matched <AdditiveExpression>: b1
[INFO] Matched <Expression>: b1
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c1
[INFO] Matched <LeftValue>: c1
[INFO] Matched <PrimaryExpression>: c1
[INFO] Matched <UnaryExpression>: c1
[INFO] Matched <MultiplicativeExpression>: c1
[INFO] Matched <AdditiveExpression>: c1
[INFO] Matched <Expression>: c1
[INFO] Matched <FuncArgList>: b1, c1
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: test3(b1, c1)
[INFO] Matched <UnaryExpression>: test3(b1, c1)
[INFO] Matched <MultiplicativeExpression>: test3(b1, c1)
[INFO] Matched <AdditiveExpression>: test3(b1, c1)
[INFO] Matched <Expression>: test3(b1, c1)
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = test3(b1, c1);
[INFO] Matched <Statement>: a = test3(b1, c1);
[INFO] Matched <BlockItem>:
a = test3(b1, c1);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: test3
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: test3
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: c1[0]
[INFO] Matched <PrimaryExpression>: c1[0]
[INFO] Matched <UnaryExpression>: c1[0]
[INFO] Matched <MultiplicativeExpression>: c1[0]
[INFO] Matched <AdditiveExpression>: c1[0]
[INFO] Matched <Expression>: c1[0]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c1
[INFO] Matched <LeftValue>: c1
[INFO] Matched <PrimaryExpression>: c1
[INFO] Matched <UnaryExpression>: c1
[INFO] Matched <MultiplicativeExpression>: c1
[INFO] Matched <AdditiveExpression>: c1
[INFO] Matched <Expression>: c1
[INFO] Matched <FuncArgList>: c1[0], c1
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: test3(c1[0], c1)
[INFO] Matched <UnaryExpression>: test3(c1[0], c1)
[INFO] Matched <MultiplicativeExpression>: test3(c1[0], c1)
[INFO] Matched <AdditiveExpression>: test3(c1[0], c1)
[INFO] Matched <Expression>: test3(c1[0], c1)
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = test3(c1[0], c1);
[INFO] Matched <Statement>: a = test3(c1[0], c1);
[INFO] Matched <BlockItem>:
a = test3(c1[0], c1);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: test4
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: test4
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: b1[1]
[INFO] Matched <PrimaryExpression>: b1[1]
[INFO] Matched <UnaryExpression>: b1[1]
[INFO] Matched <MultiplicativeExpression>: b1[1]
[INFO] Matched <AdditiveExpression>: b1[1]
[INFO] Matched <Expression>: b1[1]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: c1[0][0]
[INFO] Matched <PrimaryExpression>: c1[0][0]
[INFO] Matched <UnaryExpression>: c1[0][0]
[INFO] Matched <MultiplicativeExpression>: c1[0][0]
[INFO] Matched <AdditiveExpression>: c1[0][0]
[INFO] Matched <Expression>: c1[0][0]
[INFO] Matched <FuncArgList>: a, b1[1], c1[0][0]
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: test4(a, b1[1], c1[0][0])
[INFO] Matched <UnaryExpression>: test4(a, b1[1], c1[0][0])
[INFO] Matched <MultiplicativeExpression>: test4(a, b1[1], c1[0][0])
[INFO] Matched <AdditiveExpression>: test4(a, b1[1], c1[0][0])
[INFO] Matched <Expression>: test4(a, b1[1], c1[0][0])
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: test4(a, b1[1], c1[0][0]);
[INFO] Matched <Statement>: test4(a, b1[1], c1[0][0]);
[INFO] Matched <BlockItem>:
test4(a, b1[1], c1[0][0]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: test6
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: test6
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Matched <FuncArgList>: a
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: test6(a)
[INFO] Matched <UnaryExpression>: test6(a)
[INFO] Matched <MultiplicativeExpression>: test6(a)
[INFO] Matched <AdditiveExpression>: test6(a)
[INFO] Matched <Expression>: test6(a)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: test6(a);
[INFO] Matched <Statement>: test6(a);
[INFO] Matched <BlockItem>:
test6(a);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: c1[1][1]
[INFO] Matched <PrimaryExpression>: c1[1][1]
[INFO] Matched <UnaryExpression>: c1[1][1]
[INFO] Matched <MultiplicativeExpression>: c1[1][1]
[INFO] Matched <AdditiveExpression>: c1[1][1]
[INFO] Matched <Expression>: c1[1][1]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: c1[1][1]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: c1[1][1]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: c1[1][1] = 1;
[INFO] Matched <Statement>: c1[1][1] = 1;
[INFO] Matched <BlockItem>:
c1[1][1] = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Matched <MultiplicativeExpression>: x
[INFO] Matched <AdditiveExpression>: x
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Matched <MultiplicativeExpression>: y
[INFO] Matched <AdditiveExpression>: y
[INFO] Matched <RelationalExpression>: x > y
[INFO] Matched <EqualityExpression>: x > y
[INFO] Matched <LogicalAndExpression>: x > y
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Matched <MultiplicativeExpression>: x
[INFO] Matched <AdditiveExpression>: x
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Matched <MultiplicativeExpression>: y
[INFO] Matched <AdditiveExpression>: y
[INFO] Matched <RelationalExpression>: x < y
[INFO] Matched <EqualityExpression>: x < y
[INFO] Matched <LogicalAndExpression>: x < y
[INFO] Matched <LogicalOrExpression>: x > y || x < y
[INFO] Matched <Condition>: x > y || x < y
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = 1;
[INFO] Matched <Statement>: a = 1;
[INFO] Matched <BlockItem>:
a = 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a = 1;
}
[INFO] Matched <Statement>:
{
    a = 1;
}
[INFO] Matched <IfStatement>:
if (x > y || x < y) {
    a = 1;
}  
[INFO] Matched <Statement>:
if (x > y || x < y) {
    a = 1;
}  
[INFO] Matched <BlockItem>:
if (x > y || x < y) {
    a = 1;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Matched <MultiplicativeExpression>: x
[INFO] Matched <AdditiveExpression>: x
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Matched <MultiplicativeExpression>: y
[INFO] Matched <AdditiveExpression>: y
[INFO] Matched <RelationalExpression>: x >= y
[INFO] Matched <EqualityExpression>: x >= y
[INFO] Matched <LogicalAndExpression>: x >= y
[INFO] Matched <LogicalOrExpression>: x >= y
[INFO] Matched <Condition>: x >= y
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = 2;
[INFO] Matched <Statement>: a = 2;
[INFO] Matched <BlockItem>:
a = 2;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a = 2;
}
[INFO] Matched <Statement>:
{
    a = 2;
}
[INFO] Matched <IfStatement>:
if (x >= y) {
    a = 2;
}  
[INFO] Matched <Statement>:
if (x >= y) {
    a = 2;
}  
[INFO] Matched <BlockItem>:
if (x >= y) {
    a = 2;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Matched <MultiplicativeExpression>: x
[INFO] Matched <AdditiveExpression>: x
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Matched <MultiplicativeExpression>: y
[INFO] Matched <AdditiveExpression>: y
[INFO] Matched <RelationalExpression>: x <= y
[INFO] Matched <EqualityExpression>: x <= y
[INFO] Matched <LogicalAndExpression>: x <= y
[INFO] Matched <LogicalOrExpression>: x <= y
[INFO] Matched <Condition>: x <= y
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = 3;
[INFO] Matched <Statement>: a = 3;
[INFO] Matched <BlockItem>:
a = 3;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a = 3;
}
[INFO] Matched <Statement>:
{
    a = 3;
}
[INFO] Matched <IfStatement>:
if (x <= y) {
    a = 3;
}  
[INFO] Matched <Statement>:
if (x <= y) {
    a = 3;
}  
[INFO] Matched <BlockItem>:
if (x <= y) {
    a = 3;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Matched <MultiplicativeExpression>: x
[INFO] Matched <AdditiveExpression>: x
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Matched <MultiplicativeExpression>: y
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: y + 1
[INFO] Matched <RelationalExpression>: x > y + 1
[INFO] Matched <EqualityExpression>: x > y + 1
[INFO] Matched <LogicalAndExpression>: x > y + 1
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Matched <UnaryOperatedExpression>: !x
[INFO] Matched <UnaryExpression>: !x
[INFO] Matched <MultiplicativeExpression>: !x
[INFO] Matched <AdditiveExpression>: !x
[INFO] Matched <RelationalExpression>: !x
[INFO] Matched <EqualityExpression>: !x
[INFO] Matched <LogicalAndExpression>: !x
[INFO] Matched <LogicalOrExpression>: x > y + 1 || !x
[INFO] Matched <Condition>: x > y + 1 || !x
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <Expression>: 4
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = 4;
[INFO] Matched <Statement>: a = 4;
[INFO] Matched <BlockItem>:
a = 4;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a = 4;
}
[INFO] Matched <Statement>:
{
    a = 4;
}
[INFO] Matched <IfStatement>:
if (x > y + 1 || !x) {
    a = 4;
}  
[INFO] Matched <Statement>:
if (x > y + 1 || !x) {
    a = 4;
}  
[INFO] Matched <BlockItem>:
if (x > y + 1 || !x) {
    a = 4;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <RelationalExpression>: a
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: 0
[INFO] Matched <EqualityExpression>: a == 0
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: b1[1]
[INFO] Matched <PrimaryExpression>: b1[1]
[INFO] Matched <UnaryExpression>: b1[1]
[INFO] Matched <MultiplicativeExpression>: b1[1]
[INFO] Matched <AdditiveExpression>: b1[1]
[INFO] Matched <RelationalExpression>: b1[1]
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <RelationalExpression>: 1
[INFO] Matched <EqualityExpression>: b1[1] == 1
[INFO] Matched <LogicalAndExpression>: a == 0 && b1[1] == 1
[INFO] Matched <LogicalOrExpression>: a == 0 && b1[1] == 1
[INFO] Matched <Condition>: a == 0 && b1[1] == 1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <Expression>: 5
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = 5;
[INFO] Matched <Statement>: a = 5;
[INFO] Matched <BlockItem>:
a = 5;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a = 5;
}
[INFO] Matched <Statement>:
{
    a = 5;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: 6
[INFO] Matched <Expression>: 6
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = 6;
[INFO] Matched <Statement>: a = 6;
[INFO] Matched <BlockItem>:
a = 6;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a = 6;
}
[INFO] Matched <Statement>:
{
    a = 6;
}
[INFO] Matched <IfStatement>:
if (a == 0 && b1[1] == 1) {
    a = 5;
} else {
    a = 6;
}
[INFO] Matched <Statement>:
if (a == 0 && b1[1] == 1) {
    a = 5;
} else {
    a = 6;
}
[INFO] Matched <BlockItem>:
if (a == 0 && b1[1] == 1) {
    a = 5;
} else {
    a = 6;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <RelationalExpression>: a
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <RelationalExpression>: 1
[INFO] Matched <EqualityExpression>: a == 1
[INFO] Matched <LogicalAndExpression>: a == 1
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <RelationalExpression>: a
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: 0
[INFO] Matched <EqualityExpression>: a != 0
[INFO] Matched <LogicalAndExpression>: a != 0
[INFO] Matched <LogicalOrExpression>: a == 1 || a != 0
[INFO] Matched <Condition>: a == 1 || a != 0
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 7
[INFO] Matched <Number>: 7
[INFO] Matched <PrimaryExpression>: 7
[INFO] Matched <UnaryExpression>: 7
[INFO] Matched <MultiplicativeExpression>: 7
[INFO] Matched <AdditiveExpression>: 7
[INFO] Matched <Expression>: 7
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = 7;
[INFO] Matched <Statement>: a = 7;
[INFO] Matched <BlockItem>:
a = 7;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a = 7;
}
[INFO] Matched <Statement>:
{
    a = 7;
}
[INFO] Matched <IfStatement>:
if (a == 1 || a != 0) {
    a = 7;
}  
[INFO] Matched <Statement>:
if (a == 1 || a != 0) {
    a = 7;
}  
[INFO] Matched <BlockItem>:
if (a == 1 || a != 0) {
    a = 7;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <UnaryOperatedExpression>: !0
[INFO] Matched <UnaryExpression>: !0
[INFO] Matched <MultiplicativeExpression>: !0
[INFO] Matched <AdditiveExpression>: !0
[INFO] Matched <RelationalExpression>: !0
[INFO] Matched <EqualityExpression>: !0
[INFO] Matched <LogicalAndExpression>: !0
[INFO] Matched <LogicalOrExpression>: !0
[INFO] Matched <Condition>: !0
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <IfStatement>:
if (!0) {}  
[INFO] Matched <Statement>:
if (!0) {}  
[INFO] Matched <BlockItem>:
if (!0) {}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ForStatement>: xm = 0
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: xm
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Matched <PrimaryExpression>: xm
[INFO] Matched <UnaryExpression>: xm
[INFO] Matched <MultiplicativeExpression>: xm
[INFO] Matched <AdditiveExpression>: xm
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <RelationalExpression>: xm < 1
[INFO] Matched <EqualityExpression>: xm < 1
[INFO] Matched <LogicalAndExpression>: xm < 1
[INFO] Matched <LogicalOrExpression>: xm < 1
[INFO] Matched <Condition>: xm < 1
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: xm
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Matched <PrimaryExpression>: xm
[INFO] Matched <UnaryExpression>: xm
[INFO] Matched <MultiplicativeExpression>: xm
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: xm + 1
[INFO] Matched <Expression>: xm + 1
[INFO] Matched <ForStatement>: xm = xm + 1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <UnaryOperatedExpression>: !0
[INFO] Matched <UnaryExpression>: !0
[INFO] Matched <MultiplicativeExpression>: !0
[INFO] Matched <AdditiveExpression>: !0
[INFO] Matched <RelationalExpression>: !0
[INFO] Matched <EqualityExpression>: !0
[INFO] Matched <LogicalAndExpression>: !0
[INFO] Matched <LogicalOrExpression>: !0
[INFO] Matched <Condition>: !0
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <IfStatement>:
if (!0) {}  
[INFO] Matched <Statement>:
if (!0) {}  
[INFO] Matched <BlockItem>:
if (!0) {}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ContinueStatement>.
[INFO] Consumed Token: continue
[INFO] Consumed Token: ;
[INFO] Matched <ContinueStatement>: continue;
[INFO] Matched <Statement>: continue;
[INFO] Matched <BlockItem>:
continue;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (!0) {}  
    continue;
}
[INFO] Matched <Statement>:
{
    if (!0) {}  
    continue;
}
[INFO] Matched <ForStatementSelection>:
for (xm = 0; xm < 1; xm = xm + 1) {
    if (!0) {}  
    continue;
}
[INFO] Matched <Statement>:
for (xm = 0; xm < 1; xm = xm + 1) {
    if (!0) {}  
    continue;
}
[INFO] Matched <BlockItem>:
for (xm = 0; xm < 1; xm = xm + 1) {
    if (!0) {}  
    continue;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ForStatement>: xm = 0
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: xm
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Matched <PrimaryExpression>: xm
[INFO] Matched <UnaryExpression>: xm
[INFO] Matched <MultiplicativeExpression>: xm
[INFO] Matched <AdditiveExpression>: xm
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <RelationalExpression>: xm < 1
[INFO] Matched <EqualityExpression>: xm < 1
[INFO] Matched <LogicalAndExpression>: xm < 1
[INFO] Matched <LogicalOrExpression>: xm < 1
[INFO] Matched <Condition>: xm < 1
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: xm
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Matched <PrimaryExpression>: xm
[INFO] Matched <UnaryExpression>: xm
[INFO] Matched <MultiplicativeExpression>: xm
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: xm + 1
[INFO] Matched <Expression>: xm + 1
[INFO] Matched <ForStatement>: xm = xm + 1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <UnaryOperatedExpression>: !0
[INFO] Matched <UnaryExpression>: !0
[INFO] Matched <MultiplicativeExpression>: !0
[INFO] Matched <AdditiveExpression>: !0
[INFO] Matched <RelationalExpression>: !0
[INFO] Matched <EqualityExpression>: !0
[INFO] Matched <LogicalAndExpression>: !0
[INFO] Matched <LogicalOrExpression>: !0
[INFO] Matched <Condition>: !0
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <IfStatement>:
if (!0) {}  
[INFO] Matched <Statement>:
if (!0) {}  
[INFO] Matched <BlockItem>:
if (!0) {}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ContinueStatement>.
[INFO] Consumed Token: continue
[INFO] Consumed Token: ;
[INFO] Matched <ContinueStatement>: continue;
[INFO] Matched <Statement>: continue;
[INFO] Matched <BlockItem>:
continue;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (!0) {}  
    continue;
}
[INFO] Matched <Statement>:
{
    if (!0) {}  
    continue;
}
[INFO] Matched <BlockItem>:
{
    if (!0) {}  
    continue;
}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    {
        if (!0) {}  
        continue;
    }
}
[INFO] Matched <Statement>:
{
    {
        if (!0) {}  
        continue;
    }
}
[INFO] Matched <ForStatementSelection>:
for (xm = 0; xm < 1; xm = xm + 1) {
    {
        if (!0) {}  
        continue;
    }
}
[INFO] Matched <Statement>:
for (xm = 0; xm < 1; xm = xm + 1) {
    {
        if (!0) {}  
        continue;
    }
}
[INFO] Matched <BlockItem>:
for (xm = 0; xm < 1; xm = xm + 1) {
    {
        if (!0) {}  
        continue;
    }
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: xm
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Matched <PrimaryExpression>: xm
[INFO] Matched <UnaryExpression>: xm
[INFO] Matched <MultiplicativeExpression>: xm
[INFO] Matched <AdditiveExpression>: xm
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <RelationalExpression>: xm < 2
[INFO] Matched <EqualityExpression>: xm < 2
[INFO] Matched <LogicalAndExpression>: xm < 2
[INFO] Matched <LogicalOrExpression>: xm < 2
[INFO] Matched <Condition>: xm < 2
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: xm
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Matched <PrimaryExpression>: xm
[INFO] Matched <UnaryExpression>: xm
[INFO] Matched <MultiplicativeExpression>: xm
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: xm + 1
[INFO] Matched <Expression>: xm + 1
[INFO] Matched <ForStatement>: xm = xm + 1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Matched <MultiplicativeExpression>: x
[INFO] Matched <AdditiveExpression>: x
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Matched <MultiplicativeExpression>: y
[INFO] Matched <AdditiveExpression>: y
[INFO] Matched <RelationalExpression>: x > y
[INFO] Matched <EqualityExpression>: x > y
[INFO] Matched <LogicalAndExpression>: x > y
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Matched <MultiplicativeExpression>: x
[INFO] Matched <AdditiveExpression>: x
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Matched <MultiplicativeExpression>: y
[INFO] Matched <AdditiveExpression>: y
[INFO] Matched <RelationalExpression>: x < y
[INFO] Matched <EqualityExpression>: x < y
[INFO] Matched <LogicalAndExpression>: x < y
[INFO] Matched <LogicalOrExpression>: x > y || x < y
[INFO] Matched <Condition>: x > y || x < y
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: xm
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Matched <PrimaryExpression>: xm
[INFO] Matched <UnaryExpression>: xm
[INFO] Matched <MultiplicativeExpression>: xm
[INFO] Matched <AdditiveExpression>: xm
[INFO] Matched <Expression>: xm
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: xm = 1;
[INFO] Matched <Statement>: xm = 1;
[INFO] Matched <BlockItem>:
xm = 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    xm = 1;
}
[INFO] Matched <Statement>:
{
    xm = 1;
}
[INFO] Matched <IfStatement>:
if (x > y || x < y) {
    xm = 1;
}  
[INFO] Matched <Statement>:
if (x > y || x < y) {
    xm = 1;
}  
[INFO] Matched <BlockItem>:
if (x > y || x < y) {
    xm = 1;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (x > y || x < y) {
        xm = 1;
    }  
    break;
}
[INFO] Matched <Statement>:
{
    if (x > y || x < y) {
        xm = 1;
    }  
    break;
}
[INFO] Matched <ForStatementSelection>:
for (; xm < 2; xm = xm + 1) {
    if (x > y || x < y) {
        xm = 1;
    }  
    break;
}
[INFO] Matched <Statement>:
for (; xm < 2; xm = xm + 1) {
    if (x > y || x < y) {
        xm = 1;
    }  
    break;
}
[INFO] Matched <BlockItem>:
for (; xm < 2; xm = xm + 1) {
    if (x > y || x < y) {
        xm = 1;
    }  
    break;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ForStatement>: xm = 1
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <RelationalExpression>.
[INFO] Failed to match <EqualityExpression>.
[INFO] Failed to match <LogicalAndExpression>.
[INFO] Failed to match <LogicalOrExpression>.
[INFO] Failed to match <Condition>.
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: xm
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Matched <PrimaryExpression>: xm
[INFO] Matched <UnaryExpression>: xm
[INFO] Matched <MultiplicativeExpression>: xm
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: xm + 1
[INFO] Matched <Expression>: xm + 1
[INFO] Matched <ForStatement>: xm = xm + 1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: xmm
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xmm
[INFO] Matched <LeftValue>: xmm
[INFO] Matched <PrimaryExpression>: xmm
[INFO] Matched <UnaryExpression>: xmm
[INFO] Matched <MultiplicativeExpression>: xmm
[INFO] Matched <AdditiveExpression>: xmm
[INFO] Matched <Expression>: xmm
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xmm
[INFO] Matched <LeftValue>: xmm
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xmm
[INFO] Matched <LeftValue>: xmm
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: xmm = 2;
[INFO] Matched <Statement>: xmm = 2;
[INFO] Matched <BlockItem>:
xmm = 2;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    xmm = 2;
    break;
}
[INFO] Matched <Statement>:
{
    xmm = 2;
    break;
}
[INFO] Matched <ForStatementSelection>:
for (xm = 1; ; xm = xm + 1) {
    xmm = 2;
    break;
}
[INFO] Matched <Statement>:
for (xm = 1; ; xm = xm + 1) {
    xmm = 2;
    break;
}
[INFO] Matched <BlockItem>:
for (xm = 1; ; xm = xm + 1) {
    xmm = 2;
    break;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ForStatement>: xm = 1
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: xm
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Matched <PrimaryExpression>: xm
[INFO] Matched <UnaryExpression>: xm
[INFO] Matched <MultiplicativeExpression>: xm
[INFO] Matched <AdditiveExpression>: xm
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <RelationalExpression>: xm < 1
[INFO] Matched <EqualityExpression>: xm < 1
[INFO] Matched <LogicalAndExpression>: xm < 1
[INFO] Matched <LogicalOrExpression>: xm < 1
[INFO] Matched <Condition>: xm < 1
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: xmm
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xmm
[INFO] Matched <LeftValue>: xmm
[INFO] Matched <PrimaryExpression>: xmm
[INFO] Matched <UnaryExpression>: xmm
[INFO] Matched <MultiplicativeExpression>: xmm
[INFO] Matched <AdditiveExpression>: xmm
[INFO] Matched <Expression>: xmm
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xmm
[INFO] Matched <LeftValue>: xmm
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xmm
[INFO] Matched <LeftValue>: xmm
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: xmm = 2;
[INFO] Matched <Statement>: xmm = 2;
[INFO] Matched <BlockItem>:
xmm = 2;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: b1[1]
[INFO] Matched <PrimaryExpression>: b1[1]
[INFO] Matched <UnaryExpression>: b1[1]
[INFO] Matched <MultiplicativeExpression>: b1[1]
[INFO] Matched <AdditiveExpression>: b1[1]
[INFO] Matched <Expression>: b1[1]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: b1[1]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: b1[1]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: b1[1] = 1;
[INFO] Matched <Statement>: b1[1] = 1;
[INFO] Matched <BlockItem>:
b1[1] = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    xmm = 2;
    b1[1] = 1;
    break;
}
[INFO] Matched <Statement>:
{
    xmm = 2;
    b1[1] = 1;
    break;
}
[INFO] Matched <ForStatementSelection>:
for (xm = 1; xm < 1; ) {
    xmm = 2;
    b1[1] = 1;
    break;
}
[INFO] Matched <Statement>:
for (xm = 1; xm < 1; ) {
    xmm = 2;
    b1[1] = 1;
    break;
}
[INFO] Matched <BlockItem>:
for (xm = 1; xm < 1; ) {
    xmm = 2;
    b1[1] = 1;
    break;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <RelationalExpression>.
[INFO] Failed to match <EqualityExpression>.
[INFO] Failed to match <LogicalAndExpression>.
[INFO] Failed to match <LogicalOrExpression>.
[INFO] Failed to match <Condition>.
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: xm
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Matched <PrimaryExpression>: xm
[INFO] Matched <UnaryExpression>: xm
[INFO] Matched <MultiplicativeExpression>: xm
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: xm + 1
[INFO] Matched <Expression>: xm + 1
[INFO] Matched <ForStatement>: xm = xm + 1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    break;
}
[INFO] Matched <Statement>:
{
    break;
}
[INFO] Matched <ForStatementSelection>:
for (; ; xm = xm + 1) {
    break;
}
[INFO] Matched <Statement>:
for (; ; xm = xm + 1) {
    break;
}
[INFO] Matched <BlockItem>:
for (; ; xm = xm + 1) {
    break;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: xm
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Matched <PrimaryExpression>: xm
[INFO] Matched <UnaryExpression>: xm
[INFO] Matched <MultiplicativeExpression>: xm
[INFO] Matched <AdditiveExpression>: xm
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <RelationalExpression>: xm < 2
[INFO] Matched <EqualityExpression>: xm < 2
[INFO] Matched <LogicalAndExpression>: xm < 2
[INFO] Matched <LogicalOrExpression>: xm < 2
[INFO] Matched <Condition>: xm < 2
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    break;
}
[INFO] Matched <Statement>:
{
    break;
}
[INFO] Matched <ForStatementSelection>:
for (; xm < 2; ) {
    break;
}
[INFO] Matched <Statement>:
for (; xm < 2; ) {
    break;
}
[INFO] Matched <BlockItem>:
for (; xm < 2; ) {
    break;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xm
[INFO] Matched <LeftValue>: xm
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ForStatement>: xm = 1
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <RelationalExpression>.
[INFO] Failed to match <EqualityExpression>.
[INFO] Failed to match <LogicalAndExpression>.
[INFO] Failed to match <LogicalOrExpression>.
[INFO] Failed to match <Condition>.
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    break;
}
[INFO] Matched <Statement>:
{
    break;
}
[INFO] Matched <ForStatementSelection>:
for (xm = 1; ; ) {
    break;
}
[INFO] Matched <Statement>:
for (xm = 1; ; ) {
    break;
}
[INFO] Matched <BlockItem>:
for (xm = 1; ; ) {
    break;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <RelationalExpression>.
[INFO] Failed to match <EqualityExpression>.
[INFO] Failed to match <LogicalAndExpression>.
[INFO] Failed to match <LogicalOrExpression>.
[INFO] Failed to match <Condition>.
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    break;
}
[INFO] Matched <Statement>:
{
    break;
}
[INFO] Matched <ForStatementSelection>:
for (; ; ) {
    break;
}
[INFO] Matched <Statement>:
for (; ; ) {
    break;
}
[INFO] Matched <BlockItem>:
for (; ; ) {
    break;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d%d"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d%d", a, a);
[INFO] Matched <Statement>: printf("%d%d", a, a);
[INFO] Matched <BlockItem>:
printf("%d%d", a, a);
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("%d%d", a, a);
}
[INFO] Matched <Statement>:
{
    printf("%d%d", a, a);
}
[INFO] Matched <BlockItem>:
{
    printf("%d%d", a, a);
}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int x = 12;
    int y = 10;
    a = x * y;
    a = x / y;
    a = x % y;
    a = x + y;
    a = x + y + (1 + 1);
    a = x - y;
    a = x * y * x / 2;
    a = (x + y) / x * 2;
    a = (x - y) * x + x % 7;
    a = 0;
    a = -1;
    a = +-+1;
    a = -+-1;
    ;
    {}
    test1(a, a);
    test2();
    b1[1] = 1;
    c1[0][0] = 0;
    a = c1[0][0];
    a = b1[1];
    a = getint();
    test5(a, b1, c1);
    a = test3(b1, c1);
    a = test3(c1[0], c1);
    test4(a, b1[1], c1[0][0]);
    test6(a);
    c1[1][1] = 1;
    if (x > y || x < y) {
        a = 1;
    }  
    if (x >= y) {
        a = 2;
    }  
    if (x <= y) {
        a = 3;
    }  
    if (x > y + 1 || !x) {
        a = 4;
    }  
    if (a == 0 && b1[1] == 1) {
        a = 5;
    } else {
        a = 6;
    }
    if (a == 1 || a != 0) {
        a = 7;
    }  
    if (!0) {}  
    for (xm = 0; xm < 1; xm = xm + 1) {
        if (!0) {}  
        continue;
    }
    for (xm = 0; xm < 1; xm = xm + 1) {
        {
            if (!0) {}  
            continue;
        }
    }
    for (; xm < 2; xm = xm + 1) {
        if (x > y || x < y) {
            xm = 1;
        }  
        break;
    }
    for (xm = 1; ; xm = xm + 1) {
        xmm = 2;
        break;
    }
    for (xm = 1; xm < 1; ) {
        xmm = 2;
        b1[1] = 1;
        break;
    }
    for (; ; xm = xm + 1) {
        break;
    }
    for (; xm < 2; ) {
        break;
    }
    for (xm = 1; ; ) {
        break;
    }
    for (; ; ) {
        break;
    }
    {}
    {
        printf("%d%d", a, a);
    }
}
[INFO] Matched <Statement>:
{
    int x = 12;
    int y = 10;
    a = x * y;
    a = x / y;
    a = x % y;
    a = x + y;
    a = x + y + (1 + 1);
    a = x - y;
    a = x * y * x / 2;
    a = (x + y) / x * 2;
    a = (x - y) * x + x % 7;
    a = 0;
    a = -1;
    a = +-+1;
    a = -+-1;
    ;
    {}
    test1(a, a);
    test2();
    b1[1] = 1;
    c1[0][0] = 0;
    a = c1[0][0];
    a = b1[1];
    a = getint();
    test5(a, b1, c1);
    a = test3(b1, c1);
    a = test3(c1[0], c1);
    test4(a, b1[1], c1[0][0]);
    test6(a);
    c1[1][1] = 1;
    if (x > y || x < y) {
        a = 1;
    }  
    if (x >= y) {
        a = 2;
    }  
    if (x <= y) {
        a = 3;
    }  
    if (x > y + 1 || !x) {
        a = 4;
    }  
    if (a == 0 && b1[1] == 1) {
        a = 5;
    } else {
        a = 6;
    }
    if (a == 1 || a != 0) {
        a = 7;
    }  
    if (!0) {}  
    for (xm = 0; xm < 1; xm = xm + 1) {
        if (!0) {}  
        continue;
    }
    for (xm = 0; xm < 1; xm = xm + 1) {
        {
            if (!0) {}  
            continue;
        }
    }
    for (; xm < 2; xm = xm + 1) {
        if (x > y || x < y) {
            xm = 1;
        }  
        break;
    }
    for (xm = 1; ; xm = xm + 1) {
        xmm = 2;
        break;
    }
    for (xm = 1; xm < 1; ) {
        xmm = 2;
        b1[1] = 1;
        break;
    }
    for (; ; xm = xm + 1) {
        break;
    }
    for (; xm < 2; ) {
        break;
    }
    for (xm = 1; ; ) {
        break;
    }
    for (; ; ) {
        break;
    }
    {}
    {
        printf("%d%d", a, a);
    }
}
[INFO] Matched <BlockItem>:
{
    int x = 12;
    int y = 10;
    a = x * y;
    a = x / y;
    a = x % y;
    a = x + y;
    a = x + y + (1 + 1);
    a = x - y;
    a = x * y * x / 2;
    a = (x + y) / x * 2;
    a = (x - y) * x + x % 7;
    a = 0;
    a = -1;
    a = +-+1;
    a = -+-1;
    ;
    {}
    test1(a, a);
    test2();
    b1[1] = 1;
    c1[0][0] = 0;
    a = c1[0][0];
    a = b1[1];
    a = getint();
    test5(a, b1, c1);
    a = test3(b1, c1);
    a = test3(c1[0], c1);
    test4(a, b1[1], c1[0][0]);
    test6(a);
    c1[1][1] = 1;
    if (x > y || x < y) {
        a = 1;
    }  
    if (x >= y) {
        a = 2;
    }  
    if (x <= y) {
        a = 3;
    }  
    if (x > y + 1 || !x) {
        a = 4;
    }  
    if (a == 0 && b1[1] == 1) {
        a = 5;
    } else {
        a = 6;
    }
    if (a == 1 || a != 0) {
        a = 7;
    }  
    if (!0) {}  
    for (xm = 0; xm < 1; xm = xm + 1) {
        if (!0) {}  
        continue;
    }
    for (xm = 0; xm < 1; xm = xm + 1) {
        {
            if (!0) {}  
            continue;
        }
    }
    for (; xm < 2; xm = xm + 1) {
        if (x > y || x < y) {
            xm = 1;
        }  
        break;
    }
    for (xm = 1; ; xm = xm + 1) {
        xmm = 2;
        break;
    }
    for (xm = 1; xm < 1; ) {
        xmm = 2;
        b1[1] = 1;
        break;
    }
    for (; ; xm = xm + 1) {
        break;
    }
    for (; xm < 2; ) {
        break;
    }
    for (xm = 1; ; ) {
        break;
    }
    for (; ; ) {
        break;
    }
    {}
    {
        printf("%d%d", a, a);
    }
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("21373119");
    int a = 1;
    int xm = 0, xmm = 0;
    int yxm[2] = {1, 0}, yxmm[4][5], yxmmm;
    int b1[2] = {1, 2};
    int c1[2][3] = {{1, 2, 3}, {4, 5, 6}};
    {
        int a = 1;
        printf("%d\n", a);
    }
    {
        int x = 12;
        int y = 10;
        a = x * y;
        a = x / y;
        a = x % y;
        a = x + y;
        a = x + y + (1 + 1);
        a = x - y;
        a = x * y * x / 2;
        a = (x + y) / x * 2;
        a = (x - y) * x + x % 7;
        a = 0;
        a = -1;
        a = +-+1;
        a = -+-1;
        ;
        {}
        test1(a, a);
        test2();
        b1[1] = 1;
        c1[0][0] = 0;
        a = c1[0][0];
        a = b1[1];
        a = getint();
        test5(a, b1, c1);
        a = test3(b1, c1);
        a = test3(c1[0], c1);
        test4(a, b1[1], c1[0][0]);
        test6(a);
        c1[1][1] = 1;
        if (x > y || x < y) {
            a = 1;
        }  
        if (x >= y) {
            a = 2;
        }  
        if (x <= y) {
            a = 3;
        }  
        if (x > y + 1 || !x) {
            a = 4;
        }  
        if (a == 0 && b1[1] == 1) {
            a = 5;
        } else {
            a = 6;
        }
        if (a == 1 || a != 0) {
            a = 7;
        }  
        if (!0) {}  
        for (xm = 0; xm < 1; xm = xm + 1) {
            if (!0) {}  
            continue;
        }
        for (xm = 0; xm < 1; xm = xm + 1) {
            {
                if (!0) {}  
                continue;
            }
        }
        for (; xm < 2; xm = xm + 1) {
            if (x > y || x < y) {
                xm = 1;
            }  
            break;
        }
        for (xm = 1; ; xm = xm + 1) {
            xmm = 2;
            break;
        }
        for (xm = 1; xm < 1; ) {
            xmm = 2;
            b1[1] = 1;
            break;
        }
        for (; ; xm = xm + 1) {
            break;
        }
        for (; xm < 2; ) {
            break;
        }
        for (xm = 1; ; ) {
            break;
        }
        for (; ; ) {
            break;
        }
        {}
        {
            printf("%d%d", a, a);
        }
    }
    return 0;
}
[INFO] Matched <MainFuncDefinition>:
int main() {
    printf("21373119");
    int a = 1;
    int xm = 0, xmm = 0;
    int yxm[2] = {1, 0}, yxmm[4][5], yxmmm;
    int b1[2] = {1, 2};
    int c1[2][3] = {{1, 2, 3}, {4, 5, 6}};
    {
        int a = 1;
        printf("%d\n", a);
    }
    {
        int x = 12;
        int y = 10;
        a = x * y;
        a = x / y;
        a = x % y;
        a = x + y;
        a = x + y + (1 + 1);
        a = x - y;
        a = x * y * x / 2;
        a = (x + y) / x * 2;
        a = (x - y) * x + x % 7;
        a = 0;
        a = -1;
        a = +-+1;
        a = -+-1;
        ;
        {}
        test1(a, a);
        test2();
        b1[1] = 1;
        c1[0][0] = 0;
        a = c1[0][0];
        a = b1[1];
        a = getint();
        test5(a, b1, c1);
        a = test3(b1, c1);
        a = test3(c1[0], c1);
        test4(a, b1[1], c1[0][0]);
        test6(a);
        c1[1][1] = 1;
        if (x > y || x < y) {
            a = 1;
        }  
        if (x >= y) {
            a = 2;
        }  
        if (x <= y) {
            a = 3;
        }  
        if (x > y + 1 || !x) {
            a = 4;
        }  
        if (a == 0 && b1[1] == 1) {
            a = 5;
        } else {
            a = 6;
        }
        if (a == 1 || a != 0) {
            a = 7;
        }  
        if (!0) {}  
        for (xm = 0; xm < 1; xm = xm + 1) {
            if (!0) {}  
            continue;
        }
        for (xm = 0; xm < 1; xm = xm + 1) {
            {
                if (!0) {}  
                continue;
            }
        }
        for (; xm < 2; xm = xm + 1) {
            if (x > y || x < y) {
                xm = 1;
            }  
            break;
        }
        for (xm = 1; ; xm = xm + 1) {
            xmm = 2;
            break;
        }
        for (xm = 1; xm < 1; ) {
            xmm = 2;
            b1[1] = 1;
            break;
        }
        for (; ; xm = xm + 1) {
            break;
        }
        for (; xm < 2; ) {
            break;
        }
        for (xm = 1; ; ) {
            break;
        }
        for (; ; ) {
            break;
        }
        {}
        {
            printf("%d%d", a, a);
        }
    }
    return 0;
}
[INFO] Matched <CompileUnit>:
const int a1 = 1;
const int a2 = 2, a3 = 3;
const int a4 = 2, a5 = 3, a6 = 4;
const int b[2] = {0, 1};
const int c[2][3] = {{0, 0, 1}, {0, 0, 2}};

void test1(int a, int b) {
    return;
}

void test2() {
    return;
}

int test3(int a[], int b[][3]) {
    return 1;
}

int test4(int a, int b, int c) {
    return (a + b) * c;
}

void test5(int a, int b[], int c[][3]) {
    return;
}

void test6(int x) {
    return;
}

int main() {
    printf("21373119");
    int a = 1;
    int xm = 0, xmm = 0;
    int yxm[2] = {1, 0}, yxmm[4][5], yxmmm;
    int b1[2] = {1, 2};
    int c1[2][3] = {{1, 2, 3}, {4, 5, 6}};
    {
        int a = 1;
        printf("%d\n", a);
    }
    {
        int x = 12;
        int y = 10;
        a = x * y;
        a = x / y;
        a = x % y;
        a = x + y;
        a = x + y + (1 + 1);
        a = x - y;
        a = x * y * x / 2;
        a = (x + y) / x * 2;
        a = (x - y) * x + x % 7;
        a = 0;
        a = -1;
        a = +-+1;
        a = -+-1;
        ;
        {}
        test1(a, a);
        test2();
        b1[1] = 1;
        c1[0][0] = 0;
        a = c1[0][0];
        a = b1[1];
        a = getint();
        test5(a, b1, c1);
        a = test3(b1, c1);
        a = test3(c1[0], c1);
        test4(a, b1[1], c1[0][0]);
        test6(a);
        c1[1][1] = 1;
        if (x > y || x < y) {
            a = 1;
        }  
        if (x >= y) {
            a = 2;
        }  
        if (x <= y) {
            a = 3;
        }  
        if (x > y + 1 || !x) {
            a = 4;
        }  
        if (a == 0 && b1[1] == 1) {
            a = 5;
        } else {
            a = 6;
        }
        if (a == 1 || a != 0) {
            a = 7;
        }  
        if (!0) {}  
        for (xm = 0; xm < 1; xm = xm + 1) {
            if (!0) {}  
            continue;
        }
        for (xm = 0; xm < 1; xm = xm + 1) {
            {
                if (!0) {}  
                continue;
            }
        }
        for (; xm < 2; xm = xm + 1) {
            if (x > y || x < y) {
                xm = 1;
            }  
            break;
        }
        for (xm = 1; ; xm = xm + 1) {
            xmm = 2;
            break;
        }
        for (xm = 1; xm < 1; ) {
            xmm = 2;
            b1[1] = 1;
            break;
        }
        for (; ; xm = xm + 1) {
            break;
        }
        for (; xm < 2; ) {
            break;
        }
        for (xm = 1; ; ) {
            break;
        }
        for (; ; ) {
            break;
        }
        {}
        {
            printf("%d%d", a, a);
        }
    }
    return 0;
}
[INFO] Test 4
[INFO] Matching <CompileUnit>
[INFO] Consumed Token: int
[INFO] Consumed Token: next
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: next
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: next
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <ConstExpression>: 4
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 0}
[INFO] Matched <VarInitValue>: {1, 0}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: -1
[INFO] Matched <UnaryExpression>: -1
[INFO] Matched <MultiplicativeExpression>: -1
[INFO] Matched <AdditiveExpression>: -1
[INFO] Matched <Expression>: -1
[INFO] Matched <ScalarVarInitValue>: -1
[INFO] Matched <VarInitValue>: -1
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {0, -1}
[INFO] Matched <VarInitValue>: {0, -1}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: -1
[INFO] Matched <UnaryExpression>: -1
[INFO] Matched <MultiplicativeExpression>: -1
[INFO] Matched <AdditiveExpression>: -1
[INFO] Matched <Expression>: -1
[INFO] Matched <ScalarVarInitValue>: -1
[INFO] Matched <VarInitValue>: -1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {-1, 0}
[INFO] Matched <VarInitValue>: {-1, 0}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {0, 1}
[INFO] Matched <VarInitValue>: {0, 1}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{1, 0}, {0, -1}, {-1, 0}, {0, 1}}
[INFO] Matched <VarInitValue>: {{1, 0}, {0, -1}, {-1, 0}, {0, 1}}
[INFO] Matched <VarDefinition>: next[4][2] = {{1, 0}, {0, -1}, {-1, 0}, {0, 1}}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int next[4][2] = {{1, 0}, {0, -1}, {-1, 0}, {0, 1}};
[INFO] Matched <Declaration>: int next[4][2] = {{1, 0}, {0, -1}, {-1, 0}, {0, 1}};
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: len
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Matched <ScalarConstInitValue>: 3
[INFO] Matched <ConstInitValue>: 3
[INFO] Matched <ConstDefinition>.len = 3
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: next1
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <ConstExpression>: 4
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <ConstExpression>: 0
[INFO] Matched <ScalarConstInitValue>: 0
[INFO] Matched <ConstInitValue>: 0
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {1, 0}
[INFO] Matched <ConstInitValue>: {1, 0}
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <ConstExpression>: 0
[INFO] Matched <ScalarConstInitValue>: 0
[INFO] Matched <ConstInitValue>: 0
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: -1
[INFO] Matched <UnaryExpression>: -1
[INFO] Matched <MultiplicativeExpression>: -1
[INFO] Matched <AdditiveExpression>: -1
[INFO] Matched <ConstExpression>: -1
[INFO] Matched <ScalarConstInitValue>: -1
[INFO] Matched <ConstInitValue>: -1
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {0, -1}
[INFO] Matched <ConstInitValue>: {0, -1}
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: -1
[INFO] Matched <UnaryExpression>: -1
[INFO] Matched <MultiplicativeExpression>: -1
[INFO] Matched <AdditiveExpression>: -1
[INFO] Matched <ConstExpression>: -1
[INFO] Matched <ScalarConstInitValue>: -1
[INFO] Matched <ConstInitValue>: -1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <ConstExpression>: 0
[INFO] Matched <ScalarConstInitValue>: 0
[INFO] Matched <ConstInitValue>: 0
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {-1, 0}
[INFO] Matched <ConstInitValue>: {-1, 0}
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <ConstExpression>: 0
[INFO] Matched <ScalarConstInitValue>: 0
[INFO] Matched <ConstInitValue>: 0
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {0, 1}
[INFO] Matched <ConstInitValue>: {0, 1}
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {{1, 0}, {0, -1}, {-1, 0}, {0, 1}}
[INFO] Matched <ConstInitValue>: {{1, 0}, {0, -1}, {-1, 0}, {0, 1}}
[INFO] Matched <ConstDefinition>.next1[4][2] = {{1, 0}, {0, -1}, {-1, 0}, {0, 1}}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int len = 3, next1[4][2] = {{1, 0}, {0, -1}, {-1, 0}, {0, 1}};
[INFO] Matched <Declaration>: const int len = 3, next1[4][2] = {{1, 0}, {0, -1}, {-1, 0}, {0, 1}};
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: xxx
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {1, 2}
[INFO] Matched <ConstInitValue>: {1, 2}
[INFO] Matched <ConstDefinition>.xxx[2] = {1, 2}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int xxx[2] = {1, 2};
[INFO] Matched <Declaration>: const int xxx[2] = {1, 2};
[INFO] Consumed Token: int
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: ans
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: ans = 0
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: arr
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {3, 1}
[INFO] Matched <VarInitValue>: {3, 1}
[INFO] Matched <VarDefinition>: arr[2] = {3, 1}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int ans = 0, arr[2] = {3, 1};
[INFO] Matched <Declaration>: int ans = 0, arr[2] = {3, 1};
[INFO] Consumed Token: int
[INFO] Consumed Token: getDif3N
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: getDif3N
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: getDif3N
[INFO] Matched <VarDefinition>: getDif3N
[INFO] Failed to match <VarDeclaration>.
[INFO] Lexer rolling back...
[INFO] Failed to match <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: getDif3N
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: getDif3N
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: min
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: max
[INFO] Matched <FuncParamList>: int min, int max
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: i
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Matched <VarDefinition>: i = 1
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: j
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Matched <VarDefinition>: j = 1
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: k
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Matched <VarDefinition>: k = 1
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int i = 1, j = 1, k = 1;
[INFO] Matched <Declaration>: int i = 1, j = 1, k = 1;
[INFO] Matched <BlockItem>:
int i = 1, j = 1, k = 1;
[INFO] Consumed Token: int
[INFO] Consumed Token: cnt
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: cnt
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: cnt
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: cnt
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: cnt = 0
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int cnt = 0;
[INFO] Matched <Declaration>: int cnt = 0;
[INFO] Matched <BlockItem>:
int cnt = 0;
[INFO] Consumed Token: int
[INFO] Consumed Token: arr1
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: arr1
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: arr1
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: arr1
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2}
[INFO] Matched <VarInitValue>: {1, 2}
[INFO] Matched <VarDefinition>: arr1[2] = {1, 2}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int arr1[2] = {1, 2};
[INFO] Matched <Declaration>: int arr1[2] = {1, 2};
[INFO] Matched <BlockItem>:
int arr1[2] = {1, 2};
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <RelationalExpression>: i <= 3
[INFO] Matched <EqualityExpression>: i <= 3
[INFO] Matched <LogicalAndExpression>: i <= 3
[INFO] Matched <LogicalOrExpression>: i <= 3
[INFO] Matched <Condition>: i <= 3
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <Expression>: j
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: j = 1;
[INFO] Matched <Statement>: j = 1;
[INFO] Matched <BlockItem>:
j = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <RelationalExpression>: j <= 3
[INFO] Matched <EqualityExpression>: j <= 3
[INFO] Matched <LogicalAndExpression>: j <= 3
[INFO] Matched <LogicalOrExpression>: j <= 3
[INFO] Matched <Condition>: j <= 3
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Matched <PrimaryExpression>: k
[INFO] Matched <UnaryExpression>: k
[INFO] Matched <MultiplicativeExpression>: k
[INFO] Matched <AdditiveExpression>: k
[INFO] Matched <Expression>: k
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: k = 1;
[INFO] Matched <Statement>: k = 1;
[INFO] Matched <BlockItem>:
k = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Matched <PrimaryExpression>: k
[INFO] Matched <UnaryExpression>: k
[INFO] Matched <MultiplicativeExpression>: k
[INFO] Matched <AdditiveExpression>: k
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <RelationalExpression>: k <= 3
[INFO] Matched <EqualityExpression>: k <= 3
[INFO] Matched <LogicalAndExpression>: k <= 3
[INFO] Matched <LogicalOrExpression>: k <= 3
[INFO] Matched <Condition>: k <= 3
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <RelationalExpression>: i
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <RelationalExpression>: j
[INFO] Matched <EqualityExpression>: i != j
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <RelationalExpression>: i
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Matched <PrimaryExpression>: k
[INFO] Matched <UnaryExpression>: k
[INFO] Matched <MultiplicativeExpression>: k
[INFO] Matched <AdditiveExpression>: k
[INFO] Matched <RelationalExpression>: k
[INFO] Matched <EqualityExpression>: i != k
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <RelationalExpression>: j
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Matched <PrimaryExpression>: k
[INFO] Matched <UnaryExpression>: k
[INFO] Matched <MultiplicativeExpression>: k
[INFO] Matched <AdditiveExpression>: k
[INFO] Matched <RelationalExpression>: k
[INFO] Matched <EqualityExpression>: j != k
[INFO] Matched <LogicalAndExpression>: i != j && i != k && j != k
[INFO] Matched <LogicalOrExpression>: i != j && i != k && j != k
[INFO] Matched <Condition>: i != j && i != k && j != k
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: cnt
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cnt
[INFO] Matched <LeftValue>: cnt
[INFO] Matched <PrimaryExpression>: cnt
[INFO] Matched <UnaryExpression>: cnt
[INFO] Matched <MultiplicativeExpression>: cnt
[INFO] Matched <AdditiveExpression>: cnt
[INFO] Matched <Expression>: cnt
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cnt
[INFO] Matched <LeftValue>: cnt
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cnt
[INFO] Matched <LeftValue>: cnt
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: cnt
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cnt
[INFO] Matched <LeftValue>: cnt
[INFO] Matched <PrimaryExpression>: cnt
[INFO] Matched <UnaryExpression>: cnt
[INFO] Matched <MultiplicativeExpression>: cnt
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: cnt + 1
[INFO] Matched <Expression>: cnt + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: cnt = cnt + 1;
[INFO] Matched <Statement>: cnt = cnt + 1;
[INFO] Matched <BlockItem>:
cnt = cnt + 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    cnt = cnt + 1;
}
[INFO] Matched <Statement>:
{
    cnt = cnt + 1;
}
[INFO] Matched <IfStatement>:
if (i != j && i != k && j != k) {
    cnt = cnt + 1;
}  
[INFO] Matched <Statement>:
if (i != j && i != k && j != k) {
    cnt = cnt + 1;
}  
[INFO] Matched <BlockItem>:
if (i != j && i != k && j != k) {
    cnt = cnt + 1;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Matched <PrimaryExpression>: k
[INFO] Matched <UnaryExpression>: k
[INFO] Matched <MultiplicativeExpression>: k
[INFO] Matched <AdditiveExpression>: k
[INFO] Matched <Expression>: k
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Matched <PrimaryExpression>: k
[INFO] Matched <UnaryExpression>: k
[INFO] Matched <MultiplicativeExpression>: k
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: k + 1
[INFO] Matched <Expression>: k + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: k = k + 1;
[INFO] Matched <Statement>: k = k + 1;
[INFO] Matched <BlockItem>:
k = k + 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (i != j && i != k && j != k) {
        cnt = cnt + 1;
    }  
    k = k + 1;
}
[INFO] Matched <Statement>:
{
    if (i != j && i != k && j != k) {
        cnt = cnt + 1;
    }  
    k = k + 1;
}
[INFO] Matched <ForStatementSelection>:
for (; k <= 3; ) {
    if (i != j && i != k && j != k) {
        cnt = cnt + 1;
    }  
    k = k + 1;
}
[INFO] Matched <Statement>:
for (; k <= 3; ) {
    if (i != j && i != k && j != k) {
        cnt = cnt + 1;
    }  
    k = k + 1;
}
[INFO] Matched <BlockItem>:
for (; k <= 3; ) {
    if (i != j && i != k && j != k) {
        cnt = cnt + 1;
    }  
    k = k + 1;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <Expression>: j
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: j + 1
[INFO] Matched <Expression>: j + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: j = j + 1;
[INFO] Matched <Statement>: j = j + 1;
[INFO] Matched <BlockItem>:
j = j + 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    k = 1;
    for (; k <= 3; ) {
        if (i != j && i != k && j != k) {
            cnt = cnt + 1;
        }  
        k = k + 1;
    }
    j = j + 1;
}
[INFO] Matched <Statement>:
{
    k = 1;
    for (; k <= 3; ) {
        if (i != j && i != k && j != k) {
            cnt = cnt + 1;
        }  
        k = k + 1;
    }
    j = j + 1;
}
[INFO] Matched <ForStatementSelection>:
for (; j <= 3; ) {
    k = 1;
    for (; k <= 3; ) {
        if (i != j && i != k && j != k) {
            cnt = cnt + 1;
        }  
        k = k + 1;
    }
    j = j + 1;
}
[INFO] Matched <Statement>:
for (; j <= 3; ) {
    k = 1;
    for (; k <= 3; ) {
        if (i != j && i != k && j != k) {
            cnt = cnt + 1;
        }  
        k = k + 1;
    }
    j = j + 1;
}
[INFO] Matched <BlockItem>:
for (; j <= 3; ) {
    k = 1;
    for (; k <= 3; ) {
        if (i != j && i != k && j != k) {
            cnt = cnt + 1;
        }  
        k = k + 1;
    }
    j = j + 1;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: i + 1
[INFO] Matched <Expression>: i + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = i + 1;
[INFO] Matched <Statement>: i = i + 1;
[INFO] Matched <BlockItem>:
i = i + 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    j = 1;
    for (; j <= 3; ) {
        k = 1;
        for (; k <= 3; ) {
            if (i != j && i != k && j != k) {
                cnt = cnt + 1;
            }  
            k = k + 1;
        }
        j = j + 1;
    }
    i = i + 1;
}
[INFO] Matched <Statement>:
{
    j = 1;
    for (; j <= 3; ) {
        k = 1;
        for (; k <= 3; ) {
            if (i != j && i != k && j != k) {
                cnt = cnt + 1;
            }  
            k = k + 1;
        }
        j = j + 1;
    }
    i = i + 1;
}
[INFO] Matched <ForStatementSelection>:
for (; i <= 3; ) {
    j = 1;
    for (; j <= 3; ) {
        k = 1;
        for (; k <= 3; ) {
            if (i != j && i != k && j != k) {
                cnt = cnt + 1;
            }  
            k = k + 1;
        }
        j = j + 1;
    }
    i = i + 1;
}
[INFO] Matched <Statement>:
for (; i <= 3; ) {
    j = 1;
    for (; j <= 3; ) {
        k = 1;
        for (; k <= 3; ) {
            if (i != j && i != k && j != k) {
                cnt = cnt + 1;
            }  
            k = k + 1;
        }
        j = j + 1;
    }
    i = i + 1;
}
[INFO] Matched <BlockItem>:
for (; i <= 3; ) {
    j = 1;
    for (; j <= 3; ) {
        k = 1;
        for (; k <= 3; ) {
            if (i != j && i != k && j != k) {
                cnt = cnt + 1;
            }  
            k = k + 1;
        }
        j = j + 1;
    }
    i = i + 1;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: cnt
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cnt
[INFO] Matched <LeftValue>: cnt
[INFO] Matched <PrimaryExpression>: cnt
[INFO] Matched <UnaryExpression>: cnt
[INFO] Matched <MultiplicativeExpression>: cnt
[INFO] Matched <AdditiveExpression>: cnt
[INFO] Matched <Expression>: cnt
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return cnt;
[INFO] Matched <Statement>: return cnt;
[INFO] Matched <BlockItem>:
return cnt;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int i = 1, j = 1, k = 1;
    int cnt = 0;
    int arr1[2] = {1, 2};
    for (; i <= 3; ) {
        j = 1;
        for (; j <= 3; ) {
            k = 1;
            for (; k <= 3; ) {
                if (i != j && i != k && j != k) {
                    cnt = cnt + 1;
                }  
                k = k + 1;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return cnt;
}
[INFO] Matched <FuncDefinition>:
int getDif3N(int min, int max) {
    int i = 1, j = 1, k = 1;
    int cnt = 0;
    int arr1[2] = {1, 2};
    for (; i <= 3; ) {
        j = 1;
        for (; j <= 3; ) {
            k = 1;
            for (; k <= 3; ) {
                if (i != j && i != k && j != k) {
                    cnt = cnt + 1;
                }  
                k = k + 1;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return cnt;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: judgeB
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: judgeB
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: b
[INFO] Matched <FuncParamList>: int a, int b
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <RelationalExpression>: a <= b
[INFO] Matched <EqualityExpression>: a <= b
[INFO] Matched <LogicalAndExpression>: a <= b
[INFO] Matched <LogicalOrExpression>: a <= b
[INFO] Matched <Condition>: a <= b
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <RelationalExpression>: a < b
[INFO] Matched <EqualityExpression>: a < b
[INFO] Matched <LogicalAndExpression>: a < b
[INFO] Matched <LogicalOrExpression>: a < b
[INFO] Matched <Condition>: a < b
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: a - b
[INFO] Matched <Expression>: a - b
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return a - b;
[INFO] Matched <Statement>: return a - b;
[INFO] Matched <BlockItem>:
return a - b;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return a - b;
}
[INFO] Matched <Statement>:
{
    return a - b;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <RelationalExpression>: a
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <RelationalExpression>: b
[INFO] Matched <EqualityExpression>: a == b
[INFO] Matched <LogicalAndExpression>: a == b
[INFO] Matched <LogicalOrExpression>: a == b
[INFO] Matched <Condition>: a == b
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return 0;
}
[INFO] Matched <Statement>:
{
    return 0;
}
[INFO] Matched <IfStatement>:
if (a == b) {
    return 0;
}  
[INFO] Matched <Statement>:
if (a == b) {
    return 0;
}  
[INFO] Matched <IfStatement>:
if (a < b) {
    return a - b;
} else if (a == b) {
    return 0;
}  
[INFO] Matched <Statement>:
if (a < b) {
    return a - b;
} else if (a == b) {
    return 0;
}  
[INFO] Matched <BlockItem>:
if (a < b) {
    return a - b;
} else if (a == b) {
    return 0;
}  
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (a < b) {
        return a - b;
    } else if (a == b) {
        return 0;
    }  
}
[INFO] Matched <Statement>:
{
    if (a < b) {
        return a - b;
    } else if (a == b) {
        return 0;
    }  
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <RelationalExpression>: a >= b
[INFO] Matched <EqualityExpression>: a >= b
[INFO] Matched <LogicalAndExpression>: a >= b
[INFO] Matched <LogicalOrExpression>: a >= b
[INFO] Matched <Condition>: a >= b
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <RelationalExpression>: a > b
[INFO] Matched <EqualityExpression>: a > b
[INFO] Matched <LogicalAndExpression>: a > b
[INFO] Matched <LogicalOrExpression>: a > b
[INFO] Matched <Condition>: a > b
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: a - b
[INFO] Matched <Expression>: a - b
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return a - b;
[INFO] Matched <Statement>: return a - b;
[INFO] Matched <BlockItem>:
return a - b;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return a - b;
}
[INFO] Matched <Statement>:
{
    return a - b;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <RelationalExpression>: a
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <RelationalExpression>: b
[INFO] Matched <EqualityExpression>: a == b
[INFO] Matched <LogicalAndExpression>: a == b
[INFO] Matched <LogicalOrExpression>: a == b
[INFO] Matched <Condition>: a == b
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return 0;
}
[INFO] Matched <Statement>:
{
    return 0;
}
[INFO] Matched <IfStatement>:
if (a == b) {
    return 0;
}  
[INFO] Matched <Statement>:
if (a == b) {
    return 0;
}  
[INFO] Matched <IfStatement>:
if (a > b) {
    return a - b;
} else if (a == b) {
    return 0;
}  
[INFO] Matched <Statement>:
if (a > b) {
    return a - b;
} else if (a == b) {
    return 0;
}  
[INFO] Matched <BlockItem>:
if (a > b) {
    return a - b;
} else if (a == b) {
    return 0;
}  
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (a > b) {
        return a - b;
    } else if (a == b) {
        return 0;
    }  
}
[INFO] Matched <Statement>:
{
    if (a > b) {
        return a - b;
    } else if (a == b) {
        return 0;
    }  
}
[INFO] Matched <IfStatement>:
if (a >= b) {
    if (a > b) {
        return a - b;
    } else if (a == b) {
        return 0;
    }  
}  
[INFO] Matched <Statement>:
if (a >= b) {
    if (a > b) {
        return a - b;
    } else if (a == b) {
        return 0;
    }  
}  
[INFO] Matched <IfStatement>:
if (a <= b) {
    if (a < b) {
        return a - b;
    } else if (a == b) {
        return 0;
    }  
} else if (a >= b) {
    if (a > b) {
        return a - b;
    } else if (a == b) {
        return 0;
    }  
}  
[INFO] Matched <Statement>:
if (a <= b) {
    if (a < b) {
        return a - b;
    } else if (a == b) {
        return 0;
    }  
} else if (a >= b) {
    if (a > b) {
        return a - b;
    } else if (a == b) {
        return 0;
    }  
}  
[INFO] Matched <BlockItem>:
if (a <= b) {
    if (a < b) {
        return a - b;
    } else if (a == b) {
        return 0;
    }  
} else if (a >= b) {
    if (a > b) {
        return a - b;
    } else if (a == b) {
        return 0;
    }  
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (a <= b) {
        if (a < b) {
            return a - b;
        } else if (a == b) {
            return 0;
        }  
    } else if (a >= b) {
        if (a > b) {
            return a - b;
        } else if (a == b) {
            return 0;
        }  
    }  
    return 0;
}
[INFO] Matched <FuncDefinition>:
int judgeB(int a, int b) {
    if (a <= b) {
        if (a < b) {
            return a - b;
        } else if (a == b) {
            return 0;
        }  
    } else if (a >= b) {
        if (a > b) {
            return a - b;
        } else if (a == b) {
            return 0;
        }  
    }  
    return 0;
}
[INFO] Consumed Token: void
[INFO] Consumed Token: printArr
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: printArr
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int a[]
[INFO] Matched <FuncParamList>: int a[]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: i
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: i = 0
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int i = 0;
[INFO] Matched <Declaration>: int i = 0;
[INFO] Matched <BlockItem>:
int i = 0;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <RelationalExpression>: i < 2
[INFO] Matched <EqualityExpression>: i < 2
[INFO] Matched <LogicalAndExpression>: i < 2
[INFO] Matched <LogicalOrExpression>: i < 2
[INFO] Matched <Condition>: i < 2
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a[i]
[INFO] Matched <PrimaryExpression>: a[i]
[INFO] Matched <UnaryExpression>: a[i]
[INFO] Matched <MultiplicativeExpression>: a[i]
[INFO] Matched <AdditiveExpression>: a[i]
[INFO] Matched <Expression>: a[i]
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d", a[i]);
[INFO] Matched <Statement>: printf("%d", a[i]);
[INFO] Matched <BlockItem>:
printf("%d", a[i]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: i + 1
[INFO] Matched <Expression>: i + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = i + 1;
[INFO] Matched <Statement>: i = i + 1;
[INFO] Matched <BlockItem>:
i = i + 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("%d", a[i]);
    i = i + 1;
}
[INFO] Matched <Statement>:
{
    printf("%d", a[i]);
    i = i + 1;
}
[INFO] Matched <ForStatementSelection>:
for (; i < 2; ) {
    printf("%d", a[i]);
    i = i + 1;
}
[INFO] Matched <Statement>:
for (; i < 2; ) {
    printf("%d", a[i]);
    i = i + 1;
}
[INFO] Matched <BlockItem>:
for (; i < 2; ) {
    printf("%d", a[i]);
    i = i + 1;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("\n");
[INFO] Matched <Statement>: printf("\n");
[INFO] Matched <BlockItem>:
printf("\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int i = 0;
    for (; i < 2; ) {
        printf("%d", a[i]);
        i = i + 1;
    }
    printf("\n");
}
[INFO] Matched <FuncDefinition>:
void printArr(int a[]) {
    int i = 0;
    for (; i < 2; ) {
        printf("%d", a[i]);
        i = i + 1;
    }
    printf("\n");
}
[INFO] Consumed Token: void
[INFO] Consumed Token: printArr2
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: printArr2
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int a[][2]
[INFO] Matched <FuncParamList>: int a[][2]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: i
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: i = 0
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int i = 0;
[INFO] Matched <Declaration>: int i = 0;
[INFO] Matched <BlockItem>:
int i = 0;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <RelationalExpression>: i < 4
[INFO] Matched <EqualityExpression>: i < 4
[INFO] Matched <LogicalAndExpression>: i < 4
[INFO] Matched <LogicalOrExpression>: i < 4
[INFO] Matched <Condition>: i < 4
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: printArr
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: printArr
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a[i]
[INFO] Matched <PrimaryExpression>: a[i]
[INFO] Matched <UnaryExpression>: a[i]
[INFO] Matched <MultiplicativeExpression>: a[i]
[INFO] Matched <AdditiveExpression>: a[i]
[INFO] Matched <Expression>: a[i]
[INFO] Matched <FuncArgList>: a[i]
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: printArr(a[i])
[INFO] Matched <UnaryExpression>: printArr(a[i])
[INFO] Matched <MultiplicativeExpression>: printArr(a[i])
[INFO] Matched <AdditiveExpression>: printArr(a[i])
[INFO] Matched <Expression>: printArr(a[i])
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: printArr(a[i]);
[INFO] Matched <Statement>: printArr(a[i]);
[INFO] Matched <BlockItem>:
printArr(a[i]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: i + 1
[INFO] Matched <Expression>: i + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = i + 1;
[INFO] Matched <Statement>: i = i + 1;
[INFO] Matched <BlockItem>:
i = i + 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printArr(a[i]);
    i = i + 1;
}
[INFO] Matched <Statement>:
{
    printArr(a[i]);
    i = i + 1;
}
[INFO] Matched <ForStatementSelection>:
for (; i < 4; ) {
    printArr(a[i]);
    i = i + 1;
}
[INFO] Matched <Statement>:
for (; i < 4; ) {
    printArr(a[i]);
    i = i + 1;
}
[INFO] Matched <BlockItem>:
for (; i < 4; ) {
    printArr(a[i]);
    i = i + 1;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int i = 0;
    for (; i < 4; ) {
        printArr(a[i]);
        i = i + 1;
    }
    return;
}
[INFO] Matched <FuncDefinition>:
void printArr2(int a[][2]) {
    int i = 0;
    for (; i < 4; ) {
        printArr(a[i]);
        i = i + 1;
    }
    return;
}
[INFO] Consumed Token: void
[INFO] Consumed Token: printHello
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: printHello
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Failed to match <BasicType>.
[INFO] Failed to match <FuncParam>.
[INFO] Failed to match <FuncParamList>.
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: name
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: name
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: name
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: name
[INFO] Matched <VarDefinition>: name
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int name;
[INFO] Matched <Declaration>: int name;
[INFO] Matched <BlockItem>:
int name;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: name
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: name
[INFO] Matched <LeftValue>: name
[INFO] Matched <PrimaryExpression>: name
[INFO] Matched <UnaryExpression>: name
[INFO] Matched <MultiplicativeExpression>: name
[INFO] Matched <AdditiveExpression>: name
[INFO] Matched <Expression>: name
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: name
[INFO] Matched <LeftValue>: name
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: name = getint();
[INFO] Matched <Statement>: name = getint();
[INFO] Matched <BlockItem>:
name = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "Hello %d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: name
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: name
[INFO] Matched <LeftValue>: name
[INFO] Matched <PrimaryExpression>: name
[INFO] Matched <UnaryExpression>: name
[INFO] Matched <MultiplicativeExpression>: name
[INFO] Matched <AdditiveExpression>: name
[INFO] Matched <Expression>: name
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("Hello %d\n", name);
[INFO] Matched <Statement>: printf("Hello %d\n", name);
[INFO] Matched <BlockItem>:
printf("Hello %d\n", name);
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int name;
    name = getint();
    printf("Hello %d\n", name);
}
[INFO] Matched <FuncDefinition>:
void printHello() {
    int name;
    name = getint();
    printf("Hello %d\n", name);
}
[INFO] Consumed Token: int
[INFO] Consumed Token: add
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: add
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: n
[INFO] Matched <FuncParamList>: int n
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: ans
[INFO] Matched <VarDefinition>: ans
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int ans;
[INFO] Matched <Declaration>: int ans;
[INFO] Matched <BlockItem>:
int ans;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Matched <PrimaryExpression>: ans
[INFO] Matched <UnaryExpression>: ans
[INFO] Matched <MultiplicativeExpression>: ans
[INFO] Matched <AdditiveExpression>: ans
[INFO] Matched <Expression>: ans
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: n + 3
[INFO] Matched <Expression>: n + 3
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: ans = n + 3;
[INFO] Matched <Statement>: ans = n + 3;
[INFO] Matched <BlockItem>:
ans = n + 3;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Matched <PrimaryExpression>: ans
[INFO] Matched <UnaryExpression>: ans
[INFO] Matched <MultiplicativeExpression>: ans
[INFO] Matched <AdditiveExpression>: ans
[INFO] Matched <Expression>: ans
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return ans;
[INFO] Matched <Statement>: return ans;
[INFO] Matched <BlockItem>:
return ans;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int ans;
    ans = n + 3;
    return ans;
}
[INFO] Matched <FuncDefinition>:
int add(int n) {
    int ans;
    ans = n + 3;
    return ans;
}
[INFO] Consumed Token: void
[INFO] Consumed Token: opp
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: opp
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Failed to match <BasicType>.
[INFO] Failed to match <FuncParam>.
[INFO] Failed to match <FuncParamList>.
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <FuncDefinition>:
void opp() {}
[INFO] Consumed Token: int
[INFO] Lexer rolling back...
[INFO] Matching <MainFuncDefinition>.
[INFO] Consumed Token: int
[INFO] Consumed Token: main
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: ans
[INFO] Matched <VarDefinition>: ans
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int ans;
[INFO] Matched <Declaration>: int ans;
[INFO] Matched <BlockItem>:
int ans;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Matched <PrimaryExpression>: ans
[INFO] Matched <UnaryExpression>: ans
[INFO] Matched <MultiplicativeExpression>: ans
[INFO] Matched <AdditiveExpression>: ans
[INFO] Matched <Expression>: ans
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: ans = 3;
[INFO] Matched <Statement>: ans = 3;
[INFO] Matched <BlockItem>:
ans = 3;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    ans = 3;
}
[INFO] Matched <Statement>:
{
    ans = 3;
}
[INFO] Matched <BlockItem>:
{
    ans = 3;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: i
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: i = 0
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int i = 0;
[INFO] Matched <Declaration>: int i = 0;
[INFO] Matched <BlockItem>:
int i = 0;
[INFO] Consumed Token: int
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: y
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Matched <VarDefinition>: y = 1
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int y = 1;
[INFO] Matched <Declaration>: int y = 1;
[INFO] Matched <BlockItem>:
int y = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Matched <UnaryOperatedExpression>: !y
[INFO] Matched <UnaryExpression>: !y
[INFO] Matched <MultiplicativeExpression>: !y
[INFO] Matched <AdditiveExpression>: !y
[INFO] Matched <RelationalExpression>: !y
[INFO] Matched <EqualityExpression>: !y
[INFO] Matched <LogicalAndExpression>: !y
[INFO] Matched <LogicalOrExpression>: !y
[INFO] Matched <Condition>: !y
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Matched <MultiplicativeExpression>: y
[INFO] Matched <AdditiveExpression>: y
[INFO] Matched <Expression>: y
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: y = 0;
[INFO] Matched <Statement>: y = 0;
[INFO] Matched <BlockItem>:
y = 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    y = 0;
}
[INFO] Matched <Statement>:
{
    y = 0;
}
[INFO] Matched <IfStatement>:
if (!y) {
    y = 0;
}  
[INFO] Matched <Statement>:
if (!y) {
    y = 0;
}  
[INFO] Matched <BlockItem>:
if (!y) {
    y = 0;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Matched <MultiplicativeExpression>: y
[INFO] Matched <AdditiveExpression>: y
[INFO] Matched <Expression>: y
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: +1
[INFO] Matched <UnaryExpression>: +1
[INFO] Matched <MultiplicativeExpression>: +1
[INFO] Matched <AdditiveExpression>: +1
[INFO] Matched <Expression>: +1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: y = +1;
[INFO] Matched <Statement>: y = +1;
[INFO] Matched <BlockItem>:
y = +1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Matched <MultiplicativeExpression>: y
[INFO] Matched <AdditiveExpression>: y
[INFO] Matched <Expression>: y
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: -1
[INFO] Matched <UnaryExpression>: -1
[INFO] Matched <MultiplicativeExpression>: -1
[INFO] Matched <AdditiveExpression>: -1
[INFO] Matched <Expression>: -1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: y = -1;
[INFO] Matched <Statement>: y = -1;
[INFO] Matched <BlockItem>:
y = -1;
[INFO] Consumed Token: int
[INFO] Consumed Token: xx
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: xx
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: xx
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: xx
[INFO] Matched <VarDefinition>: xx
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int xx;
[INFO] Matched <Declaration>: int xx;
[INFO] Matched <BlockItem>:
int xx;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: xx
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xx
[INFO] Matched <LeftValue>: xx
[INFO] Matched <PrimaryExpression>: xx
[INFO] Matched <UnaryExpression>: xx
[INFO] Matched <MultiplicativeExpression>: xx
[INFO] Matched <AdditiveExpression>: xx
[INFO] Matched <Expression>: xx
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xx
[INFO] Matched <LeftValue>: xx
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: xx
[INFO] Matched <LeftValue>: xx
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 16
[INFO] Matched <Number>: 16
[INFO] Matched <PrimaryExpression>: 16
[INFO] Matched <UnaryExpression>: 16
[INFO] Matched <MultiplicativeExpression>: 16
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 16 + 2
[INFO] Matched <Expression>: 16 + 2
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (16 + 2)
[INFO] Matched <PrimaryExpression>: (16 + 2)
[INFO] Matched <UnaryExpression>: (16 + 2)
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: i + 1
[INFO] Matched <Expression>: i + 1
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (i + 1)
[INFO] Matched <PrimaryExpression>: (i + 1)
[INFO] Matched <UnaryExpression>: (i + 1)
[INFO] Matched <MultiplicativeExpression>: (16 + 2) / (i + 1)
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 14
[INFO] Matched <Number>: 14
[INFO] Matched <PrimaryExpression>: 14
[INFO] Matched <UnaryExpression>: 14
[INFO] Matched <MultiplicativeExpression>: 14
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: next
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: next
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: next[0][0]
[INFO] Matched <PrimaryExpression>: next[0][0]
[INFO] Matched <UnaryExpression>: next[0][0]
[INFO] Matched <MultiplicativeExpression>: next[0][0]
[INFO] Matched <AdditiveExpression>: (16 + 2) / (i + 1) - 14 + next[0][0]
[INFO] Matched <Expression>: (16 + 2) / (i + 1) - 14 + next[0][0]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: xx = (16 + 2) / (i + 1) - 14 + next[0][0];
[INFO] Matched <Statement>: xx = (16 + 2) / (i + 1) - 14 + next[0][0];
[INFO] Matched <BlockItem>:
xx = (16 + 2) / (i + 1) - 14 + next[0][0];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <RelationalExpression>: i <= 5
[INFO] Matched <EqualityExpression>: i <= 5
[INFO] Matched <LogicalAndExpression>: i <= 5
[INFO] Matched <LogicalOrExpression>: i <= 5
[INFO] Matched <Condition>: i <= 5
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <RelationalExpression>: i
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <RelationalExpression>: 3
[INFO] Matched <EqualityExpression>: i == 3
[INFO] Matched <LogicalAndExpression>: i == 3
[INFO] Matched <LogicalOrExpression>: i == 3
[INFO] Matched <Condition>: i == 3
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: i + 1
[INFO] Matched <Expression>: i + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = i + 1;
[INFO] Matched <Statement>: i = i + 1;
[INFO] Matched <BlockItem>:
i = i + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ContinueStatement>.
[INFO] Consumed Token: continue
[INFO] Consumed Token: ;
[INFO] Matched <ContinueStatement>: continue;
[INFO] Matched <Statement>: continue;
[INFO] Matched <BlockItem>:
continue;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    i = i + 1;
    continue;
}
[INFO] Matched <Statement>:
{
    i = i + 1;
    continue;
}
[INFO] Matched <IfStatement>:
if (i == 3) {
    i = i + 1;
    continue;
}  
[INFO] Matched <Statement>:
if (i == 3) {
    i = i + 1;
    continue;
}  
[INFO] Matched <BlockItem>:
if (i == 3) {
    i = i + 1;
    continue;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <RelationalExpression>: i
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <RelationalExpression>: 5
[INFO] Matched <EqualityExpression>: i == 5
[INFO] Matched <LogicalAndExpression>: i == 5
[INFO] Matched <LogicalOrExpression>: i == 5
[INFO] Matched <Condition>: i == 5
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    break;
}
[INFO] Matched <Statement>:
{
    break;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: j
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Matched <ScalarVarInitValue>: i
[INFO] Matched <VarInitValue>: i
[INFO] Matched <VarDefinition>: j = i
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int j = i;
[INFO] Matched <Declaration>: int j = i;
[INFO] Matched <BlockItem>:
int j = i;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int j = i;
}
[INFO] Matched <Statement>:
{
    int j = i;
}
[INFO] Matched <IfStatement>:
if (i == 5) {
    break;
} else {
    int j = i;
}
[INFO] Matched <Statement>:
if (i == 5) {
    break;
} else {
    int j = i;
}
[INFO] Matched <BlockItem>:
if (i == 5) {
    break;
} else {
    int j = i;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: i + 1
[INFO] Matched <Expression>: i + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = i + 1;
[INFO] Matched <Statement>: i = i + 1;
[INFO] Matched <BlockItem>:
i = i + 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (i == 3) {
        i = i + 1;
        continue;
    }  
    if (i == 5) {
        break;
    } else {
        int j = i;
    }
    i = i + 1;
}
[INFO] Matched <Statement>:
{
    if (i == 3) {
        i = i + 1;
        continue;
    }  
    if (i == 5) {
        break;
    } else {
        int j = i;
    }
    i = i + 1;
}
[INFO] Matched <ForStatementSelection>:
for (; i <= 5; ) {
    if (i == 3) {
        i = i + 1;
        continue;
    }  
    if (i == 5) {
        break;
    } else {
        int j = i;
    }
    i = i + 1;
}
[INFO] Matched <Statement>:
for (; i <= 5; ) {
    if (i == 3) {
        i = i + 1;
        continue;
    }  
    if (i == 5) {
        break;
    } else {
        int j = i;
    }
    i = i + 1;
}
[INFO] Matched <BlockItem>:
for (; i <= 5; ) {
    if (i == 3) {
        i = i + 1;
        continue;
    }  
    if (i == 5) {
        break;
    } else {
        int j = i;
    }
    i = i + 1;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Matched <PrimaryExpression>: ans
[INFO] Matched <UnaryExpression>: ans
[INFO] Matched <MultiplicativeExpression>: ans
[INFO] Matched <AdditiveExpression>: ans
[INFO] Matched <Expression>: ans
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: ans = getint();
[INFO] Matched <Statement>: ans = getint();
[INFO] Matched <BlockItem>:
ans = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: add
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: add
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Matched <PrimaryExpression>: ans
[INFO] Matched <UnaryExpression>: ans
[INFO] Matched <MultiplicativeExpression>: ans
[INFO] Matched <AdditiveExpression>: ans
[INFO] Matched <Expression>: ans
[INFO] Matched <FuncArgList>: ans
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: add(ans)
[INFO] Matched <UnaryExpression>: add(ans)
[INFO] Matched <MultiplicativeExpression>: add(ans)
[INFO] Matched <AdditiveExpression>: add(ans)
[INFO] Matched <Expression>: add(ans)
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", add(ans));
[INFO] Matched <Statement>: printf("%d\n", add(ans));
[INFO] Matched <BlockItem>:
printf("%d\n", add(ans));
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Matched <PrimaryExpression>: ans
[INFO] Matched <UnaryExpression>: ans
[INFO] Matched <MultiplicativeExpression>: ans
[INFO] Matched <AdditiveExpression>: ans
[INFO] Matched <Expression>: ans
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: getDif3N
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: getDif3N
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 999
[INFO] Matched <Number>: 999
[INFO] Matched <PrimaryExpression>: 999
[INFO] Matched <UnaryExpression>: 999
[INFO] Matched <MultiplicativeExpression>: 999
[INFO] Matched <AdditiveExpression>: 999
[INFO] Matched <Expression>: 999
[INFO] Matched <FuncArgList>: 1, 999
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: getDif3N(1, 999)
[INFO] Matched <UnaryExpression>: getDif3N(1, 999)
[INFO] Matched <MultiplicativeExpression>: getDif3N(1, 999)
[INFO] Matched <AdditiveExpression>: getDif3N(1, 999)
[INFO] Matched <Expression>: getDif3N(1, 999)
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: ans = getDif3N(1, 999);
[INFO] Matched <Statement>: ans = getDif3N(1, 999);
[INFO] Matched <BlockItem>:
ans = getDif3N(1, 999);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Matched <PrimaryExpression>: ans
[INFO] Matched <UnaryExpression>: ans
[INFO] Matched <MultiplicativeExpression>: ans
[INFO] Matched <AdditiveExpression>: ans
[INFO] Matched <Expression>: ans
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", ans);
[INFO] Matched <Statement>: printf("%d\n", ans);
[INFO] Matched <BlockItem>:
printf("%d\n", ans);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Matched <PrimaryExpression>: ans
[INFO] Matched <UnaryExpression>: ans
[INFO] Matched <MultiplicativeExpression>: ans
[INFO] Matched <AdditiveExpression>: ans
[INFO] Matched <Expression>: ans
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: judgeB
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: judgeB
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <FuncArgList>: 2, 3
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: judgeB(2, 3)
[INFO] Matched <UnaryExpression>: judgeB(2, 3)
[INFO] Matched <MultiplicativeExpression>: judgeB(2, 3)
[INFO] Matched <AdditiveExpression>: judgeB(2, 3)
[INFO] Matched <Expression>: judgeB(2, 3)
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: ans = judgeB(2, 3);
[INFO] Matched <Statement>: ans = judgeB(2, 3);
[INFO] Matched <BlockItem>:
ans = judgeB(2, 3);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "judgeB 2,3 = %d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Matched <PrimaryExpression>: ans
[INFO] Matched <UnaryExpression>: ans
[INFO] Matched <MultiplicativeExpression>: ans
[INFO] Matched <AdditiveExpression>: ans
[INFO] Matched <Expression>: ans
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("judgeB 2,3 = %d\n", ans);
[INFO] Matched <Statement>: printf("judgeB 2,3 = %d\n", ans);
[INFO] Matched <BlockItem>:
printf("judgeB 2,3 = %d\n", ans);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: printHello
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: printHello
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: printHello()
[INFO] Matched <UnaryExpression>: printHello()
[INFO] Matched <MultiplicativeExpression>: printHello()
[INFO] Matched <AdditiveExpression>: printHello()
[INFO] Matched <Expression>: printHello()
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: printHello();
[INFO] Matched <Statement>: printHello();
[INFO] Matched <BlockItem>:
printHello();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: printArr2
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: printArr2
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: next
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: next
[INFO] Matched <LeftValue>: next
[INFO] Matched <PrimaryExpression>: next
[INFO] Matched <UnaryExpression>: next
[INFO] Matched <MultiplicativeExpression>: next
[INFO] Matched <AdditiveExpression>: next
[INFO] Matched <Expression>: next
[INFO] Matched <FuncArgList>: next
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: printArr2(next)
[INFO] Matched <UnaryExpression>: printArr2(next)
[INFO] Matched <MultiplicativeExpression>: printArr2(next)
[INFO] Matched <AdditiveExpression>: printArr2(next)
[INFO] Matched <Expression>: printArr2(next)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: printArr2(next);
[INFO] Matched <Statement>: printArr2(next);
[INFO] Matched <BlockItem>:
printArr2(next);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: printArr
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: printArr
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: next
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: next
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: next[0]
[INFO] Matched <PrimaryExpression>: next[0]
[INFO] Matched <UnaryExpression>: next[0]
[INFO] Matched <MultiplicativeExpression>: next[0]
[INFO] Matched <AdditiveExpression>: next[0]
[INFO] Matched <Expression>: next[0]
[INFO] Matched <FuncArgList>: next[0]
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: printArr(next[0])
[INFO] Matched <UnaryExpression>: printArr(next[0])
[INFO] Matched <MultiplicativeExpression>: printArr(next[0])
[INFO] Matched <AdditiveExpression>: printArr(next[0])
[INFO] Matched <Expression>: printArr(next[0])
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: printArr(next[0]);
[INFO] Matched <Statement>: printArr(next[0]);
[INFO] Matched <BlockItem>:
printArr(next[0]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: printArr
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: printArr
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: arr
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arr
[INFO] Matched <LeftValue>: arr
[INFO] Matched <PrimaryExpression>: arr
[INFO] Matched <UnaryExpression>: arr
[INFO] Matched <MultiplicativeExpression>: arr
[INFO] Matched <AdditiveExpression>: arr
[INFO] Matched <Expression>: arr
[INFO] Matched <FuncArgList>: arr
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: printArr(arr)
[INFO] Matched <UnaryExpression>: printArr(arr)
[INFO] Matched <MultiplicativeExpression>: printArr(arr)
[INFO] Matched <AdditiveExpression>: printArr(arr)
[INFO] Matched <Expression>: printArr(arr)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: printArr(arr);
[INFO] Matched <Statement>: printArr(arr);
[INFO] Matched <BlockItem>:
printArr(arr);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int ans;
    ;
    {}
    {
        ans = 3;
    }
    int i = 0;
    int y = 1;
    if (!y) {
        y = 0;
    }  
    y = +1;
    y = -1;
    int xx;
    xx = (16 + 2) / (i + 1) - 14 + next[0][0];
    for (; i <= 5; ) {
        if (i == 3) {
            i = i + 1;
            continue;
        }  
        if (i == 5) {
            break;
        } else {
            int j = i;
        }
        i = i + 1;
    }
    ans = getint();
    printf("%d\n", add(ans));
    ans = getDif3N(1, 999);
    printf("%d\n", ans);
    ans = judgeB(2, 3);
    printf("judgeB 2,3 = %d\n", ans);
    printHello();
    printArr2(next);
    printArr(next[0]);
    printArr(arr);
    return 0;
}
[INFO] Matched <MainFuncDefinition>:
int main() {
    int ans;
    ;
    {}
    {
        ans = 3;
    }
    int i = 0;
    int y = 1;
    if (!y) {
        y = 0;
    }  
    y = +1;
    y = -1;
    int xx;
    xx = (16 + 2) / (i + 1) - 14 + next[0][0];
    for (; i <= 5; ) {
        if (i == 3) {
            i = i + 1;
            continue;
        }  
        if (i == 5) {
            break;
        } else {
            int j = i;
        }
        i = i + 1;
    }
    ans = getint();
    printf("%d\n", add(ans));
    ans = getDif3N(1, 999);
    printf("%d\n", ans);
    ans = judgeB(2, 3);
    printf("judgeB 2,3 = %d\n", ans);
    printHello();
    printArr2(next);
    printArr(next[0]);
    printArr(arr);
    return 0;
}
[INFO] Matched <CompileUnit>:
int next[4][2] = {{1, 0}, {0, -1}, {-1, 0}, {0, 1}};
const int len = 3, next1[4][2] = {{1, 0}, {0, -1}, {-1, 0}, {0, 1}};
const int xxx[2] = {1, 2};
int ans = 0, arr[2] = {3, 1};

int getDif3N(int min, int max) {
    int i = 1, j = 1, k = 1;
    int cnt = 0;
    int arr1[2] = {1, 2};
    for (; i <= 3; ) {
        j = 1;
        for (; j <= 3; ) {
            k = 1;
            for (; k <= 3; ) {
                if (i != j && i != k && j != k) {
                    cnt = cnt + 1;
                }  
                k = k + 1;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return cnt;
}

int judgeB(int a, int b) {
    if (a <= b) {
        if (a < b) {
            return a - b;
        } else if (a == b) {
            return 0;
        }  
    } else if (a >= b) {
        if (a > b) {
            return a - b;
        } else if (a == b) {
            return 0;
        }  
    }  
    return 0;
}

void printArr(int a[]) {
    int i = 0;
    for (; i < 2; ) {
        printf("%d", a[i]);
        i = i + 1;
    }
    printf("\n");
}

void printArr2(int a[][2]) {
    int i = 0;
    for (; i < 4; ) {
        printArr(a[i]);
        i = i + 1;
    }
    return;
}

void printHello() {
    int name;
    name = getint();
    printf("Hello %d\n", name);
}

int add(int n) {
    int ans;
    ans = n + 3;
    return ans;
}

void opp() {}

int main() {
    int ans;
    ;
    {}
    {
        ans = 3;
    }
    int i = 0;
    int y = 1;
    if (!y) {
        y = 0;
    }  
    y = +1;
    y = -1;
    int xx;
    xx = (16 + 2) / (i + 1) - 14 + next[0][0];
    for (; i <= 5; ) {
        if (i == 3) {
            i = i + 1;
            continue;
        }  
        if (i == 5) {
            break;
        } else {
            int j = i;
        }
        i = i + 1;
    }
    ans = getint();
    printf("%d\n", add(ans));
    ans = getDif3N(1, 999);
    printf("%d\n", ans);
    ans = judgeB(2, 3);
    printf("judgeB 2,3 = %d\n", ans);
    printHello();
    printArr2(next);
    printArr(next[0]);
    printArr(arr);
    return 0;
}
[INFO] Test 5
[INFO] Matching <CompileUnit>
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: c_common
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <ConstExpression>: 10
[INFO] Matched <ScalarConstInitValue>: 10
[INFO] Matched <ConstInitValue>: 10
[INFO] Matched <ConstDefinition>.c_common = 10
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: c_array
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Matched <ScalarConstInitValue>: 3
[INFO] Matched <ConstInitValue>: 3
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {1, 2, 3}
[INFO] Matched <ConstInitValue>: {1, 2, 3}
[INFO] Matched <ConstDefinition>.c_array[3] = {1, 2, 3}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int c_common = 10, c_array[3] = {1, 2, 3};
[INFO] Matched <Declaration>: const int c_common = 10, c_array[3] = {1, 2, 3};
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: c_matrix
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Matched <ScalarConstInitValue>: 3
[INFO] Matched <ConstInitValue>: 3
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {1, 2, 3}
[INFO] Matched <ConstInitValue>: {1, 2, 3}
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Matched <ScalarConstInitValue>: 3
[INFO] Matched <ConstInitValue>: 3
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {1, 2, 3}
[INFO] Matched <ConstInitValue>: {1, 2, 3}
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Matched <ScalarConstInitValue>: 3
[INFO] Matched <ConstInitValue>: 3
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {1, 2, 3}
[INFO] Matched <ConstInitValue>: {1, 2, 3}
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}}
[INFO] Matched <ConstInitValue>: {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}}
[INFO] Matched <ConstDefinition>.c_matrix[3][3] = {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int c_matrix[3][3] = {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}};
[INFO] Matched <Declaration>: const int c_matrix[3][3] = {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}};
[INFO] Consumed Token: int
[INFO] Consumed Token: v_common
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: v_common
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: v_common
[INFO] Matched <VarDefinition>: v_common
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: v_array
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Matched <VarDefinition>: v_array[3]
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: v_matrix
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Matched <VarDefinition>: v_matrix[3][3]
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int v_common, v_array[3], v_matrix[3][3];
[INFO] Matched <Declaration>: int v_common, v_array[3], v_matrix[3][3];
[INFO] Consumed Token: int
[INFO] Consumed Token: v_commonInit
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: v_commonInit
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: v_commonInit
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <Expression>: 10
[INFO] Matched <ScalarVarInitValue>: 10
[INFO] Matched <VarInitValue>: 10
[INFO] Matched <VarDefinition>: v_commonInit = 10
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int v_commonInit = 10;
[INFO] Matched <Declaration>: int v_commonInit = 10;
[INFO] Consumed Token: int
[INFO] Consumed Token: v_arrayInit
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: v_arrayInit
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: v_arrayInit
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2, 3}
[INFO] Matched <VarInitValue>: {1, 2, 3}
[INFO] Matched <VarDefinition>: v_arrayInit[3] = {1, 2, 3}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int v_arrayInit[3] = {1, 2, 3};
[INFO] Matched <Declaration>: int v_arrayInit[3] = {1, 2, 3};
[INFO] Consumed Token: int
[INFO] Consumed Token: v_matrixInit
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: v_matrixInit
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: v_matrixInit
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2, 3}
[INFO] Matched <VarInitValue>: {1, 2, 3}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2, 3}
[INFO] Matched <VarInitValue>: {1, 2, 3}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2, 3}
[INFO] Matched <VarInitValue>: {1, 2, 3}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}}
[INFO] Matched <VarInitValue>: {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}}
[INFO] Matched <VarDefinition>: v_matrixInit[3][3] = {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int v_matrixInit[3][3] = {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}};
[INFO] Matched <Declaration>: int v_matrixInit[3][3] = {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}};
[INFO] Consumed Token: void
[INFO] Consumed Token: print
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: print
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: output
[INFO] Matched <FuncParamList>: int output
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "\nf2() flag : %d"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: output
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: output
[INFO] Matched <LeftValue>: output
[INFO] Matched <PrimaryExpression>: output
[INFO] Matched <UnaryExpression>: output
[INFO] Matched <MultiplicativeExpression>: output
[INFO] Matched <AdditiveExpression>: output
[INFO] Matched <Expression>: output
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("\nf2() flag : %d", output);
[INFO] Matched <Statement>: printf("\nf2() flag : %d", output);
[INFO] Matched <BlockItem>:
printf("\nf2() flag : %d", output);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("\nf2() flag : %d", output);
    return;
}
[INFO] Matched <FuncDefinition>:
void print(int output) {
    printf("\nf2() flag : %d", output);
    return;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: f0
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: f0
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Failed to match <BasicType>.
[INFO] Failed to match <FuncParam>.
[INFO] Failed to match <FuncParamList>.
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 1;
[INFO] Matched <Statement>: return 1;
[INFO] Matched <BlockItem>:
return 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return 1;
}
[INFO] Matched <FuncDefinition>:
int f0() {
    return 1;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: f1
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: f1
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int a[]
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: b
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int b[][3]
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: c
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int c[]
[INFO] Matched <FuncParamList>: int a[], int b[][3], int c[]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a[0]
[INFO] Matched <PrimaryExpression>: a[0]
[INFO] Matched <UnaryExpression>: a[0]
[INFO] Matched <MultiplicativeExpression>: a[0]
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: b[0][0]
[INFO] Matched <PrimaryExpression>: b[0][0]
[INFO] Matched <UnaryExpression>: b[0][0]
[INFO] Matched <MultiplicativeExpression>: b[0][0]
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: c[0]
[INFO] Matched <PrimaryExpression>: c[0]
[INFO] Matched <UnaryExpression>: c[0]
[INFO] Matched <MultiplicativeExpression>: c[0]
[INFO] Matched <AdditiveExpression>: a[0] + b[0][0] + c[0]
[INFO] Matched <Expression>: a[0] + b[0][0] + c[0]
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return a[0] + b[0][0] + c[0];
[INFO] Matched <Statement>: return a[0] + b[0][0] + c[0];
[INFO] Matched <BlockItem>:
return a[0] + b[0][0] + c[0];
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return a[0] + b[0][0] + c[0];
}
[INFO] Matched <FuncDefinition>:
int f1(int a[], int b[][3], int c[]) {
    return a[0] + b[0][0] + c[0];
}
[INFO] Consumed Token: int
[INFO] Consumed Token: f2
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: f2
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: b
[INFO] Matched <FuncParamList>: int a, int b
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: c
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: c
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: c
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: c
[INFO] Matched <VarDefinition>: c
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int c;
[INFO] Matched <Declaration>: int c;
[INFO] Matched <BlockItem>:
int c;
[INFO] Consumed Token: int
[INFO] Consumed Token: flag
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: flag
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: flag
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: flag
[INFO] Matched <VarDefinition>: flag
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int flag;
[INFO] Matched <Declaration>: int flag;
[INFO] Matched <BlockItem>:
int flag;
[INFO] Consumed Token: int
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: a1
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2}
[INFO] Matched <VarInitValue>: {1, 2}
[INFO] Matched <VarDefinition>: a1[2] = {1, 2}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int a1[2] = {1, 2};
[INFO] Matched <Declaration>: int a1[2] = {1, 2};
[INFO] Matched <BlockItem>:
int a1[2] = {1, 2};
[INFO] Consumed Token: int
[INFO] Consumed Token: a2
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a2
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a2
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: a2
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2, 3}
[INFO] Matched <VarInitValue>: {1, 2, 3}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2, 3}
[INFO] Matched <VarInitValue>: {1, 2, 3}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2, 3}
[INFO] Matched <VarInitValue>: {1, 2, 3}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}}
[INFO] Matched <VarInitValue>: {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}}
[INFO] Matched <VarDefinition>: a2[3][3] = {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int a2[3][3] = {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}};
[INFO] Matched <Declaration>: int a2[3][3] = {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}};
[INFO] Matched <BlockItem>:
int a2[3][3] = {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}};
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Matched <LeftValue>: c
[INFO] Matched <PrimaryExpression>: c
[INFO] Matched <UnaryExpression>: c
[INFO] Matched <MultiplicativeExpression>: c
[INFO] Matched <AdditiveExpression>: c
[INFO] Matched <Expression>: c
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Matched <LeftValue>: c
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Matched <LeftValue>: c
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: a * b
[INFO] Matched <AdditiveExpression>: a * b
[INFO] Matched <Expression>: a * b
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (a * b)
[INFO] Matched <PrimaryExpression>: (a * b)
[INFO] Matched <UnaryExpression>: (a * b)
[INFO] Matched <UnaryOperatedExpression>: -(a * b)
[INFO] Matched <UnaryExpression>: -(a * b)
[INFO] Matched <MultiplicativeExpression>: -(a * b)
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: a / b
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: a % b
[INFO] Matched <AdditiveExpression>: a % b
[INFO] Matched <Expression>: a % b
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (a % b)
[INFO] Matched <PrimaryExpression>: (a % b)
[INFO] Matched <UnaryExpression>: (a % b)
[INFO] Matched <MultiplicativeExpression>: (a % b)
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f1
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: f1
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <Expression>: a1
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a2
[INFO] Matched <LeftValue>: a2
[INFO] Matched <PrimaryExpression>: a2
[INFO] Matched <UnaryExpression>: a2
[INFO] Matched <MultiplicativeExpression>: a2
[INFO] Matched <AdditiveExpression>: a2
[INFO] Matched <Expression>: a2
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a2
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a2[0]
[INFO] Matched <PrimaryExpression>: a2[0]
[INFO] Matched <UnaryExpression>: a2[0]
[INFO] Matched <MultiplicativeExpression>: a2[0]
[INFO] Matched <AdditiveExpression>: a2[0]
[INFO] Matched <Expression>: a2[0]
[INFO] Matched <FuncArgList>: a1, a2, a2[0]
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: f1(a1, a2, a2[0])
[INFO] Matched <UnaryExpression>: f1(a1, a2, a2[0])
[INFO] Matched <MultiplicativeExpression>: f1(a1, a2, a2[0])
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f0
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: f0
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: f0()
[INFO] Matched <UnaryExpression>: f0()
[INFO] Matched <UnaryOperatedExpression>: +f0()
[INFO] Matched <UnaryExpression>: +f0()
[INFO] Matched <MultiplicativeExpression>: +f0()
[INFO] Matched <AdditiveExpression>: -(a * b) + a / b + (a % b) - 1 + f1(a1, a2, a2[0]) - +f0()
[INFO] Matched <Expression>: -(a * b) + a / b + (a % b) - 1 + f1(a1, a2, a2[0]) - +f0()
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: c = -(a * b) + a / b + (a % b) - 1 + f1(a1, a2, a2[0]) - +f0();
[INFO] Matched <Statement>: c = -(a * b) + a / b + (a % b) - 1 + f1(a1, a2, a2[0]) - +f0();
[INFO] Matched <BlockItem>:
c = -(a * b) + a / b + (a % b) - 1 + f1(a1, a2, a2[0]) - +f0();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <RelationalExpression>: a > 10
[INFO] Matched <EqualityExpression>: a > 10
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <RelationalExpression>: b > 10
[INFO] Matched <EqualityExpression>: b > 10
[INFO] Matched <LogicalAndExpression>: a > 10 && b > 10
[INFO] Matched <LogicalOrExpression>: a > 10 && b > 10
[INFO] Matched <Condition>: a > 10 && b > 10
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: print
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: print
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <FuncArgList>: 1
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: print(1)
[INFO] Matched <UnaryExpression>: print(1)
[INFO] Matched <MultiplicativeExpression>: print(1)
[INFO] Matched <AdditiveExpression>: print(1)
[INFO] Matched <Expression>: print(1)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: print(1);
[INFO] Matched <Statement>: print(1);
[INFO] Matched <BlockItem>:
print(1);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: flag
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Matched <PrimaryExpression>: flag
[INFO] Matched <UnaryExpression>: flag
[INFO] Matched <MultiplicativeExpression>: flag
[INFO] Matched <AdditiveExpression>: flag
[INFO] Matched <Expression>: flag
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: flag = 0;
[INFO] Matched <Statement>: flag = 0;
[INFO] Matched <BlockItem>:
flag = 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    print(1);
    flag = 0;
}
[INFO] Matched <Statement>:
{
    print(1);
    flag = 0;
}
[INFO] Matched <IfStatement>:
if (a > 10 && b > 10) {
    print(1);
    flag = 0;
}  
[INFO] Matched <Statement>:
if (a > 10 && b > 10) {
    print(1);
    flag = 0;
}  
[INFO] Matched <BlockItem>:
if (a > 10 && b > 10) {
    print(1);
    flag = 0;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <RelationalExpression>: a > 10
[INFO] Matched <EqualityExpression>: a > 10
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <RelationalExpression>: b <= 10
[INFO] Matched <EqualityExpression>: b <= 10
[INFO] Matched <LogicalAndExpression>: a > 10 && b <= 10
[INFO] Matched <LogicalOrExpression>: a > 10 && b <= 10
[INFO] Matched <Condition>: a > 10 && b <= 10
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: print
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: print
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <FuncArgList>: 2
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: print(2)
[INFO] Matched <UnaryExpression>: print(2)
[INFO] Matched <MultiplicativeExpression>: print(2)
[INFO] Matched <AdditiveExpression>: print(2)
[INFO] Matched <Expression>: print(2)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: print(2);
[INFO] Matched <Statement>: print(2);
[INFO] Matched <BlockItem>:
print(2);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: flag
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Matched <PrimaryExpression>: flag
[INFO] Matched <UnaryExpression>: flag
[INFO] Matched <MultiplicativeExpression>: flag
[INFO] Matched <AdditiveExpression>: flag
[INFO] Matched <Expression>: flag
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: flag = 0;
[INFO] Matched <Statement>: flag = 0;
[INFO] Matched <BlockItem>:
flag = 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    print(2);
    flag = 0;
}
[INFO] Matched <Statement>:
{
    print(2);
    flag = 0;
}
[INFO] Matched <IfStatement>:
if (a > 10 && b <= 10) {
    print(2);
    flag = 0;
}  
[INFO] Matched <Statement>:
if (a > 10 && b <= 10) {
    print(2);
    flag = 0;
}  
[INFO] Matched <BlockItem>:
if (a > 10 && b <= 10) {
    print(2);
    flag = 0;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <RelationalExpression>: a <= 10
[INFO] Matched <EqualityExpression>: a <= 10
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <RelationalExpression>: b <= 10
[INFO] Matched <EqualityExpression>: b <= 10
[INFO] Matched <LogicalAndExpression>: a <= 10 && b <= 10
[INFO] Matched <LogicalOrExpression>: a <= 10 && b <= 10
[INFO] Matched <Condition>: a <= 10 && b <= 10
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: print
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: print
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <FuncArgList>: 3
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: print(3)
[INFO] Matched <UnaryExpression>: print(3)
[INFO] Matched <MultiplicativeExpression>: print(3)
[INFO] Matched <AdditiveExpression>: print(3)
[INFO] Matched <Expression>: print(3)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: print(3);
[INFO] Matched <Statement>: print(3);
[INFO] Matched <BlockItem>:
print(3);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: flag
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Matched <PrimaryExpression>: flag
[INFO] Matched <UnaryExpression>: flag
[INFO] Matched <MultiplicativeExpression>: flag
[INFO] Matched <AdditiveExpression>: flag
[INFO] Matched <Expression>: flag
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: flag = 1;
[INFO] Matched <Statement>: flag = 1;
[INFO] Matched <BlockItem>:
flag = 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    print(3);
    flag = 1;
}
[INFO] Matched <Statement>:
{
    print(3);
    flag = 1;
}
[INFO] Matched <IfStatement>:
if (a <= 10 && b <= 10) {
    print(3);
    flag = 1;
}  
[INFO] Matched <Statement>:
if (a <= 10 && b <= 10) {
    print(3);
    flag = 1;
}  
[INFO] Matched <BlockItem>:
if (a <= 10 && b <= 10) {
    print(3);
    flag = 1;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <RelationalExpression>: a <= 10
[INFO] Matched <EqualityExpression>: a <= 10
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <RelationalExpression>: b > 10
[INFO] Matched <EqualityExpression>: b > 10
[INFO] Matched <LogicalAndExpression>: a <= 10 && b > 10
[INFO] Matched <LogicalOrExpression>: a <= 10 && b > 10
[INFO] Matched <Condition>: a <= 10 && b > 10
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: print
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: print
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <Expression>: 4
[INFO] Matched <FuncArgList>: 4
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: print(4)
[INFO] Matched <UnaryExpression>: print(4)
[INFO] Matched <MultiplicativeExpression>: print(4)
[INFO] Matched <AdditiveExpression>: print(4)
[INFO] Matched <Expression>: print(4)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: print(4);
[INFO] Matched <Statement>: print(4);
[INFO] Matched <BlockItem>:
print(4);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: flag
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Matched <PrimaryExpression>: flag
[INFO] Matched <UnaryExpression>: flag
[INFO] Matched <MultiplicativeExpression>: flag
[INFO] Matched <AdditiveExpression>: flag
[INFO] Matched <Expression>: flag
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: flag = 1;
[INFO] Matched <Statement>: flag = 1;
[INFO] Matched <BlockItem>:
flag = 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    print(4);
    flag = 1;
}
[INFO] Matched <Statement>:
{
    print(4);
    flag = 1;
}
[INFO] Matched <IfStatement>:
if (a <= 10 && b > 10) {
    print(4);
    flag = 1;
}  
[INFO] Matched <Statement>:
if (a <= 10 && b > 10) {
    print(4);
    flag = 1;
}  
[INFO] Matched <BlockItem>:
if (a <= 10 && b > 10) {
    print(4);
    flag = 1;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: flag
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Matched <PrimaryExpression>: flag
[INFO] Matched <UnaryExpression>: flag
[INFO] Matched <MultiplicativeExpression>: flag
[INFO] Matched <AdditiveExpression>: flag
[INFO] Matched <Expression>: flag
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return flag;
[INFO] Matched <Statement>: return flag;
[INFO] Matched <BlockItem>:
return flag;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int c;
    int flag;
    int a1[2] = {1, 2};
    int a2[3][3] = {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}};
    c = -(a * b) + a / b + (a % b) - 1 + f1(a1, a2, a2[0]) - +f0();
    if (a > 10 && b > 10) {
        print(1);
        flag = 0;
    }  
    if (a > 10 && b <= 10) {
        print(2);
        flag = 0;
    }  
    if (a <= 10 && b <= 10) {
        print(3);
        flag = 1;
    }  
    if (a <= 10 && b > 10) {
        print(4);
        flag = 1;
    }  
    return flag;
}
[INFO] Matched <FuncDefinition>:
int f2(int a, int b) {
    int c;
    int flag;
    int a1[2] = {1, 2};
    int a2[3][3] = {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}};
    c = -(a * b) + a / b + (a % b) - 1 + f1(a1, a2, a2[0]) - +f0();
    if (a > 10 && b > 10) {
        print(1);
        flag = 0;
    }  
    if (a > 10 && b <= 10) {
        print(2);
        flag = 0;
    }  
    if (a <= 10 && b <= 10) {
        print(3);
        flag = 1;
    }  
    if (a <= 10 && b > 10) {
        print(4);
        flag = 1;
    }  
    return flag;
}
[INFO] Consumed Token: int
[INFO] Lexer rolling back...
[INFO] Matching <MainFuncDefinition>.
[INFO] Consumed Token: int
[INFO] Consumed Token: main
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: a
[INFO] Matched <VarDefinition>: a
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: b
[INFO] Matched <VarDefinition>: b
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: flag1
[INFO] Matched <VarDefinition>: flag1
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: flag2
[INFO] Matched <VarDefinition>: flag2
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: flag
[INFO] Matched <VarDefinition>: flag
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: i
[INFO] Matched <VarDefinition>: i
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int a, b, flag1, flag2, flag, i;
[INFO] Matched <Declaration>: int a, b, flag1, flag2, flag, i;
[INFO] Matched <BlockItem>:
int a, b, flag1, flag2, flag, i;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: a = getint();
[INFO] Matched <Statement>: a = getint();
[INFO] Matched <BlockItem>:
a = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <Expression>: b
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: b = getint();
[INFO] Matched <Statement>: b = getint();
[INFO] Matched <BlockItem>:
b = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = 0;
[INFO] Matched <Statement>: i = 0;
[INFO] Matched <BlockItem>:
i = 0;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <RelationalExpression>: a
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <RelationalExpression>: b
[INFO] Matched <EqualityExpression>: a != b
[INFO] Matched <LogicalAndExpression>: a != b
[INFO] Matched <LogicalOrExpression>: a != b
[INFO] Matched <Condition>: a != b
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <RelationalExpression>: i < 3
[INFO] Matched <EqualityExpression>: i < 3
[INFO] Matched <LogicalAndExpression>: i < 3
[INFO] Matched <LogicalOrExpression>: i < 3
[INFO] Matched <Condition>: i < 3
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: c1
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: c1
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: c1
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: c1
[INFO] Matched <VarDefinition>: c1
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int c1;
[INFO] Matched <Declaration>: int c1;
[INFO] Matched <BlockItem>:
int c1;
[INFO] Consumed Token: int
[INFO] Consumed Token: c2
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: c2
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: c2
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: c2
[INFO] Matched <VarDefinition>: c2
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int c2;
[INFO] Matched <Declaration>: int c2;
[INFO] Matched <BlockItem>:
int c2;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c1
[INFO] Matched <LeftValue>: c1
[INFO] Matched <PrimaryExpression>: c1
[INFO] Matched <UnaryExpression>: c1
[INFO] Matched <MultiplicativeExpression>: c1
[INFO] Matched <AdditiveExpression>: c1
[INFO] Matched <Expression>: c1
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c1
[INFO] Matched <LeftValue>: c1
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c1
[INFO] Matched <LeftValue>: c1
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: a + b
[INFO] Matched <Expression>: a + b
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: c1 = a + b;
[INFO] Matched <Statement>: c1 = a + b;
[INFO] Matched <BlockItem>:
c1 = a + b;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c2
[INFO] Matched <LeftValue>: c2
[INFO] Matched <PrimaryExpression>: c2
[INFO] Matched <UnaryExpression>: c2
[INFO] Matched <MultiplicativeExpression>: c2
[INFO] Matched <AdditiveExpression>: c2
[INFO] Matched <Expression>: c2
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c2
[INFO] Matched <LeftValue>: c2
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c2
[INFO] Matched <LeftValue>: c2
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: a - b
[INFO] Matched <Expression>: a - b
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: c2 = a - b;
[INFO] Matched <Statement>: c2 = a - b;
[INFO] Matched <BlockItem>:
c2 = a - b;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: flag1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag1
[INFO] Matched <LeftValue>: flag1
[INFO] Matched <PrimaryExpression>: flag1
[INFO] Matched <UnaryExpression>: flag1
[INFO] Matched <MultiplicativeExpression>: flag1
[INFO] Matched <AdditiveExpression>: flag1
[INFO] Matched <Expression>: flag1
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag1
[INFO] Matched <LeftValue>: flag1
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag1
[INFO] Matched <LeftValue>: flag1
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f2
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: f2
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c1
[INFO] Matched <LeftValue>: c1
[INFO] Matched <PrimaryExpression>: c1
[INFO] Matched <UnaryExpression>: c1
[INFO] Matched <MultiplicativeExpression>: c1
[INFO] Matched <AdditiveExpression>: c1
[INFO] Matched <Expression>: c1
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c2
[INFO] Matched <LeftValue>: c2
[INFO] Matched <PrimaryExpression>: c2
[INFO] Matched <UnaryExpression>: c2
[INFO] Matched <MultiplicativeExpression>: c2
[INFO] Matched <AdditiveExpression>: c2
[INFO] Matched <Expression>: c2
[INFO] Matched <FuncArgList>: c1, c2
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: f2(c1, c2)
[INFO] Matched <UnaryExpression>: f2(c1, c2)
[INFO] Matched <MultiplicativeExpression>: f2(c1, c2)
[INFO] Matched <AdditiveExpression>: f2(c1, c2)
[INFO] Matched <Expression>: f2(c1, c2)
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: flag1 = f2(c1, c2);
[INFO] Matched <Statement>: flag1 = f2(c1, c2);
[INFO] Matched <BlockItem>:
flag1 = f2(c1, c2);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: flag2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag2
[INFO] Matched <LeftValue>: flag2
[INFO] Matched <PrimaryExpression>: flag2
[INFO] Matched <UnaryExpression>: flag2
[INFO] Matched <MultiplicativeExpression>: flag2
[INFO] Matched <AdditiveExpression>: flag2
[INFO] Matched <Expression>: flag2
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag2
[INFO] Matched <LeftValue>: flag2
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag2
[INFO] Matched <LeftValue>: flag2
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f2
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: f2
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c2
[INFO] Matched <LeftValue>: c2
[INFO] Matched <PrimaryExpression>: c2
[INFO] Matched <UnaryExpression>: c2
[INFO] Matched <MultiplicativeExpression>: c2
[INFO] Matched <AdditiveExpression>: c2
[INFO] Matched <Expression>: c2
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c1
[INFO] Matched <LeftValue>: c1
[INFO] Matched <PrimaryExpression>: c1
[INFO] Matched <UnaryExpression>: c1
[INFO] Matched <MultiplicativeExpression>: c1
[INFO] Matched <AdditiveExpression>: c1
[INFO] Matched <Expression>: c1
[INFO] Matched <FuncArgList>: c2, c1
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: f2(c2, c1)
[INFO] Matched <UnaryExpression>: f2(c2, c1)
[INFO] Matched <MultiplicativeExpression>: f2(c2, c1)
[INFO] Matched <AdditiveExpression>: f2(c2, c1)
[INFO] Matched <Expression>: f2(c2, c1)
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: flag2 = f2(c2, c1);
[INFO] Matched <Statement>: flag2 = f2(c2, c1);
[INFO] Matched <BlockItem>:
flag2 = f2(c2, c1);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: flag1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag1
[INFO] Matched <LeftValue>: flag1
[INFO] Matched <PrimaryExpression>: flag1
[INFO] Matched <UnaryExpression>: flag1
[INFO] Matched <MultiplicativeExpression>: flag1
[INFO] Matched <AdditiveExpression>: flag1
[INFO] Matched <RelationalExpression>: flag1
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: 0
[INFO] Matched <EqualityExpression>: flag1 == 0
[INFO] Matched <LogicalAndExpression>: flag1 == 0
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: flag2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag2
[INFO] Matched <LeftValue>: flag2
[INFO] Matched <PrimaryExpression>: flag2
[INFO] Matched <UnaryExpression>: flag2
[INFO] Matched <UnaryOperatedExpression>: !flag2
[INFO] Matched <UnaryExpression>: !flag2
[INFO] Matched <MultiplicativeExpression>: !flag2
[INFO] Matched <AdditiveExpression>: !flag2
[INFO] Matched <RelationalExpression>: !flag2
[INFO] Matched <EqualityExpression>: !flag2
[INFO] Matched <LogicalAndExpression>: !flag2
[INFO] Matched <LogicalOrExpression>: flag1 == 0 || !flag2
[INFO] Matched <Condition>: flag1 == 0 || !flag2
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: flag
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Matched <PrimaryExpression>: flag
[INFO] Matched <UnaryExpression>: flag
[INFO] Matched <MultiplicativeExpression>: flag
[INFO] Matched <AdditiveExpression>: flag
[INFO] Matched <Expression>: flag
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: flag = 0;
[INFO] Matched <Statement>: flag = 0;
[INFO] Matched <BlockItem>:
flag = 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    flag = 0;
}
[INFO] Matched <Statement>:
{
    flag = 0;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: flag
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Matched <PrimaryExpression>: flag
[INFO] Matched <UnaryExpression>: flag
[INFO] Matched <MultiplicativeExpression>: flag
[INFO] Matched <AdditiveExpression>: flag
[INFO] Matched <Expression>: flag
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: flag = 1;
[INFO] Matched <Statement>: flag = 1;
[INFO] Matched <BlockItem>:
flag = 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    flag = 1;
}
[INFO] Matched <Statement>:
{
    flag = 1;
}
[INFO] Matched <IfStatement>:
if (flag1 == 0 || !flag2) {
    flag = 0;
} else {
    flag = 1;
}
[INFO] Matched <Statement>:
if (flag1 == 0 || !flag2) {
    flag = 0;
} else {
    flag = 1;
}
[INFO] Matched <BlockItem>:
if (flag1 == 0 || !flag2) {
    flag = 0;
} else {
    flag = 1;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "\nflag = %d : c1 = %d, c2 = %d"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: flag
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Matched <PrimaryExpression>: flag
[INFO] Matched <UnaryExpression>: flag
[INFO] Matched <MultiplicativeExpression>: flag
[INFO] Matched <AdditiveExpression>: flag
[INFO] Matched <Expression>: flag
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c1
[INFO] Matched <LeftValue>: c1
[INFO] Matched <PrimaryExpression>: c1
[INFO] Matched <UnaryExpression>: c1
[INFO] Matched <MultiplicativeExpression>: c1
[INFO] Matched <AdditiveExpression>: c1
[INFO] Matched <Expression>: c1
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c2
[INFO] Matched <LeftValue>: c2
[INFO] Matched <PrimaryExpression>: c2
[INFO] Matched <UnaryExpression>: c2
[INFO] Matched <MultiplicativeExpression>: c2
[INFO] Matched <AdditiveExpression>: c2
[INFO] Matched <Expression>: c2
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("\nflag = %d : c1 = %d, c2 = %d", flag, c1, c2);
[INFO] Matched <Statement>: printf("\nflag = %d : c1 = %d, c2 = %d", flag, c1, c2);
[INFO] Matched <BlockItem>:
printf("\nflag = %d : c1 = %d, c2 = %d", flag, c1, c2);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: i + 1
[INFO] Matched <Expression>: i + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = i + 1;
[INFO] Matched <Statement>: i = i + 1;
[INFO] Matched <BlockItem>:
i = i + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: a + 5
[INFO] Matched <Expression>: a + 5
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = a + 5;
[INFO] Matched <Statement>: a = a + 5;
[INFO] Matched <BlockItem>:
a = a + 5;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <Expression>: b
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: b + 5
[INFO] Matched <Expression>: b + 5
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: b = b + 5;
[INFO] Matched <Statement>: b = b + 5;
[INFO] Matched <BlockItem>:
b = b + 5;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <RelationalExpression>: i >= 10
[INFO] Matched <EqualityExpression>: i >= 10
[INFO] Matched <LogicalAndExpression>: i >= 10
[INFO] Matched <LogicalOrExpression>: i >= 10
[INFO] Matched <Condition>: i >= 10
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ContinueStatement>.
[INFO] Consumed Token: continue
[INFO] Consumed Token: ;
[INFO] Matched <ContinueStatement>: continue;
[INFO] Matched <Statement>: continue;
[INFO] Matched <BlockItem>:
continue;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    continue;
}
[INFO] Matched <Statement>:
{
    continue;
}
[INFO] Matched <IfStatement>:
if (i >= 10) {
    continue;
}  
[INFO] Matched <Statement>:
if (i >= 10) {
    continue;
}  
[INFO] Matched <BlockItem>:
if (i >= 10) {
    continue;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: i < 0
[INFO] Matched <EqualityExpression>: i < 0
[INFO] Matched <LogicalAndExpression>: i < 0
[INFO] Matched <LogicalOrExpression>: i < 0
[INFO] Matched <Condition>: i < 0
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    break;
}
[INFO] Matched <Statement>:
{
    break;
}
[INFO] Matched <IfStatement>:
if (i < 0) {
    break;
}  
[INFO] Matched <Statement>:
if (i < 0) {
    break;
}  
[INFO] Matched <BlockItem>:
if (i < 0) {
    break;
}  
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int c1;
    int c2;
    c1 = a + b;
    c2 = a - b;
    flag1 = f2(c1, c2);
    flag2 = f2(c2, c1);
    if (flag1 == 0 || !flag2) {
        flag = 0;
    } else {
        flag = 1;
    }
    printf("\nflag = %d : c1 = %d, c2 = %d", flag, c1, c2);
    i = i + 1;
    a = a + 5;
    b = b + 5;
    if (i >= 10) {
        continue;
    }  
    if (i < 0) {
        break;
    }  
}
[INFO] Matched <Statement>:
{
    int c1;
    int c2;
    c1 = a + b;
    c2 = a - b;
    flag1 = f2(c1, c2);
    flag2 = f2(c2, c1);
    if (flag1 == 0 || !flag2) {
        flag = 0;
    } else {
        flag = 1;
    }
    printf("\nflag = %d : c1 = %d, c2 = %d", flag, c1, c2);
    i = i + 1;
    a = a + 5;
    b = b + 5;
    if (i >= 10) {
        continue;
    }  
    if (i < 0) {
        break;
    }  
}
[INFO] Matched <ForStatementSelection>:
for (; i < 3; ) {
    int c1;
    int c2;
    c1 = a + b;
    c2 = a - b;
    flag1 = f2(c1, c2);
    flag2 = f2(c2, c1);
    if (flag1 == 0 || !flag2) {
        flag = 0;
    } else {
        flag = 1;
    }
    printf("\nflag = %d : c1 = %d, c2 = %d", flag, c1, c2);
    i = i + 1;
    a = a + 5;
    b = b + 5;
    if (i >= 10) {
        continue;
    }  
    if (i < 0) {
        break;
    }  
}
[INFO] Matched <Statement>:
for (; i < 3; ) {
    int c1;
    int c2;
    c1 = a + b;
    c2 = a - b;
    flag1 = f2(c1, c2);
    flag2 = f2(c2, c1);
    if (flag1 == 0 || !flag2) {
        flag = 0;
    } else {
        flag = 1;
    }
    printf("\nflag = %d : c1 = %d, c2 = %d", flag, c1, c2);
    i = i + 1;
    a = a + 5;
    b = b + 5;
    if (i >= 10) {
        continue;
    }  
    if (i < 0) {
        break;
    }  
}
[INFO] Matched <BlockItem>:
for (; i < 3; ) {
    int c1;
    int c2;
    c1 = a + b;
    c2 = a - b;
    flag1 = f2(c1, c2);
    flag2 = f2(c2, c1);
    if (flag1 == 0 || !flag2) {
        flag = 0;
    } else {
        flag = 1;
    }
    printf("\nflag = %d : c1 = %d, c2 = %d", flag, c1, c2);
    i = i + 1;
    a = a + 5;
    b = b + 5;
    if (i >= 10) {
        continue;
    }  
    if (i < 0) {
        break;
    }  
}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    for (; i < 3; ) {
        int c1;
        int c2;
        c1 = a + b;
        c2 = a - b;
        flag1 = f2(c1, c2);
        flag2 = f2(c2, c1);
        if (flag1 == 0 || !flag2) {
            flag = 0;
        } else {
            flag = 1;
        }
        printf("\nflag = %d : c1 = %d, c2 = %d", flag, c1, c2);
        i = i + 1;
        a = a + 5;
        b = b + 5;
        if (i >= 10) {
            continue;
        }  
        if (i < 0) {
            break;
        }  
    }
}
[INFO] Matched <Statement>:
{
    for (; i < 3; ) {
        int c1;
        int c2;
        c1 = a + b;
        c2 = a - b;
        flag1 = f2(c1, c2);
        flag2 = f2(c2, c1);
        if (flag1 == 0 || !flag2) {
            flag = 0;
        } else {
            flag = 1;
        }
        printf("\nflag = %d : c1 = %d, c2 = %d", flag, c1, c2);
        i = i + 1;
        a = a + 5;
        b = b + 5;
        if (i >= 10) {
            continue;
        }  
        if (i < 0) {
            break;
        }  
    }
}
[INFO] Matched <IfStatement>:
if (a != b) {
    for (; i < 3; ) {
        int c1;
        int c2;
        c1 = a + b;
        c2 = a - b;
        flag1 = f2(c1, c2);
        flag2 = f2(c2, c1);
        if (flag1 == 0 || !flag2) {
            flag = 0;
        } else {
            flag = 1;
        }
        printf("\nflag = %d : c1 = %d, c2 = %d", flag, c1, c2);
        i = i + 1;
        a = a + 5;
        b = b + 5;
        if (i >= 10) {
            continue;
        }  
        if (i < 0) {
            break;
        }  
    }
}  
[INFO] Matched <Statement>:
if (a != b) {
    for (; i < 3; ) {
        int c1;
        int c2;
        c1 = a + b;
        c2 = a - b;
        flag1 = f2(c1, c2);
        flag2 = f2(c2, c1);
        if (flag1 == 0 || !flag2) {
            flag = 0;
        } else {
            flag = 1;
        }
        printf("\nflag = %d : c1 = %d, c2 = %d", flag, c1, c2);
        i = i + 1;
        a = a + 5;
        b = b + 5;
        if (i >= 10) {
            continue;
        }  
        if (i < 0) {
            break;
        }  
    }
}  
[INFO] Matched <BlockItem>:
if (a != b) {
    for (; i < 3; ) {
        int c1;
        int c2;
        c1 = a + b;
        c2 = a - b;
        flag1 = f2(c1, c2);
        flag2 = f2(c2, c1);
        if (flag1 == 0 || !flag2) {
            flag = 0;
        } else {
            flag = 1;
        }
        printf("\nflag = %d : c1 = %d, c2 = %d", flag, c1, c2);
        i = i + 1;
        a = a + 5;
        b = b + 5;
        if (i >= 10) {
            continue;
        }  
        if (i < 0) {
            break;
        }  
    }
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    ;
    {}
    int a, b, flag1, flag2, flag, i;
    a = getint();
    b = getint();
    i = 0;
    if (a != b) {
        for (; i < 3; ) {
            int c1;
            int c2;
            c1 = a + b;
            c2 = a - b;
            flag1 = f2(c1, c2);
            flag2 = f2(c2, c1);
            if (flag1 == 0 || !flag2) {
                flag = 0;
            } else {
                flag = 1;
            }
            printf("\nflag = %d : c1 = %d, c2 = %d", flag, c1, c2);
            i = i + 1;
            a = a + 5;
            b = b + 5;
            if (i >= 10) {
                continue;
            }  
            if (i < 0) {
                break;
            }  
        }
    }  
    return 0;
}
[INFO] Matched <MainFuncDefinition>:
int main() {
    ;
    {}
    int a, b, flag1, flag2, flag, i;
    a = getint();
    b = getint();
    i = 0;
    if (a != b) {
        for (; i < 3; ) {
            int c1;
            int c2;
            c1 = a + b;
            c2 = a - b;
            flag1 = f2(c1, c2);
            flag2 = f2(c2, c1);
            if (flag1 == 0 || !flag2) {
                flag = 0;
            } else {
                flag = 1;
            }
            printf("\nflag = %d : c1 = %d, c2 = %d", flag, c1, c2);
            i = i + 1;
            a = a + 5;
            b = b + 5;
            if (i >= 10) {
                continue;
            }  
            if (i < 0) {
                break;
            }  
        }
    }  
    return 0;
}
[INFO] Matched <CompileUnit>:
const int c_common = 10, c_array[3] = {1, 2, 3};
const int c_matrix[3][3] = {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}};
int v_common, v_array[3], v_matrix[3][3];
int v_commonInit = 10;
int v_arrayInit[3] = {1, 2, 3};
int v_matrixInit[3][3] = {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}};

void print(int output) {
    printf("\nf2() flag : %d", output);
    return;
}

int f0() {
    return 1;
}

int f1(int a[], int b[][3], int c[]) {
    return a[0] + b[0][0] + c[0];
}

int f2(int a, int b) {
    int c;
    int flag;
    int a1[2] = {1, 2};
    int a2[3][3] = {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}};
    c = -(a * b) + a / b + (a % b) - 1 + f1(a1, a2, a2[0]) - +f0();
    if (a > 10 && b > 10) {
        print(1);
        flag = 0;
    }  
    if (a > 10 && b <= 10) {
        print(2);
        flag = 0;
    }  
    if (a <= 10 && b <= 10) {
        print(3);
        flag = 1;
    }  
    if (a <= 10 && b > 10) {
        print(4);
        flag = 1;
    }  
    return flag;
}

int main() {
    ;
    {}
    int a, b, flag1, flag2, flag, i;
    a = getint();
    b = getint();
    i = 0;
    if (a != b) {
        for (; i < 3; ) {
            int c1;
            int c2;
            c1 = a + b;
            c2 = a - b;
            flag1 = f2(c1, c2);
            flag2 = f2(c2, c1);
            if (flag1 == 0 || !flag2) {
                flag = 0;
            } else {
                flag = 1;
            }
            printf("\nflag = %d : c1 = %d, c2 = %d", flag, c1, c2);
            i = i + 1;
            a = a + 5;
            b = b + 5;
            if (i >= 10) {
                continue;
            }  
            if (i < 0) {
                break;
            }  
        }
    }  
    return 0;
}
[INFO] Test 6
[INFO] Matching <CompileUnit>
[INFO] Consumed Token: void
[INFO] Consumed Token: de
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: de
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Failed to match <BasicType>.
[INFO] Failed to match <FuncParam>.
[INFO] Failed to match <FuncParamList>.
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return;
}
[INFO] Matched <FuncDefinition>:
void de() {
    return;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: keke
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: keke
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: i
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: j
[INFO] Matched <FuncParamList>: int i, int j
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: i + j
[INFO] Matched <Expression>: i + j
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = i + j;
[INFO] Matched <Statement>: i = i + j;
[INFO] Matched <BlockItem>:
i = i + j;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    i = i + j;
    return 0;
}
[INFO] Matched <FuncDefinition>:
int keke(int i, int j) {
    i = i + j;
    return 0;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: jian
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: jian
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Failed to match <BasicType>.
[INFO] Failed to match <FuncParam>.
[INFO] Failed to match <FuncParamList>.
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: x
[INFO] Matched <VarDefinition>: x
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: y
[INFO] Matched <VarDefinition>: y
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: z
[INFO] Matched <VarDefinition>: z
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int x, y, z;
[INFO] Matched <Declaration>: int x, y, z;
[INFO] Matched <BlockItem>:
int x, y, z;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Matched <MultiplicativeExpression>: x
[INFO] Matched <AdditiveExpression>: x
[INFO] Matched <Expression>: x
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: x = getint();
[INFO] Matched <Statement>: x = getint();
[INFO] Matched <BlockItem>:
x = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Matched <MultiplicativeExpression>: y
[INFO] Matched <AdditiveExpression>: y
[INFO] Matched <Expression>: y
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: y = getint();
[INFO] Matched <Statement>: y = getint();
[INFO] Matched <BlockItem>:
y = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: z
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: z
[INFO] Matched <LeftValue>: z
[INFO] Matched <PrimaryExpression>: z
[INFO] Matched <UnaryExpression>: z
[INFO] Matched <MultiplicativeExpression>: z
[INFO] Matched <AdditiveExpression>: z
[INFO] Matched <Expression>: z
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: z
[INFO] Matched <LeftValue>: z
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: z
[INFO] Matched <LeftValue>: z
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Matched <MultiplicativeExpression>: x
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Matched <LeftValue>: y
[INFO] Matched <PrimaryExpression>: y
[INFO] Matched <UnaryExpression>: y
[INFO] Matched <MultiplicativeExpression>: y
[INFO] Matched <AdditiveExpression>: x - y
[INFO] Matched <Expression>: x - y
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: z = x - y;
[INFO] Matched <Statement>: z = x - y;
[INFO] Matched <BlockItem>:
z = x - y;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: z
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: z
[INFO] Matched <LeftValue>: z
[INFO] Matched <PrimaryExpression>: z
[INFO] Matched <UnaryExpression>: z
[INFO] Matched <MultiplicativeExpression>: z
[INFO] Matched <AdditiveExpression>: z
[INFO] Matched <Expression>: z
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return z;
[INFO] Matched <Statement>: return z;
[INFO] Matched <BlockItem>:
return z;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int x, y, z;
    x = getint();
    y = getint();
    z = x - y;
    return z;
}
[INFO] Matched <FuncDefinition>:
int jian() {
    int x, y, z;
    x = getint();
    y = getint();
    z = x - y;
    return z;
}
[INFO] Consumed Token: int
[INFO] Lexer rolling back...
[INFO] Matching <MainFuncDefinition>.
[INFO] Consumed Token: int
[INFO] Consumed Token: main
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: a
[INFO] Matched <VarDefinition>: a
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: b
[INFO] Matched <VarDefinition>: b
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: c
[INFO] Matched <VarDefinition>: c
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: d
[INFO] Matched <VarDefinition>: d
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: e
[INFO] Matched <VarDefinition>: e
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: f
[INFO] Matched <VarDefinition>: f
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: g
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: +1
[INFO] Matched <UnaryExpression>: +1
[INFO] Matched <MultiplicativeExpression>: +1
[INFO] Matched <AdditiveExpression>: +1
[INFO] Matched <Expression>: +1
[INFO] Matched <ScalarVarInitValue>: +1
[INFO] Matched <VarInitValue>: +1
[INFO] Matched <VarDefinition>: g = +1
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: h
[INFO] Matched <VarDefinition>: h
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: j
[INFO] Matched <VarDefinition>: j
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: k
[INFO] Matched <VarDefinition>: k
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: l
[INFO] Matched <VarDefinition>: l
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: o
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: -1
[INFO] Matched <UnaryExpression>: -1
[INFO] Matched <MultiplicativeExpression>: -1
[INFO] Matched <AdditiveExpression>: -1
[INFO] Matched <Expression>: -1
[INFO] Matched <ScalarVarInitValue>: -1
[INFO] Matched <VarInitValue>: -1
[INFO] Matched <VarDefinition>: o = -1
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int a, b, c, d, e, f, g = +1, h, j, k, l, o = -1;
[INFO] Matched <Declaration>: int a, b, c, d, e, f, g = +1, h, j, k, l, o = -1;
[INFO] Matched <BlockItem>:
int a, b, c, d, e, f, g = +1, h, j, k, l, o = -1;
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: i
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Matched <VarDefinition>: i = 2
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: n
[INFO] Matched <VarDefinition>: n
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: m
[INFO] Matched <VarDefinition>: m
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: flag
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: flag = 0
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int i = 2, n, m, flag = 0;
[INFO] Matched <Declaration>: int i = 2, n, m, flag = 0;
[INFO] Matched <BlockItem>:
int i = 2, n, m, flag = 0;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Matched <Expression>: n
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: n = getint();
[INFO] Matched <Statement>: n = getint();
[INFO] Matched <BlockItem>:
n = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Matched <RelationalExpression>: i < n
[INFO] Matched <EqualityExpression>: i < n
[INFO] Matched <LogicalAndExpression>: i < n
[INFO] Matched <LogicalOrExpression>: i < n
[INFO] Matched <Condition>: i < n
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: m
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: m
[INFO] Matched <LeftValue>: m
[INFO] Matched <PrimaryExpression>: m
[INFO] Matched <UnaryExpression>: m
[INFO] Matched <MultiplicativeExpression>: m
[INFO] Matched <AdditiveExpression>: m
[INFO] Matched <Expression>: m
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: m
[INFO] Matched <LeftValue>: m
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: m
[INFO] Matched <LeftValue>: m
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: n % i
[INFO] Matched <AdditiveExpression>: n % i
[INFO] Matched <Expression>: n % i
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: m = n % i;
[INFO] Matched <Statement>: m = n % i;
[INFO] Matched <BlockItem>:
m = n % i;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: m
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: m
[INFO] Matched <LeftValue>: m
[INFO] Matched <PrimaryExpression>: m
[INFO] Matched <UnaryExpression>: m
[INFO] Matched <MultiplicativeExpression>: m
[INFO] Matched <AdditiveExpression>: m
[INFO] Matched <RelationalExpression>: m
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: 0
[INFO] Matched <EqualityExpression>: m == 0
[INFO] Matched <LogicalAndExpression>: m == 0
[INFO] Matched <LogicalOrExpression>: m == 0
[INFO] Matched <Condition>: m == 0
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: flag
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Matched <PrimaryExpression>: flag
[INFO] Matched <UnaryExpression>: flag
[INFO] Matched <MultiplicativeExpression>: flag
[INFO] Matched <AdditiveExpression>: flag
[INFO] Matched <Expression>: flag
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: flag
[INFO] Matched <LeftValue>: flag
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: flag = 1;
[INFO] Matched <Statement>: flag = 1;
[INFO] Matched <BlockItem>:
flag = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "0\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("0\n");
[INFO] Matched <Statement>: printf("0\n");
[INFO] Matched <BlockItem>:
printf("0\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    flag = 1;
    printf("0\n");
}
[INFO] Matched <Statement>:
{
    flag = 1;
    printf("0\n");
}
[INFO] Matched <IfStatement>:
if (m == 0) {
    flag = 1;
    printf("0\n");
}  
[INFO] Matched <Statement>:
if (m == 0) {
    flag = 1;
    printf("0\n");
}  
[INFO] Matched <BlockItem>:
if (m == 0) {
    flag = 1;
    printf("0\n");
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: i + 1
[INFO] Matched <Expression>: i + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = i + 1;
[INFO] Matched <Statement>: i = i + 1;
[INFO] Matched <BlockItem>:
i = i + 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    m = n % i;
    if (m == 0) {
        flag = 1;
        printf("0\n");
    }  
    i = i + 1;
}
[INFO] Matched <Statement>:
{
    m = n % i;
    if (m == 0) {
        flag = 1;
        printf("0\n");
    }  
    i = i + 1;
}
[INFO] Matched <ForStatementSelection>:
for (; i < n; ) {
    m = n % i;
    if (m == 0) {
        flag = 1;
        printf("0\n");
    }  
    i = i + 1;
}
[INFO] Matched <Statement>:
for (; i < n; ) {
    m = n % i;
    if (m == 0) {
        flag = 1;
        printf("0\n");
    }  
    i = i + 1;
}
[INFO] Matched <BlockItem>:
for (; i < n; ) {
    m = n % i;
    if (m == 0) {
        flag = 1;
        printf("0\n");
    }  
    i = i + 1;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Matched <LeftValue>: c
[INFO] Matched <PrimaryExpression>: c
[INFO] Matched <UnaryExpression>: c
[INFO] Matched <MultiplicativeExpression>: c
[INFO] Matched <AdditiveExpression>: c
[INFO] Matched <Expression>: c
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Matched <LeftValue>: c
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Matched <LeftValue>: c
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: jian
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: jian
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: jian()
[INFO] Matched <UnaryExpression>: jian()
[INFO] Matched <MultiplicativeExpression>: jian()
[INFO] Matched <AdditiveExpression>: jian()
[INFO] Matched <Expression>: jian()
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: c = jian();
[INFO] Matched <Statement>: c = jian();
[INFO] Matched <BlockItem>:
c = jian();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Matched <LeftValue>: c
[INFO] Matched <PrimaryExpression>: c
[INFO] Matched <UnaryExpression>: c
[INFO] Matched <MultiplicativeExpression>: c
[INFO] Matched <AdditiveExpression>: c
[INFO] Matched <Expression>: c
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", c);
[INFO] Matched <Statement>: printf("%d\n", c);
[INFO] Matched <BlockItem>:
printf("%d\n", c);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: d
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: d
[INFO] Matched <LeftValue>: d
[INFO] Matched <PrimaryExpression>: d
[INFO] Matched <UnaryExpression>: d
[INFO] Matched <MultiplicativeExpression>: d
[INFO] Matched <AdditiveExpression>: d
[INFO] Matched <Expression>: d
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: d
[INFO] Matched <LeftValue>: d
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: d
[INFO] Matched <LeftValue>: d
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Matched <LeftValue>: c
[INFO] Matched <PrimaryExpression>: c
[INFO] Matched <UnaryExpression>: c
[INFO] Matched <MultiplicativeExpression>: c
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: c + 1
[INFO] Matched <Expression>: c + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: d = c + 1;
[INFO] Matched <Statement>: d = c + 1;
[INFO] Matched <BlockItem>:
d = c + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: e
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: e
[INFO] Matched <LeftValue>: e
[INFO] Matched <PrimaryExpression>: e
[INFO] Matched <UnaryExpression>: e
[INFO] Matched <MultiplicativeExpression>: e
[INFO] Matched <AdditiveExpression>: e
[INFO] Matched <Expression>: e
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: e
[INFO] Matched <LeftValue>: e
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: e
[INFO] Matched <LeftValue>: e
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Matched <LeftValue>: c
[INFO] Matched <PrimaryExpression>: c
[INFO] Matched <UnaryExpression>: c
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: c * 2
[INFO] Matched <AdditiveExpression>: c * 2
[INFO] Matched <Expression>: c * 2
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: e = c * 2;
[INFO] Matched <Statement>: e = c * 2;
[INFO] Matched <BlockItem>:
e = c * 2;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: e
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: e
[INFO] Matched <LeftValue>: e
[INFO] Matched <PrimaryExpression>: e
[INFO] Matched <UnaryExpression>: e
[INFO] Matched <MultiplicativeExpression>: e
[INFO] Matched <AdditiveExpression>: e
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <RelationalExpression>: e < 5
[INFO] Matched <EqualityExpression>: e < 5
[INFO] Matched <LogicalAndExpression>: e < 5
[INFO] Matched <LogicalOrExpression>: e < 5
[INFO] Matched <Condition>: e < 5
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: f
[INFO] Matched <LeftValue>: f
[INFO] Matched <PrimaryExpression>: f
[INFO] Matched <UnaryExpression>: f
[INFO] Matched <MultiplicativeExpression>: f
[INFO] Matched <AdditiveExpression>: f
[INFO] Matched <Expression>: f
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: f
[INFO] Matched <LeftValue>: f
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: f
[INFO] Matched <LeftValue>: f
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Matched <LeftValue>: c
[INFO] Matched <PrimaryExpression>: c
[INFO] Matched <UnaryExpression>: c
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: c % 2
[INFO] Matched <AdditiveExpression>: c % 2
[INFO] Matched <Expression>: c % 2
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: f = c % 2;
[INFO] Matched <Statement>: f = c % 2;
[INFO] Matched <BlockItem>:
f = c % 2;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    f = c % 2;
}
[INFO] Matched <Statement>:
{
    f = c % 2;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: f
[INFO] Matched <LeftValue>: f
[INFO] Matched <PrimaryExpression>: f
[INFO] Matched <UnaryExpression>: f
[INFO] Matched <MultiplicativeExpression>: f
[INFO] Matched <AdditiveExpression>: f
[INFO] Matched <Expression>: f
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: f
[INFO] Matched <LeftValue>: f
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: f
[INFO] Matched <LeftValue>: f
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Matched <LeftValue>: c
[INFO] Matched <PrimaryExpression>: c
[INFO] Matched <UnaryExpression>: c
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: c / 2
[INFO] Matched <AdditiveExpression>: c / 2
[INFO] Matched <Expression>: c / 2
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: f = c / 2;
[INFO] Matched <Statement>: f = c / 2;
[INFO] Matched <IfStatement>:
if (e < 5) {
    f = c % 2;
} else f = c / 2;
[INFO] Matched <Statement>:
if (e < 5) {
    f = c % 2;
} else f = c / 2;
[INFO] Matched <BlockItem>:
if (e < 5) {
    f = c % 2;
} else f = c / 2;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: f
[INFO] Matched <LeftValue>: f
[INFO] Matched <PrimaryExpression>: f
[INFO] Matched <UnaryExpression>: f
[INFO] Matched <MultiplicativeExpression>: f
[INFO] Matched <AdditiveExpression>: f
[INFO] Matched <RelationalExpression>: f
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <UnaryOperatedExpression>: !3
[INFO] Matched <UnaryExpression>: !3
[INFO] Matched <MultiplicativeExpression>: !3
[INFO] Matched <AdditiveExpression>: !3
[INFO] Matched <RelationalExpression>: !3
[INFO] Matched <EqualityExpression>: f != !3
[INFO] Matched <LogicalAndExpression>: f != !3
[INFO] Matched <LogicalOrExpression>: f != !3
[INFO] Matched <Condition>: f != !3
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: g
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: g
[INFO] Matched <LeftValue>: g
[INFO] Matched <PrimaryExpression>: g
[INFO] Matched <UnaryExpression>: g
[INFO] Matched <MultiplicativeExpression>: g
[INFO] Matched <AdditiveExpression>: g
[INFO] Matched <Expression>: g
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: g
[INFO] Matched <LeftValue>: g
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: g
[INFO] Matched <LeftValue>: g
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: g
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: g
[INFO] Matched <LeftValue>: g
[INFO] Matched <PrimaryExpression>: g
[INFO] Matched <UnaryExpression>: g
[INFO] Matched <MultiplicativeExpression>: g
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: g + 1
[INFO] Matched <Expression>: g + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: g = g + 1;
[INFO] Matched <Statement>: g = g + 1;
[INFO] Matched <IfStatement>:
if (f != !3) g = g + 1;  
[INFO] Matched <Statement>:
if (f != !3) g = g + 1;  
[INFO] Matched <BlockItem>:
if (f != !3) g = g + 1;  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: o
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: o
[INFO] Matched <LeftValue>: o
[INFO] Matched <PrimaryExpression>: o
[INFO] Matched <UnaryExpression>: o
[INFO] Matched <MultiplicativeExpression>: o
[INFO] Matched <AdditiveExpression>: o
[INFO] Matched <Expression>: o
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: o
[INFO] Matched <LeftValue>: o
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: o
[INFO] Matched <LeftValue>: o
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: j + 1
[INFO] Matched <Expression>: j + 1
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (j + 1)
[INFO] Matched <PrimaryExpression>: (j + 1)
[INFO] Matched <UnaryExpression>: (j + 1)
[INFO] Matched <MultiplicativeExpression>: (j + 1)
[INFO] Matched <AdditiveExpression>: i + (j + 1)
[INFO] Matched <Expression>: i + (j + 1)
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: o = i + (j + 1);
[INFO] Matched <Statement>: o = i + (j + 1);
[INFO] Matched <BlockItem>:
o = i + (j + 1);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: 0
[INFO] Matched <EqualityExpression>: 0
[INFO] Matched <LogicalAndExpression>: 0
[INFO] Matched <LogicalOrExpression>: 0
[INFO] Matched <Condition>: 0
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ContinueStatement>.
[INFO] Consumed Token: continue
[INFO] Consumed Token: ;
[INFO] Matched <ContinueStatement>: continue;
[INFO] Matched <Statement>: continue;
[INFO] Matched <BlockItem>:
continue;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    continue;
}
[INFO] Matched <Statement>:
{
    continue;
}
[INFO] Matched <ForStatementSelection>:
for (; 0; ) {
    continue;
}
[INFO] Matched <Statement>:
for (; 0; ) {
    continue;
}
[INFO] Matched <BlockItem>:
for (; 0; ) {
    continue;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <RelationalExpression>: 1
[INFO] Matched <EqualityExpression>: 1
[INFO] Matched <LogicalAndExpression>: 1
[INFO] Matched <LogicalOrExpression>: 1
[INFO] Matched <Condition>: 1
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    break;
}
[INFO] Matched <Statement>:
{
    break;
}
[INFO] Matched <ForStatementSelection>:
for (; 1; ) {
    break;
}
[INFO] Matched <Statement>:
for (; 1; ) {
    break;
}
[INFO] Matched <BlockItem>:
for (; 1; ) {
    break;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Matched <LeftValue>: c
[INFO] Matched <PrimaryExpression>: c
[INFO] Matched <UnaryExpression>: c
[INFO] Matched <MultiplicativeExpression>: c
[INFO] Matched <AdditiveExpression>: c
[INFO] Matched <RelationalExpression>: c
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: d
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: d
[INFO] Matched <LeftValue>: d
[INFO] Matched <PrimaryExpression>: d
[INFO] Matched <UnaryExpression>: d
[INFO] Matched <MultiplicativeExpression>: d
[INFO] Matched <AdditiveExpression>: d
[INFO] Matched <RelationalExpression>: d
[INFO] Matched <EqualityExpression>: c == d
[INFO] Matched <LogicalAndExpression>: c == d
[INFO] Matched <LogicalOrExpression>: c == d
[INFO] Matched <Condition>: c == d
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: d
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: d
[INFO] Matched <LeftValue>: d
[INFO] Matched <PrimaryExpression>: d
[INFO] Matched <UnaryExpression>: d
[INFO] Matched <MultiplicativeExpression>: d
[INFO] Matched <AdditiveExpression>: d
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: e
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: e
[INFO] Matched <LeftValue>: e
[INFO] Matched <PrimaryExpression>: e
[INFO] Matched <UnaryExpression>: e
[INFO] Matched <MultiplicativeExpression>: e
[INFO] Matched <AdditiveExpression>: e
[INFO] Matched <RelationalExpression>: d >= e
[INFO] Matched <EqualityExpression>: d >= e
[INFO] Matched <LogicalAndExpression>: d >= e
[INFO] Matched <LogicalOrExpression>: d >= e
[INFO] Matched <Condition>: d >= e
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: e
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: e
[INFO] Matched <LeftValue>: e
[INFO] Matched <PrimaryExpression>: e
[INFO] Matched <UnaryExpression>: e
[INFO] Matched <MultiplicativeExpression>: e
[INFO] Matched <AdditiveExpression>: e
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: f
[INFO] Matched <LeftValue>: f
[INFO] Matched <PrimaryExpression>: f
[INFO] Matched <UnaryExpression>: f
[INFO] Matched <MultiplicativeExpression>: f
[INFO] Matched <AdditiveExpression>: f
[INFO] Matched <RelationalExpression>: e <= f
[INFO] Matched <EqualityExpression>: e <= f
[INFO] Matched <LogicalAndExpression>: e <= f
[INFO] Matched <LogicalOrExpression>: e <= f
[INFO] Matched <Condition>: e <= f
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: f
[INFO] Matched <LeftValue>: f
[INFO] Matched <PrimaryExpression>: f
[INFO] Matched <UnaryExpression>: f
[INFO] Matched <MultiplicativeExpression>: f
[INFO] Matched <AdditiveExpression>: f
[INFO] Matched <RelationalExpression>: f
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: g
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: g
[INFO] Matched <LeftValue>: g
[INFO] Matched <PrimaryExpression>: g
[INFO] Matched <UnaryExpression>: g
[INFO] Matched <MultiplicativeExpression>: g
[INFO] Matched <AdditiveExpression>: g
[INFO] Matched <RelationalExpression>: g
[INFO] Matched <EqualityExpression>: f != g
[INFO] Matched <LogicalAndExpression>: f != g
[INFO] Matched <LogicalOrExpression>: f != g
[INFO] Matched <Condition>: f != g
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Matched <LeftValue>: c
[INFO] Matched <PrimaryExpression>: c
[INFO] Matched <UnaryExpression>: c
[INFO] Matched <MultiplicativeExpression>: c
[INFO] Matched <AdditiveExpression>: c
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <RelationalExpression>: c > 1
[INFO] Matched <EqualityExpression>: c > 1
[INFO] Matched <LogicalAndExpression>: c > 1
[INFO] Matched <LogicalOrExpression>: c > 1
[INFO] Matched <Condition>: c > 1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = 1;
[INFO] Matched <Statement>: a = 1;
[INFO] Matched <BlockItem>:
a = 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a = 1;
}
[INFO] Matched <Statement>:
{
    a = 1;
}
[INFO] Matched <IfStatement>:
if (c > 1) {
    a = 1;
}  
[INFO] Matched <Statement>:
if (c > 1) {
    a = 1;
}  
[INFO] Matched <BlockItem>:
if (c > 1) {
    a = 1;
}  
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (c > 1) {
        a = 1;
    }  
}
[INFO] Matched <Statement>:
{
    if (c > 1) {
        a = 1;
    }  
}
[INFO] Matched <IfStatement>:
if (f != g) {
    if (c > 1) {
        a = 1;
    }  
}  
[INFO] Matched <Statement>:
if (f != g) {
    if (c > 1) {
        a = 1;
    }  
}  
[INFO] Matched <BlockItem>:
if (f != g) {
    if (c > 1) {
        a = 1;
    }  
}  
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (f != g) {
        if (c > 1) {
            a = 1;
        }  
    }  
}
[INFO] Matched <Statement>:
{
    if (f != g) {
        if (c > 1) {
            a = 1;
        }  
    }  
}
[INFO] Matched <IfStatement>:
if (e <= f) {
    if (f != g) {
        if (c > 1) {
            a = 1;
        }  
    }  
}  
[INFO] Matched <Statement>:
if (e <= f) {
    if (f != g) {
        if (c > 1) {
            a = 1;
        }  
    }  
}  
[INFO] Matched <BlockItem>:
if (e <= f) {
    if (f != g) {
        if (c > 1) {
            a = 1;
        }  
    }  
}  
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (e <= f) {
        if (f != g) {
            if (c > 1) {
                a = 1;
            }  
        }  
    }  
}
[INFO] Matched <Statement>:
{
    if (e <= f) {
        if (f != g) {
            if (c > 1) {
                a = 1;
            }  
        }  
    }  
}
[INFO] Matched <IfStatement>:
if (d >= e) {
    if (e <= f) {
        if (f != g) {
            if (c > 1) {
                a = 1;
            }  
        }  
    }  
}  
[INFO] Matched <Statement>:
if (d >= e) {
    if (e <= f) {
        if (f != g) {
            if (c > 1) {
                a = 1;
            }  
        }  
    }  
}  
[INFO] Matched <BlockItem>:
if (d >= e) {
    if (e <= f) {
        if (f != g) {
            if (c > 1) {
                a = 1;
            }  
        }  
    }  
}  
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (d >= e) {
        if (e <= f) {
            if (f != g) {
                if (c > 1) {
                    a = 1;
                }  
            }  
        }  
    }  
}
[INFO] Matched <Statement>:
{
    if (d >= e) {
        if (e <= f) {
            if (f != g) {
                if (c > 1) {
                    a = 1;
                }  
            }  
        }  
    }  
}
[INFO] Matched <IfStatement>:
if (c == d) {
    if (d >= e) {
        if (e <= f) {
            if (f != g) {
                if (c > 1) {
                    a = 1;
                }  
            }  
        }  
    }  
}  
[INFO] Matched <Statement>:
if (c == d) {
    if (d >= e) {
        if (e <= f) {
            if (f != g) {
                if (c > 1) {
                    a = 1;
                }  
            }  
        }  
    }  
}  
[INFO] Matched <BlockItem>:
if (c == d) {
    if (d >= e) {
        if (e <= f) {
            if (f != g) {
                if (c > 1) {
                    a = 1;
                }  
            }  
        }  
    }  
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: keke
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: keke
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <Expression>: b
[INFO] Matched <FuncArgList>: a, b
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: keke(a, b)
[INFO] Matched <UnaryExpression>: keke(a, b)
[INFO] Matched <MultiplicativeExpression>: keke(a, b)
[INFO] Matched <AdditiveExpression>: keke(a, b)
[INFO] Matched <Expression>: keke(a, b)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: keke(a, b);
[INFO] Matched <Statement>: keke(a, b);
[INFO] Matched <BlockItem>:
keke(a, b);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n%d\n%d\n%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: d
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: d
[INFO] Matched <LeftValue>: d
[INFO] Matched <PrimaryExpression>: d
[INFO] Matched <UnaryExpression>: d
[INFO] Matched <MultiplicativeExpression>: d
[INFO] Matched <AdditiveExpression>: d
[INFO] Matched <Expression>: d
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: e
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: e
[INFO] Matched <LeftValue>: e
[INFO] Matched <PrimaryExpression>: e
[INFO] Matched <UnaryExpression>: e
[INFO] Matched <MultiplicativeExpression>: e
[INFO] Matched <AdditiveExpression>: e
[INFO] Matched <Expression>: e
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: f
[INFO] Matched <LeftValue>: f
[INFO] Matched <PrimaryExpression>: f
[INFO] Matched <UnaryExpression>: f
[INFO] Matched <MultiplicativeExpression>: f
[INFO] Matched <AdditiveExpression>: f
[INFO] Matched <Expression>: f
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: g
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: g
[INFO] Matched <LeftValue>: g
[INFO] Matched <PrimaryExpression>: g
[INFO] Matched <UnaryExpression>: g
[INFO] Matched <MultiplicativeExpression>: g
[INFO] Matched <AdditiveExpression>: g
[INFO] Matched <Expression>: g
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n%d\n%d\n%d\n", d, e, f, g);
[INFO] Matched <Statement>: printf("%d\n%d\n%d\n%d\n", d, e, f, g);
[INFO] Matched <BlockItem>:
printf("%d\n%d\n%d\n%d\n", d, e, f, g);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "19182620\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("19182620\n");
[INFO] Matched <Statement>: printf("19182620\n");
[INFO] Matched <BlockItem>:
printf("19182620\n");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "19182620\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("19182620\n");
[INFO] Matched <Statement>: printf("19182620\n");
[INFO] Matched <BlockItem>:
printf("19182620\n");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "19182620\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("19182620\n");
[INFO] Matched <Statement>: printf("19182620\n");
[INFO] Matched <BlockItem>:
printf("19182620\n");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int a, b, c, d, e, f, g = +1, h, j, k, l, o = -1;
    int i = 2, n, m, flag = 0;
    n = getint();
    for (; i < n; ) {
        m = n % i;
        if (m == 0) {
            flag = 1;
            printf("0\n");
        }  
        i = i + 1;
    }
    c = jian();
    printf("%d\n", c);
    d = c + 1;
    e = c * 2;
    if (e < 5) {
        f = c % 2;
    } else f = c / 2;
    if (f != !3) g = g + 1;  
    o = i + (j + 1);
    {}
    ;
    for (; 0; ) {
        continue;
    }
    for (; 1; ) {
        break;
    }
    if (c == d) {
        if (d >= e) {
            if (e <= f) {
                if (f != g) {
                    if (c > 1) {
                        a = 1;
                    }  
                }  
            }  
        }  
    }  
    keke(a, b);
    printf("%d\n%d\n%d\n%d\n", d, e, f, g);
    printf("19182620\n");
    printf("19182620\n");
    printf("19182620\n");
    return 0;
}
[INFO] Matched <MainFuncDefinition>:
int main() {
    int a, b, c, d, e, f, g = +1, h, j, k, l, o = -1;
    int i = 2, n, m, flag = 0;
    n = getint();
    for (; i < n; ) {
        m = n % i;
        if (m == 0) {
            flag = 1;
            printf("0\n");
        }  
        i = i + 1;
    }
    c = jian();
    printf("%d\n", c);
    d = c + 1;
    e = c * 2;
    if (e < 5) {
        f = c % 2;
    } else f = c / 2;
    if (f != !3) g = g + 1;  
    o = i + (j + 1);
    {}
    ;
    for (; 0; ) {
        continue;
    }
    for (; 1; ) {
        break;
    }
    if (c == d) {
        if (d >= e) {
            if (e <= f) {
                if (f != g) {
                    if (c > 1) {
                        a = 1;
                    }  
                }  
            }  
        }  
    }  
    keke(a, b);
    printf("%d\n%d\n%d\n%d\n", d, e, f, g);
    printf("19182620\n");
    printf("19182620\n");
    printf("19182620\n");
    return 0;
}
[INFO] Matched <CompileUnit>:

void de() {
    return;
}

int keke(int i, int j) {
    i = i + j;
    return 0;
}

int jian() {
    int x, y, z;
    x = getint();
    y = getint();
    z = x - y;
    return z;
}

int main() {
    int a, b, c, d, e, f, g = +1, h, j, k, l, o = -1;
    int i = 2, n, m, flag = 0;
    n = getint();
    for (; i < n; ) {
        m = n % i;
        if (m == 0) {
            flag = 1;
            printf("0\n");
        }  
        i = i + 1;
    }
    c = jian();
    printf("%d\n", c);
    d = c + 1;
    e = c * 2;
    if (e < 5) {
        f = c % 2;
    } else f = c / 2;
    if (f != !3) g = g + 1;  
    o = i + (j + 1);
    {}
    ;
    for (; 0; ) {
        continue;
    }
    for (; 1; ) {
        break;
    }
    if (c == d) {
        if (d >= e) {
            if (e <= f) {
                if (f != g) {
                    if (c > 1) {
                        a = 1;
                    }  
                }  
            }  
        }  
    }  
    keke(a, b);
    printf("%d\n%d\n%d\n%d\n", d, e, f, g);
    printf("19182620\n");
    printf("19182620\n");
    printf("19182620\n");
    return 0;
}
[INFO] Test 7
[INFO] Matching <CompileUnit>
[INFO] Consumed Token: int
[INFO] Lexer rolling back...
[INFO] Consumed Token: int
[INFO] Lexer rolling back...
[INFO] Matching <MainFuncDefinition>.
[INFO] Consumed Token: int
[INFO] Consumed Token: main
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: a
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <Expression>: 5
[INFO] Matched <ScalarVarInitValue>: 5
[INFO] Matched <VarInitValue>: 5
[INFO] Matched <VarDefinition>: a = 5
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int a = 5;
[INFO] Matched <Declaration>: int a = 5;
[INFO] Matched <BlockItem>:
int a = 5;
[INFO] Consumed Token: int
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: b
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: 6
[INFO] Matched <Expression>: 6
[INFO] Matched <ScalarVarInitValue>: 6
[INFO] Matched <VarInitValue>: 6
[INFO] Matched <VarDefinition>: b = 6
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int b = 6;
[INFO] Matched <Declaration>: int b = 6;
[INFO] Matched <BlockItem>:
int b = 6;
[INFO] Consumed Token: int
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: 6
[INFO] Matched <ConstExpression>: 6
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: 6
[INFO] Matched <Expression>: 6
[INFO] Matched <ScalarVarInitValue>: 6
[INFO] Matched <VarInitValue>: 6
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 12
[INFO] Matched <Number>: 12
[INFO] Matched <PrimaryExpression>: 12
[INFO] Matched <UnaryExpression>: 12
[INFO] Matched <MultiplicativeExpression>: 12
[INFO] Matched <AdditiveExpression>: 12
[INFO] Matched <Expression>: 12
[INFO] Matched <ScalarVarInitValue>: 12
[INFO] Matched <VarInitValue>: 12
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {0, 1, 2, 3, 6, 12}
[INFO] Matched <VarInitValue>: {0, 1, 2, 3, 6, 12}
[INFO] Matched <VarDefinition>: s1[6] = {0, 1, 2, 3, 6, 12}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int s1[6] = {0, 1, 2, 3, 6, 12};
[INFO] Matched <Declaration>: int s1[6] = {0, 1, 2, 3, 6, 12};
[INFO] Matched <BlockItem>:
int s1[6] = {0, 1, 2, 3, 6, 12};
[INFO] Consumed Token: int
[INFO] Consumed Token: s2
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: s2
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: s2
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: s2
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <Expression>: 10
[INFO] Matched <ScalarVarInitValue>: 10
[INFO] Matched <VarInitValue>: 10
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 11
[INFO] Matched <Number>: 11
[INFO] Matched <PrimaryExpression>: 11
[INFO] Matched <UnaryExpression>: 11
[INFO] Matched <MultiplicativeExpression>: 11
[INFO] Matched <AdditiveExpression>: 11
[INFO] Matched <Expression>: 11
[INFO] Matched <ScalarVarInitValue>: 11
[INFO] Matched <VarInitValue>: 11
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 12
[INFO] Matched <Number>: 12
[INFO] Matched <PrimaryExpression>: 12
[INFO] Matched <UnaryExpression>: 12
[INFO] Matched <MultiplicativeExpression>: 12
[INFO] Matched <AdditiveExpression>: 12
[INFO] Matched <Expression>: 12
[INFO] Matched <ScalarVarInitValue>: 12
[INFO] Matched <VarInitValue>: 12
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {10, 11, 12}
[INFO] Matched <VarInitValue>: {10, 11, 12}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 13
[INFO] Matched <Number>: 13
[INFO] Matched <PrimaryExpression>: 13
[INFO] Matched <UnaryExpression>: 13
[INFO] Matched <MultiplicativeExpression>: 13
[INFO] Matched <AdditiveExpression>: 13
[INFO] Matched <Expression>: 13
[INFO] Matched <ScalarVarInitValue>: 13
[INFO] Matched <VarInitValue>: 13
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 14
[INFO] Matched <Number>: 14
[INFO] Matched <PrimaryExpression>: 14
[INFO] Matched <UnaryExpression>: 14
[INFO] Matched <MultiplicativeExpression>: 14
[INFO] Matched <AdditiveExpression>: 14
[INFO] Matched <Expression>: 14
[INFO] Matched <ScalarVarInitValue>: 14
[INFO] Matched <VarInitValue>: 14
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 15
[INFO] Matched <Number>: 15
[INFO] Matched <PrimaryExpression>: 15
[INFO] Matched <UnaryExpression>: 15
[INFO] Matched <MultiplicativeExpression>: 15
[INFO] Matched <AdditiveExpression>: 15
[INFO] Matched <Expression>: 15
[INFO] Matched <ScalarVarInitValue>: 15
[INFO] Matched <VarInitValue>: 15
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {13, 14, 15}
[INFO] Matched <VarInitValue>: {13, 14, 15}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{10, 11, 12}, {13, 14, 15}}
[INFO] Matched <VarInitValue>: {{10, 11, 12}, {13, 14, 15}}
[INFO] Matched <VarDefinition>: s2[2][3] = {{10, 11, 12}, {13, 14, 15}}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int s2[2][3] = {{10, 11, 12}, {13, 14, 15}};
[INFO] Matched <Declaration>: int s2[2][3] = {{10, 11, 12}, {13, 14, 15}};
[INFO] Matched <BlockItem>:
int s2[2][3] = {{10, 11, 12}, {13, 14, 15}};
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[0]
[INFO] Matched <PrimaryExpression>: s1[0]
[INFO] Matched <UnaryExpression>: s1[0]
[INFO] Matched <UnaryOperatedExpression>: !s1[0]
[INFO] Matched <UnaryExpression>: !s1[0]
[INFO] Matched <MultiplicativeExpression>: !s1[0]
[INFO] Matched <AdditiveExpression>: !s1[0]
[INFO] Matched <RelationalExpression>: !s1[0]
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <RelationalExpression>: 1
[INFO] Matched <EqualityExpression>: !s1[0] == 1
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[0]
[INFO] Matched <PrimaryExpression>: s1[0]
[INFO] Matched <UnaryExpression>: s1[0]
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: s1[0] * 2
[INFO] Matched <AdditiveExpression>: s1[0] * 2
[INFO] Matched <Expression>: s1[0] * 2
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (s1[0] * 2)
[INFO] Matched <PrimaryExpression>: (s1[0] * 2)
[INFO] Matched <UnaryExpression>: (s1[0] * 2)
[INFO] Matched <UnaryOperatedExpression>: !(s1[0] * 2)
[INFO] Matched <UnaryExpression>: !(s1[0] * 2)
[INFO] Matched <MultiplicativeExpression>: !(s1[0] * 2)
[INFO] Matched <AdditiveExpression>: !(s1[0] * 2)
[INFO] Matched <RelationalExpression>: !(s1[0] * 2)
[INFO] Matched <EqualityExpression>: !(s1[0] * 2)
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <UnaryOperatedExpression>: !0
[INFO] Matched <UnaryExpression>: !0
[INFO] Matched <MultiplicativeExpression>: !0
[INFO] Matched <AdditiveExpression>: !0
[INFO] Matched <RelationalExpression>: !0
[INFO] Matched <EqualityExpression>: !0
[INFO] Matched <LogicalAndExpression>: !s1[0] == 1 && !(s1[0] * 2) && !0
[INFO] Matched <LogicalOrExpression>: !s1[0] == 1 && !(s1[0] * 2) && !0
[INFO] Matched <Condition>: !s1[0] == 1 && !(s1[0] * 2) && !0
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "! is ok\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("! is ok\n");
[INFO] Matched <Statement>: printf("! is ok\n");
[INFO] Matched <BlockItem>:
printf("! is ok\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("! is ok\n");
}
[INFO] Matched <Statement>:
{
    printf("! is ok\n");
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "! has problem\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("! has problem\n");
[INFO] Matched <Statement>: printf("! has problem\n");
[INFO] Matched <BlockItem>:
printf("! has problem\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("! has problem\n");
}
[INFO] Matched <Statement>:
{
    printf("! has problem\n");
}
[INFO] Matched <IfStatement>:
if (!s1[0] == 1 && !(s1[0] * 2) && !0) {
    printf("! is ok\n");
} else {
    printf("! has problem\n");
}
[INFO] Matched <Statement>:
if (!s1[0] == 1 && !(s1[0] * 2) && !0) {
    printf("! is ok\n");
} else {
    printf("! has problem\n");
}
[INFO] Matched <BlockItem>:
if (!s1[0] == 1 && !(s1[0] * 2) && !0) {
    printf("! is ok\n");
} else {
    printf("! has problem\n");
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: a + b
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <Expression>: 5
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[5]
[INFO] Matched <PrimaryExpression>: s1[5]
[INFO] Matched <UnaryExpression>: s1[5]
[INFO] Matched <MultiplicativeExpression>: s1[5]
[INFO] Matched <AdditiveExpression>: s1[5]
[INFO] Matched <RelationalExpression>: a + b < s1[5]
[INFO] Matched <EqualityExpression>: a + b < s1[5]
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[3]
[INFO] Matched <PrimaryExpression>: s1[3]
[INFO] Matched <UnaryExpression>: s1[3]
[INFO] Matched <MultiplicativeExpression>: s1[3]
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[0]
[INFO] Matched <PrimaryExpression>: s1[0]
[INFO] Matched <UnaryExpression>: s1[0]
[INFO] Matched <MultiplicativeExpression>: s1[0]
[INFO] Matched <AdditiveExpression>: s1[3] - s1[0]
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s2
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s2[1][2]
[INFO] Matched <PrimaryExpression>: s2[1][2]
[INFO] Matched <UnaryExpression>: s2[1][2]
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: s2[1][2] / a
[INFO] Matched <AdditiveExpression>: s2[1][2] / a
[INFO] Matched <RelationalExpression>: s1[3] - s1[0] < s2[1][2] / a
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: 0
[INFO] Matched <EqualityExpression>: s1[3] - s1[0] < s2[1][2] / a == 0
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: a + b
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[0]
[INFO] Matched <PrimaryExpression>: s1[0]
[INFO] Matched <UnaryExpression>: s1[0]
[INFO] Matched <MultiplicativeExpression>: s1[0]
[INFO] Matched <AdditiveExpression>: s1[0]
[INFO] Matched <RelationalExpression>: b < a + b < s1[0]
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: 0
[INFO] Matched <EqualityExpression>: b < a + b < s1[0] == 0
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: 0
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: a + b
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[2]
[INFO] Matched <PrimaryExpression>: s1[2]
[INFO] Matched <UnaryExpression>: s1[2]
[INFO] Matched <MultiplicativeExpression>: s1[2]
[INFO] Matched <AdditiveExpression>: s1[2]
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[1]
[INFO] Matched <PrimaryExpression>: s1[1]
[INFO] Matched <UnaryExpression>: s1[1]
[INFO] Matched <MultiplicativeExpression>: s1[1]
[INFO] Matched <AdditiveExpression>: s1[1]
[INFO] Matched <RelationalExpression>: b < a + b < s1[2] > s1[1]
[INFO] Matched <EqualityExpression>: 0 == b < a + b < s1[2] > s1[1]
[INFO] Matched <LogicalAndExpression>: a + b < s1[5] && s1[3] - s1[0] < s2[1][2] / a == 0 && b < a + b < s1[0] == 0 && 0 == b < a + b < s1[2] > s1[1]
[INFO] Matched <LogicalOrExpression>: a + b < s1[5] && s1[3] - s1[0] < s2[1][2] / a == 0 && b < a + b < s1[0] == 0 && 0 == b < a + b < s1[2] > s1[1]
[INFO] Matched <Condition>: a + b < s1[5] && s1[3] - s1[0] < s2[1][2] / a == 0 && b < a + b < s1[0] == 0 && 0 == b < a + b < s1[2] > s1[1]
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "< is ok\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("< is ok\n");
[INFO] Matched <Statement>: printf("< is ok\n");
[INFO] Matched <BlockItem>:
printf("< is ok\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("< is ok\n");
}
[INFO] Matched <Statement>:
{
    printf("< is ok\n");
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "< has problem\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("< has problem\n");
[INFO] Matched <Statement>: printf("< has problem\n");
[INFO] Matched <BlockItem>:
printf("< has problem\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("< has problem\n");
}
[INFO] Matched <Statement>:
{
    printf("< has problem\n");
}
[INFO] Matched <IfStatement>:
if (a + b < s1[5] && s1[3] - s1[0] < s2[1][2] / a == 0 && b < a + b < s1[0] == 0 && 0 == b < a + b < s1[2] > s1[1]) {
    printf("< is ok\n");
} else {
    printf("< has problem\n");
}
[INFO] Matched <Statement>:
if (a + b < s1[5] && s1[3] - s1[0] < s2[1][2] / a == 0 && b < a + b < s1[0] == 0 && 0 == b < a + b < s1[2] > s1[1]) {
    printf("< is ok\n");
} else {
    printf("< has problem\n");
}
[INFO] Matched <BlockItem>:
if (a + b < s1[5] && s1[3] - s1[0] < s2[1][2] / a == 0 && b < a + b < s1[0] == 0 && 0 == b < a + b < s1[2] > s1[1]) {
    printf("< is ok\n");
} else {
    printf("< has problem\n");
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: a * b
[INFO] Matched <AdditiveExpression>: a * b
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[2]
[INFO] Matched <PrimaryExpression>: s1[2]
[INFO] Matched <UnaryExpression>: s1[2]
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s2
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s2[1][2]
[INFO] Matched <PrimaryExpression>: s2[1][2]
[INFO] Matched <UnaryExpression>: s2[1][2]
[INFO] Matched <MultiplicativeExpression>: s1[2] * s2[1][2]
[INFO] Matched <AdditiveExpression>: s1[2] * s2[1][2]
[INFO] Matched <RelationalExpression>: a * b > s1[2] * s2[1][2]
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: 0
[INFO] Matched <EqualityExpression>: a * b > s1[2] * s2[1][2] == 0
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s2
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s2[0][1]
[INFO] Matched <PrimaryExpression>: s2[0][1]
[INFO] Matched <UnaryExpression>: s2[0][1]
[INFO] Matched <MultiplicativeExpression>: s2[0][1]
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[2]
[INFO] Matched <PrimaryExpression>: s1[2]
[INFO] Matched <UnaryExpression>: s1[2]
[INFO] Matched <MultiplicativeExpression>: s1[2]
[INFO] Matched <AdditiveExpression>: s2[0][1] - s1[2]
[INFO] Matched <Expression>: s2[0][1] - s1[2]
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (s2[0][1] - s1[2])
[INFO] Matched <PrimaryExpression>: (s2[0][1] - s1[2])
[INFO] Matched <UnaryExpression>: (s2[0][1] - s1[2])
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: (s2[0][1] - s1[2]) % a
[INFO] Matched <AdditiveExpression>: (s2[0][1] - s1[2]) % a
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s2
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s2[1][2]
[INFO] Matched <PrimaryExpression>: s2[1][2]
[INFO] Matched <UnaryExpression>: s2[1][2]
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: s2[1][2] / a
[INFO] Matched <AdditiveExpression>: s2[1][2] / a
[INFO] Matched <RelationalExpression>: (s2[0][1] - s1[2]) % a > s2[1][2] / a
[INFO] Matched <EqualityExpression>: (s2[0][1] - s1[2]) % a > s2[1][2] / a
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <Expression>: 5
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[5]
[INFO] Matched <PrimaryExpression>: s1[5]
[INFO] Matched <UnaryExpression>: s1[5]
[INFO] Matched <MultiplicativeExpression>: s1[5]
[INFO] Matched <AdditiveExpression>: s1[5]
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: a + b + 2
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: s1[5] > a + b + 2 > 0
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: 0
[INFO] Matched <EqualityExpression>: s1[5] > a + b + 2 > 0 == 0
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <Expression>: 5
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[5]
[INFO] Matched <PrimaryExpression>: s1[5]
[INFO] Matched <UnaryExpression>: s1[5]
[INFO] Matched <MultiplicativeExpression>: s1[5]
[INFO] Matched <AdditiveExpression>: s1[5]
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: a + b
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[1]
[INFO] Matched <PrimaryExpression>: s1[1]
[INFO] Matched <UnaryExpression>: s1[1]
[INFO] Matched <MultiplicativeExpression>: s1[1]
[INFO] Matched <AdditiveExpression>: s1[1]
[INFO] Matched <RelationalExpression>: s1[5] > a + b < s1[1]
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: 0
[INFO] Matched <EqualityExpression>: s1[5] > a + b < s1[1] == 0
[INFO] Matched <LogicalAndExpression>: a * b > s1[2] * s2[1][2] == 0 && (s2[0][1] - s1[2]) % a > s2[1][2] / a && s1[5] > a + b + 2 > 0 == 0 && s1[5] > a + b < s1[1] == 0
[INFO] Matched <LogicalOrExpression>: a * b > s1[2] * s2[1][2] == 0 && (s2[0][1] - s1[2]) % a > s2[1][2] / a && s1[5] > a + b + 2 > 0 == 0 && s1[5] > a + b < s1[1] == 0
[INFO] Matched <Condition>: a * b > s1[2] * s2[1][2] == 0 && (s2[0][1] - s1[2]) % a > s2[1][2] / a && s1[5] > a + b + 2 > 0 == 0 && s1[5] > a + b < s1[1] == 0
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "> is ok\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("> is ok\n");
[INFO] Matched <Statement>: printf("> is ok\n");
[INFO] Matched <BlockItem>:
printf("> is ok\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("> is ok\n");
}
[INFO] Matched <Statement>:
{
    printf("> is ok\n");
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "> has problem\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("> has problem\n");
[INFO] Matched <Statement>: printf("> has problem\n");
[INFO] Matched <BlockItem>:
printf("> has problem\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("> has problem\n");
}
[INFO] Matched <Statement>:
{
    printf("> has problem\n");
}
[INFO] Matched <IfStatement>:
if (a * b > s1[2] * s2[1][2] == 0 && (s2[0][1] - s1[2]) % a > s2[1][2] / a && s1[5] > a + b + 2 > 0 == 0 && s1[5] > a + b < s1[1] == 0) {
    printf("> is ok\n");
} else {
    printf("> has problem\n");
}
[INFO] Matched <Statement>:
if (a * b > s1[2] * s2[1][2] == 0 && (s2[0][1] - s1[2]) % a > s2[1][2] / a && s1[5] > a + b + 2 > 0 == 0 && s1[5] > a + b < s1[1] == 0) {
    printf("> is ok\n");
} else {
    printf("> has problem\n");
}
[INFO] Matched <BlockItem>:
if (a * b > s1[2] * s2[1][2] == 0 && (s2[0][1] - s1[2]) % a > s2[1][2] / a && s1[5] > a + b + 2 > 0 == 0 && s1[5] > a + b < s1[1] == 0) {
    printf("> is ok\n");
} else {
    printf("> has problem\n");
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <RelationalExpression>: a <= b
[INFO] Matched <EqualityExpression>: a <= b
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[1]
[INFO] Matched <PrimaryExpression>: s1[1]
[INFO] Matched <UnaryExpression>: s1[1]
[INFO] Matched <MultiplicativeExpression>: s1[1]
[INFO] Matched <AdditiveExpression>: b + s1[1]
[INFO] Matched <RelationalExpression>: a <= b + s1[1]
[INFO] Matched <EqualityExpression>: a <= b + s1[1]
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[0]
[INFO] Matched <PrimaryExpression>: s1[0]
[INFO] Matched <UnaryExpression>: s1[0]
[INFO] Matched <MultiplicativeExpression>: s1[0]
[INFO] Matched <AdditiveExpression>: s1[0]
[INFO] Matched <RelationalExpression>: a <= b <= s1[0]
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: 0
[INFO] Matched <EqualityExpression>: a <= b <= s1[0] == 0
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[2]
[INFO] Matched <PrimaryExpression>: s1[2]
[INFO] Matched <UnaryExpression>: s1[2]
[INFO] Matched <MultiplicativeExpression>: s1[2]
[INFO] Matched <AdditiveExpression>: s1[2]
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <RelationalExpression>: a <= b >= s1[2] < 1
[INFO] Matched <EqualityExpression>: a <= b >= s1[2] < 1
[INFO] Matched <LogicalAndExpression>: a <= b && a <= b + s1[1] && a <= b <= s1[0] == 0 && a <= b >= s1[2] < 1
[INFO] Matched <LogicalOrExpression>: a <= b && a <= b + s1[1] && a <= b <= s1[0] == 0 && a <= b >= s1[2] < 1
[INFO] Matched <Condition>: a <= b && a <= b + s1[1] && a <= b <= s1[0] == 0 && a <= b >= s1[2] < 1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "<= is ok\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("<= is ok\n");
[INFO] Matched <Statement>: printf("<= is ok\n");
[INFO] Matched <BlockItem>:
printf("<= is ok\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("<= is ok\n");
}
[INFO] Matched <Statement>:
{
    printf("<= is ok\n");
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "<= has problem\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("<= has problem\n");
[INFO] Matched <Statement>: printf("<= has problem\n");
[INFO] Matched <BlockItem>:
printf("<= has problem\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("<= has problem\n");
}
[INFO] Matched <Statement>:
{
    printf("<= has problem\n");
}
[INFO] Matched <IfStatement>:
if (a <= b && a <= b + s1[1] && a <= b <= s1[0] == 0 && a <= b >= s1[2] < 1) {
    printf("<= is ok\n");
} else {
    printf("<= has problem\n");
}
[INFO] Matched <Statement>:
if (a <= b && a <= b + s1[1] && a <= b <= s1[0] == 0 && a <= b >= s1[2] < 1) {
    printf("<= is ok\n");
} else {
    printf("<= has problem\n");
}
[INFO] Matched <BlockItem>:
if (a <= b && a <= b + s1[1] && a <= b <= s1[0] == 0 && a <= b >= s1[2] < 1) {
    printf("<= is ok\n");
} else {
    printf("<= has problem\n");
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: a + 1
[INFO] Matched <RelationalExpression>: b >= a + 1
[INFO] Matched <EqualityExpression>: b >= a + 1
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <Expression>: 4
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[4]
[INFO] Matched <PrimaryExpression>: s1[4]
[INFO] Matched <UnaryExpression>: s1[4]
[INFO] Matched <MultiplicativeExpression>: s1[4]
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[1]
[INFO] Matched <PrimaryExpression>: s1[1]
[INFO] Matched <UnaryExpression>: s1[1]
[INFO] Matched <MultiplicativeExpression>: s1[1]
[INFO] Matched <AdditiveExpression>: s1[4] + s1[1]
[INFO] Matched <RelationalExpression>: b >= s1[4] + s1[1]
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <RelationalExpression>: 1
[INFO] Matched <EqualityExpression>: b >= s1[4] + s1[1] != 1
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[1]
[INFO] Matched <PrimaryExpression>: s1[1]
[INFO] Matched <UnaryExpression>: s1[1]
[INFO] Matched <MultiplicativeExpression>: s1[1]
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: s1[1] + 1
[INFO] Matched <RelationalExpression>: a <= b >= s1[1] + 1
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: 0
[INFO] Matched <EqualityExpression>: a <= b >= s1[1] + 1 == 0
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[0]
[INFO] Matched <PrimaryExpression>: s1[0]
[INFO] Matched <UnaryExpression>: s1[0]
[INFO] Matched <MultiplicativeExpression>: s1[0]
[INFO] Matched <AdditiveExpression>: s1[0]
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[0]
[INFO] Matched <PrimaryExpression>: s1[0]
[INFO] Matched <UnaryExpression>: s1[0]
[INFO] Matched <MultiplicativeExpression>: s1[0]
[INFO] Matched <AdditiveExpression>: s1[0]
[INFO] Matched <RelationalExpression>: a >= b >= s1[0] <= s1[0]
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <RelationalExpression>: 1
[INFO] Matched <EqualityExpression>: a >= b >= s1[0] <= s1[0] != 1
[INFO] Matched <LogicalAndExpression>: b >= a + 1 && b >= s1[4] + s1[1] != 1 && a <= b >= s1[1] + 1 == 0 && a >= b >= s1[0] <= s1[0] != 1
[INFO] Matched <LogicalOrExpression>: b >= a + 1 && b >= s1[4] + s1[1] != 1 && a <= b >= s1[1] + 1 == 0 && a >= b >= s1[0] <= s1[0] != 1
[INFO] Matched <Condition>: b >= a + 1 && b >= s1[4] + s1[1] != 1 && a <= b >= s1[1] + 1 == 0 && a >= b >= s1[0] <= s1[0] != 1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: ">= is ok\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf(">= is ok\n");
[INFO] Matched <Statement>: printf(">= is ok\n");
[INFO] Matched <BlockItem>:
printf(">= is ok\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf(">= is ok\n");
}
[INFO] Matched <Statement>:
{
    printf(">= is ok\n");
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: ">= has problem\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf(">= has problem\n");
[INFO] Matched <Statement>: printf(">= has problem\n");
[INFO] Matched <BlockItem>:
printf(">= has problem\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf(">= has problem\n");
}
[INFO] Matched <Statement>:
{
    printf(">= has problem\n");
}
[INFO] Matched <IfStatement>:
if (b >= a + 1 && b >= s1[4] + s1[1] != 1 && a <= b >= s1[1] + 1 == 0 && a >= b >= s1[0] <= s1[0] != 1) {
    printf(">= is ok\n");
} else {
    printf(">= has problem\n");
}
[INFO] Matched <Statement>:
if (b >= a + 1 && b >= s1[4] + s1[1] != 1 && a <= b >= s1[1] + 1 == 0 && a >= b >= s1[0] <= s1[0] != 1) {
    printf(">= is ok\n");
} else {
    printf(">= has problem\n");
}
[INFO] Matched <BlockItem>:
if (b >= a + 1 && b >= s1[4] + s1[1] != 1 && a <= b >= s1[1] + 1 == 0 && a >= b >= s1[0] <= s1[0] != 1) {
    printf(">= is ok\n");
} else {
    printf(">= has problem\n");
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <RelationalExpression>: a
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <RelationalExpression>: b
[INFO] Matched <EqualityExpression>: a != b
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <RelationalExpression>: a
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <RelationalExpression>: b
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: 0
[INFO] Matched <EqualityExpression>: a == b == 0
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <RelationalExpression>: a > b
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <RelationalExpression>: a < b
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <RelationalExpression>: 1
[INFO] Matched <EqualityExpression>: a > b == a < b != 1
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <RelationalExpression>: a >= b
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[2]
[INFO] Matched <PrimaryExpression>: s1[2]
[INFO] Matched <UnaryExpression>: s1[2]
[INFO] Matched <MultiplicativeExpression>: s1[2]
[INFO] Matched <AdditiveExpression>: s1[2]
[INFO] Matched <RelationalExpression>: s1[2]
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[0]
[INFO] Matched <PrimaryExpression>: s1[0]
[INFO] Matched <UnaryExpression>: s1[0]
[INFO] Matched <MultiplicativeExpression>: s1[0]
[INFO] Matched <AdditiveExpression>: s1[0]
[INFO] Matched <RelationalExpression>: s1[0]
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <Expression>: 4
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[4]
[INFO] Matched <PrimaryExpression>: s1[4]
[INFO] Matched <UnaryExpression>: s1[4]
[INFO] Matched <MultiplicativeExpression>: s1[4]
[INFO] Matched <AdditiveExpression>: s1[4]
[INFO] Matched <RelationalExpression>: s1[4]
[INFO] Matched <EqualityExpression>: a >= b == s1[2] != s1[0] != s1[4]
[INFO] Matched <LogicalAndExpression>: a != b && a == b == 0 && a > b == a < b != 1 && a >= b == s1[2] != s1[0] != s1[4]
[INFO] Matched <LogicalOrExpression>: a != b && a == b == 0 && a > b == a < b != 1 && a >= b == s1[2] != s1[0] != s1[4]
[INFO] Matched <Condition>: a != b && a == b == 0 && a > b == a < b != 1 && a >= b == s1[2] != s1[0] != s1[4]
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "== != is ok\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("== != is ok\n");
[INFO] Matched <Statement>: printf("== != is ok\n");
[INFO] Matched <BlockItem>:
printf("== != is ok\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("== != is ok\n");
}
[INFO] Matched <Statement>:
{
    printf("== != is ok\n");
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "== != has problem\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("== != has problem\n");
[INFO] Matched <Statement>: printf("== != has problem\n");
[INFO] Matched <BlockItem>:
printf("== != has problem\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("== != has problem\n");
}
[INFO] Matched <Statement>:
{
    printf("== != has problem\n");
}
[INFO] Matched <IfStatement>:
if (a != b && a == b == 0 && a > b == a < b != 1 && a >= b == s1[2] != s1[0] != s1[4]) {
    printf("== != is ok\n");
} else {
    printf("== != has problem\n");
}
[INFO] Matched <Statement>:
if (a != b && a == b == 0 && a > b == a < b != 1 && a >= b == s1[2] != s1[0] != s1[4]) {
    printf("== != is ok\n");
} else {
    printf("== != has problem\n");
}
[INFO] Matched <BlockItem>:
if (a != b && a == b == 0 && a > b == a < b != 1 && a >= b == s1[2] != s1[0] != s1[4]) {
    printf("== != is ok\n");
} else {
    printf("== != has problem\n");
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[3]
[INFO] Matched <PrimaryExpression>: s1[3]
[INFO] Matched <UnaryExpression>: s1[3]
[INFO] Matched <MultiplicativeExpression>: s1[3]
[INFO] Matched <AdditiveExpression>: s1[3]
[INFO] Matched <RelationalExpression>: s1[3]
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s2
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s2[0][1]
[INFO] Matched <PrimaryExpression>: s2[0][1]
[INFO] Matched <UnaryExpression>: s2[0][1]
[INFO] Matched <MultiplicativeExpression>: s2[0][1]
[INFO] Matched <AdditiveExpression>: s2[0][1]
[INFO] Matched <RelationalExpression>: s2[0][1]
[INFO] Matched <EqualityExpression>: s1[3] == s2[0][1]
[INFO] Matched <LogicalAndExpression>: s1[3] == s2[0][1]
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <RelationalExpression>: a >= b
[INFO] Matched <EqualityExpression>: a >= b
[INFO] Matched <LogicalAndExpression>: a >= b
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 7
[INFO] Matched <Number>: 7
[INFO] Matched <PrimaryExpression>: 7
[INFO] Matched <UnaryExpression>: 7
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 7 % 4
[INFO] Matched <AdditiveExpression>: a + 7 % 4
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: b * 3
[INFO] Matched <AdditiveExpression>: b * 3
[INFO] Matched <RelationalExpression>: a + 7 % 4 < b * 3
[INFO] Matched <EqualityExpression>: a + 7 % 4 < b * 3
[INFO] Matched <LogicalAndExpression>: a + 7 % 4 < b * 3
[INFO] Matched <LogicalOrExpression>: s1[3] == s2[0][1] || a >= b || a + 7 % 4 < b * 3
[INFO] Matched <Condition>: s1[3] == s2[0][1] || a >= b || a + 7 % 4 < b * 3
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "or is ok\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("or is ok\n");
[INFO] Matched <Statement>: printf("or is ok\n");
[INFO] Matched <BlockItem>:
printf("or is ok\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("or is ok\n");
}
[INFO] Matched <Statement>:
{
    printf("or is ok\n");
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "or has problem\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("or has problem\n");
[INFO] Matched <Statement>: printf("or has problem\n");
[INFO] Matched <BlockItem>:
printf("or has problem\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("or has problem\n");
}
[INFO] Matched <Statement>:
{
    printf("or has problem\n");
}
[INFO] Matched <IfStatement>:
if (s1[3] == s2[0][1] || a >= b || a + 7 % 4 < b * 3) {
    printf("or is ok\n");
} else {
    printf("or has problem\n");
}
[INFO] Matched <Statement>:
if (s1[3] == s2[0][1] || a >= b || a + 7 % 4 < b * 3) {
    printf("or is ok\n");
} else {
    printf("or has problem\n");
}
[INFO] Matched <BlockItem>:
if (s1[3] == s2[0][1] || a >= b || a + 7 % 4 < b * 3) {
    printf("or is ok\n");
} else {
    printf("or has problem\n");
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: a / 2
[INFO] Matched <AdditiveExpression>: a / 2
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: b - 3
[INFO] Matched <RelationalExpression>: a / 2 < b - 3
[INFO] Matched <EqualityExpression>: a / 2 < b - 3
[INFO] Matched <LogicalAndExpression>: a / 2 < b - 3
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[0]
[INFO] Matched <PrimaryExpression>: s1[0]
[INFO] Matched <UnaryExpression>: s1[0]
[INFO] Matched <MultiplicativeExpression>: s1[0]
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: s1[0] + 1
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <Expression>: 5
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[5]
[INFO] Matched <PrimaryExpression>: s1[5]
[INFO] Matched <UnaryExpression>: s1[5]
[INFO] Matched <MultiplicativeExpression>: s1[5]
[INFO] Matched <AdditiveExpression>: s1[5]
[INFO] Matched <RelationalExpression>: s1[0] + 1 > s1[5]
[INFO] Matched <EqualityExpression>: s1[0] + 1 > s1[5]
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <Expression>: 5
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[5]
[INFO] Matched <PrimaryExpression>: s1[5]
[INFO] Matched <UnaryExpression>: s1[5]
[INFO] Matched <MultiplicativeExpression>: s1[5]
[INFO] Matched <AdditiveExpression>: s1[5]
[INFO] Matched <RelationalExpression>: b > s1[5]
[INFO] Matched <EqualityExpression>: b > s1[5]
[INFO] Matched <LogicalAndExpression>: s1[0] + 1 > s1[5] && b > s1[5]
[INFO] Matched <LogicalOrExpression>: a / 2 < b - 3 || s1[0] + 1 > s1[5] && b > s1[5]
[INFO] Matched <Condition>: a / 2 < b - 3 || s1[0] + 1 > s1[5] && b > s1[5]
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "the priority of and/or is ok\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("the priority of and/or is ok\n");
[INFO] Matched <Statement>: printf("the priority of and/or is ok\n");
[INFO] Matched <BlockItem>:
printf("the priority of and/or is ok\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("the priority of and/or is ok\n");
}
[INFO] Matched <Statement>:
{
    printf("the priority of and/or is ok\n");
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "the priority of and/or has problem\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("the priority of and/or has problem\n");
[INFO] Matched <Statement>: printf("the priority of and/or has problem\n");
[INFO] Matched <BlockItem>:
printf("the priority of and/or has problem\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("the priority of and/or has problem\n");
}
[INFO] Matched <Statement>:
{
    printf("the priority of and/or has problem\n");
}
[INFO] Matched <IfStatement>:
if (a / 2 < b - 3 || s1[0] + 1 > s1[5] && b > s1[5]) {
    printf("the priority of and/or is ok\n");
} else {
    printf("the priority of and/or has problem\n");
}
[INFO] Matched <Statement>:
if (a / 2 < b - 3 || s1[0] + 1 > s1[5] && b > s1[5]) {
    printf("the priority of and/or is ok\n");
} else {
    printf("the priority of and/or has problem\n");
}
[INFO] Matched <BlockItem>:
if (a / 2 < b - 3 || s1[0] + 1 > s1[5] && b > s1[5]) {
    printf("the priority of and/or is ok\n");
} else {
    printf("the priority of and/or has problem\n");
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <RelationalExpression>: a < b
[INFO] Matched <EqualityExpression>: a < b
[INFO] Matched <LogicalAndExpression>: a < b
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <UnaryOperatedExpression>: +a
[INFO] Matched <UnaryExpression>: +a
[INFO] Matched <MultiplicativeExpression>: +a
[INFO] Matched <AdditiveExpression>: +a
[INFO] Matched <RelationalExpression>: +a
[INFO] Matched <EqualityExpression>: +a
[INFO] Matched <LogicalAndExpression>: +a
[INFO] Matched <LogicalOrExpression>: a < b || +a
[INFO] Matched <Condition>: a < b || +a
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: a + 1
[INFO] Matched <Expression>: a + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = a + 1;
[INFO] Matched <Statement>: a = a + 1;
[INFO] Matched <BlockItem>:
a = a + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[0]
[INFO] Matched <PrimaryExpression>: s1[0]
[INFO] Matched <UnaryExpression>: s1[0]
[INFO] Matched <MultiplicativeExpression>: s1[0]
[INFO] Matched <AdditiveExpression>: s1[0]
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: s1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: s1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: s1[1]
[INFO] Matched <PrimaryExpression>: s1[1]
[INFO] Matched <UnaryExpression>: s1[1]
[INFO] Matched <MultiplicativeExpression>: s1[1]
[INFO] Matched <AdditiveExpression>: s1[1]
[INFO] Matched <RelationalExpression>: s1[0] < s1[1]
[INFO] Matched <EqualityExpression>: s1[0] < s1[1]
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <UnaryOperatedExpression>: +b
[INFO] Matched <UnaryExpression>: +b
[INFO] Matched <MultiplicativeExpression>: +b
[INFO] Matched <AdditiveExpression>: +b
[INFO] Matched <RelationalExpression>: +b
[INFO] Matched <EqualityExpression>: +b
[INFO] Matched <LogicalAndExpression>: s1[0] < s1[1] && +b
[INFO] Matched <LogicalOrExpression>: s1[0] < s1[1] && +b
[INFO] Matched <Condition>: s1[0] < s1[1] && +b
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <Expression>: b
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: b + 1
[INFO] Matched <Expression>: b + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: b = b + 1;
[INFO] Matched <Statement>: b = b + 1;
[INFO] Matched <BlockItem>:
b = b + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d %d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <Expression>: b
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d %d\n", a, b);
[INFO] Matched <Statement>: printf("%d %d\n", a, b);
[INFO] Matched <BlockItem>:
printf("%d %d\n", a, b);
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    b = b + 1;
    printf("%d %d\n", a, b);
}
[INFO] Matched <Statement>:
{
    b = b + 1;
    printf("%d %d\n", a, b);
}
[INFO] Matched <IfStatement>:
if (s1[0] < s1[1] && +b) {
    b = b + 1;
    printf("%d %d\n", a, b);
}  
[INFO] Matched <Statement>:
if (s1[0] < s1[1] && +b) {
    b = b + 1;
    printf("%d %d\n", a, b);
}  
[INFO] Matched <BlockItem>:
if (s1[0] < s1[1] && +b) {
    b = b + 1;
    printf("%d %d\n", a, b);
}  
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a = a + 1;
    if (s1[0] < s1[1] && +b) {
        b = b + 1;
        printf("%d %d\n", a, b);
    }  
}
[INFO] Matched <Statement>:
{
    a = a + 1;
    if (s1[0] < s1[1] && +b) {
        b = b + 1;
        printf("%d %d\n", a, b);
    }  
}
[INFO] Matched <IfStatement>:
if (a < b || +a) {
    a = a + 1;
    if (s1[0] < s1[1] && +b) {
        b = b + 1;
        printf("%d %d\n", a, b);
    }  
}  
[INFO] Matched <Statement>:
if (a < b || +a) {
    a = a + 1;
    if (s1[0] < s1[1] && +b) {
        b = b + 1;
        printf("%d %d\n", a, b);
    }  
}  
[INFO] Matched <BlockItem>:
if (a < b || +a) {
    a = a + 1;
    if (s1[0] < s1[1] && +b) {
        b = b + 1;
        printf("%d %d\n", a, b);
    }  
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int a = 5;
    int b = 6;
    int s1[6] = {0, 1, 2, 3, 6, 12};
    int s2[2][3] = {{10, 11, 12}, {13, 14, 15}};
    if (!s1[0] == 1 && !(s1[0] * 2) && !0) {
        printf("! is ok\n");
    } else {
        printf("! has problem\n");
    }
    if (a + b < s1[5] && s1[3] - s1[0] < s2[1][2] / a == 0 && b < a + b < s1[0] == 0 && 0 == b < a + b < s1[2] > s1[1]) {
        printf("< is ok\n");
    } else {
        printf("< has problem\n");
    }
    if (a * b > s1[2] * s2[1][2] == 0 && (s2[0][1] - s1[2]) % a > s2[1][2] / a && s1[5] > a + b + 2 > 0 == 0 && s1[5] > a + b < s1[1] == 0) {
        printf("> is ok\n");
    } else {
        printf("> has problem\n");
    }
    if (a <= b && a <= b + s1[1] && a <= b <= s1[0] == 0 && a <= b >= s1[2] < 1) {
        printf("<= is ok\n");
    } else {
        printf("<= has problem\n");
    }
    if (b >= a + 1 && b >= s1[4] + s1[1] != 1 && a <= b >= s1[1] + 1 == 0 && a >= b >= s1[0] <= s1[0] != 1) {
        printf(">= is ok\n");
    } else {
        printf(">= has problem\n");
    }
    if (a != b && a == b == 0 && a > b == a < b != 1 && a >= b == s1[2] != s1[0] != s1[4]) {
        printf("== != is ok\n");
    } else {
        printf("== != has problem\n");
    }
    if (s1[3] == s2[0][1] || a >= b || a + 7 % 4 < b * 3) {
        printf("or is ok\n");
    } else {
        printf("or has problem\n");
    }
    if (a / 2 < b - 3 || s1[0] + 1 > s1[5] && b > s1[5]) {
        printf("the priority of and/or is ok\n");
    } else {
        printf("the priority of and/or has problem\n");
    }
    if (a < b || +a) {
        a = a + 1;
        if (s1[0] < s1[1] && +b) {
            b = b + 1;
            printf("%d %d\n", a, b);
        }  
    }  
    return 0;
}
[INFO] Matched <MainFuncDefinition>:
int main() {
    int a = 5;
    int b = 6;
    int s1[6] = {0, 1, 2, 3, 6, 12};
    int s2[2][3] = {{10, 11, 12}, {13, 14, 15}};
    if (!s1[0] == 1 && !(s1[0] * 2) && !0) {
        printf("! is ok\n");
    } else {
        printf("! has problem\n");
    }
    if (a + b < s1[5] && s1[3] - s1[0] < s2[1][2] / a == 0 && b < a + b < s1[0] == 0 && 0 == b < a + b < s1[2] > s1[1]) {
        printf("< is ok\n");
    } else {
        printf("< has problem\n");
    }
    if (a * b > s1[2] * s2[1][2] == 0 && (s2[0][1] - s1[2]) % a > s2[1][2] / a && s1[5] > a + b + 2 > 0 == 0 && s1[5] > a + b < s1[1] == 0) {
        printf("> is ok\n");
    } else {
        printf("> has problem\n");
    }
    if (a <= b && a <= b + s1[1] && a <= b <= s1[0] == 0 && a <= b >= s1[2] < 1) {
        printf("<= is ok\n");
    } else {
        printf("<= has problem\n");
    }
    if (b >= a + 1 && b >= s1[4] + s1[1] != 1 && a <= b >= s1[1] + 1 == 0 && a >= b >= s1[0] <= s1[0] != 1) {
        printf(">= is ok\n");
    } else {
        printf(">= has problem\n");
    }
    if (a != b && a == b == 0 && a > b == a < b != 1 && a >= b == s1[2] != s1[0] != s1[4]) {
        printf("== != is ok\n");
    } else {
        printf("== != has problem\n");
    }
    if (s1[3] == s2[0][1] || a >= b || a + 7 % 4 < b * 3) {
        printf("or is ok\n");
    } else {
        printf("or has problem\n");
    }
    if (a / 2 < b - 3 || s1[0] + 1 > s1[5] && b > s1[5]) {
        printf("the priority of and/or is ok\n");
    } else {
        printf("the priority of and/or has problem\n");
    }
    if (a < b || +a) {
        a = a + 1;
        if (s1[0] < s1[1] && +b) {
            b = b + 1;
            printf("%d %d\n", a, b);
        }  
    }  
    return 0;
}
[INFO] Matched <CompileUnit>:

int main() {
    int a = 5;
    int b = 6;
    int s1[6] = {0, 1, 2, 3, 6, 12};
    int s2[2][3] = {{10, 11, 12}, {13, 14, 15}};
    if (!s1[0] == 1 && !(s1[0] * 2) && !0) {
        printf("! is ok\n");
    } else {
        printf("! has problem\n");
    }
    if (a + b < s1[5] && s1[3] - s1[0] < s2[1][2] / a == 0 && b < a + b < s1[0] == 0 && 0 == b < a + b < s1[2] > s1[1]) {
        printf("< is ok\n");
    } else {
        printf("< has problem\n");
    }
    if (a * b > s1[2] * s2[1][2] == 0 && (s2[0][1] - s1[2]) % a > s2[1][2] / a && s1[5] > a + b + 2 > 0 == 0 && s1[5] > a + b < s1[1] == 0) {
        printf("> is ok\n");
    } else {
        printf("> has problem\n");
    }
    if (a <= b && a <= b + s1[1] && a <= b <= s1[0] == 0 && a <= b >= s1[2] < 1) {
        printf("<= is ok\n");
    } else {
        printf("<= has problem\n");
    }
    if (b >= a + 1 && b >= s1[4] + s1[1] != 1 && a <= b >= s1[1] + 1 == 0 && a >= b >= s1[0] <= s1[0] != 1) {
        printf(">= is ok\n");
    } else {
        printf(">= has problem\n");
    }
    if (a != b && a == b == 0 && a > b == a < b != 1 && a >= b == s1[2] != s1[0] != s1[4]) {
        printf("== != is ok\n");
    } else {
        printf("== != has problem\n");
    }
    if (s1[3] == s2[0][1] || a >= b || a + 7 % 4 < b * 3) {
        printf("or is ok\n");
    } else {
        printf("or has problem\n");
    }
    if (a / 2 < b - 3 || s1[0] + 1 > s1[5] && b > s1[5]) {
        printf("the priority of and/or is ok\n");
    } else {
        printf("the priority of and/or has problem\n");
    }
    if (a < b || +a) {
        a = a + 1;
        if (s1[0] < s1[1] && +b) {
            b = b + 1;
            printf("%d %d\n", a, b);
        }  
    }  
    return 0;
}
[INFO] Test 8
[INFO] Matching <CompileUnit>
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: a1
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Matched <ConstDefinition>.a1 = 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: a2
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <UnaryOperatedExpression>: +3
[INFO] Matched <UnaryExpression>: +3
[INFO] Matched <MultiplicativeExpression>: +3
[INFO] Matched <AdditiveExpression>: +3
[INFO] Matched <ConstExpression>: +3
[INFO] Matched <ScalarConstInitValue>: +3
[INFO] Matched <ConstInitValue>: +3
[INFO] Matched <ConstDefinition>.a2 = +3
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: a3
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 8
[INFO] Matched <Number>: 8
[INFO] Matched <PrimaryExpression>: 8
[INFO] Matched <UnaryExpression>: 8
[INFO] Matched <MultiplicativeExpression>: 8
[INFO] Matched <AdditiveExpression>: 8
[INFO] Matched <ConstExpression>: 8
[INFO] Matched <ScalarConstInitValue>: 8
[INFO] Matched <ConstInitValue>: 8
[INFO] Matched <ConstDefinition>.a3 = 8
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int a1 = 1, a2 = +3, a3 = 8;
[INFO] Matched <Declaration>: const int a1 = 1, a2 = +3, a3 = 8;
[INFO] Consumed Token: int
[INFO] Consumed Token: b1
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: b1
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: b1
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 0 + 2
[INFO] Matched <Expression>: 0 + 2
[INFO] Matched <ScalarVarInitValue>: 0 + 2
[INFO] Matched <VarInitValue>: 0 + 2
[INFO] Matched <VarDefinition>: b1 = 0 + 2
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: b2
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <UnaryOperatedExpression>: -5
[INFO] Matched <UnaryExpression>: -5
[INFO] Matched <MultiplicativeExpression>: -5
[INFO] Matched <AdditiveExpression>: -5
[INFO] Matched <Expression>: -5
[INFO] Matched <ScalarVarInitValue>: -5
[INFO] Matched <VarInitValue>: -5
[INFO] Matched <VarDefinition>: b2 = -5
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: b3
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <UnaryOperatedExpression>: +6
[INFO] Matched <UnaryExpression>: +6
[INFO] Matched <MultiplicativeExpression>: +6
[INFO] Matched <AdditiveExpression>: +6
[INFO] Matched <Expression>: +6
[INFO] Matched <ScalarVarInitValue>: +6
[INFO] Matched <VarInitValue>: +6
[INFO] Matched <VarDefinition>: b3 = +6
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int b1 = 0 + 2, b2 = -5, b3 = +6;
[INFO] Matched <Declaration>: int b1 = 0 + 2, b2 = -5, b3 = +6;
[INFO] Consumed Token: int
[INFO] Lexer rolling back...
[INFO] Consumed Token: int
[INFO] Lexer rolling back...
[INFO] Matching <MainFuncDefinition>.
[INFO] Consumed Token: int
[INFO] Consumed Token: main
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("\n");
[INFO] Matched <Statement>: printf("\n");
[INFO] Matched <BlockItem>:
printf("\n");
[INFO] Consumed Token: int
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: n
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <Expression>: 10
[INFO] Matched <ScalarVarInitValue>: 10
[INFO] Matched <VarInitValue>: 10
[INFO] Matched <VarDefinition>: n = 10
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int n = 10;
[INFO] Matched <Declaration>: int n = 10;
[INFO] Matched <BlockItem>:
int n = 10;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Matched <RelationalExpression>: n
[INFO] Matched <EqualityExpression>: n
[INFO] Matched <LogicalAndExpression>: n
[INFO] Matched <LogicalOrExpression>: n
[INFO] Matched <Condition>: n
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Matched <Expression>: n
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: n - 1
[INFO] Matched <Expression>: n - 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: n = n - 1;
[INFO] Matched <Statement>: n = n - 1;
[INFO] Matched <BlockItem>:
n = n - 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b3
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b3
[INFO] Matched <LeftValue>: b3
[INFO] Matched <PrimaryExpression>: b3
[INFO] Matched <UnaryExpression>: b3
[INFO] Matched <MultiplicativeExpression>: b3
[INFO] Matched <AdditiveExpression>: b3
[INFO] Matched <RelationalExpression>: n < b3
[INFO] Matched <EqualityExpression>: n < b3
[INFO] Matched <LogicalAndExpression>: n < b3
[INFO] Matched <LogicalOrExpression>: n < b3
[INFO] Matched <Condition>: n < b3
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ContinueStatement>.
[INFO] Consumed Token: continue
[INFO] Consumed Token: ;
[INFO] Matched <ContinueStatement>: continue;
[INFO] Matched <Statement>: continue;
[INFO] Matched <BlockItem>:
continue;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "Continue is error!\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("Continue is error!\n");
[INFO] Matched <Statement>: printf("Continue is error!\n");
[INFO] Matched <BlockItem>:
printf("Continue is error!\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    continue;
    printf("Continue is error!\n");
}
[INFO] Matched <Statement>:
{
    continue;
    printf("Continue is error!\n");
}
[INFO] Matched <IfStatement>:
if (n < b3) {
    continue;
    printf("Continue is error!\n");
}  
[INFO] Matched <Statement>:
if (n < b3) {
    continue;
    printf("Continue is error!\n");
}  
[INFO] Matched <BlockItem>:
if (n < b3) {
    continue;
    printf("Continue is error!\n");
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <RelationalExpression>: n < a1
[INFO] Matched <EqualityExpression>: n < a1
[INFO] Matched <LogicalAndExpression>: n < a1
[INFO] Matched <LogicalOrExpression>: n < a1
[INFO] Matched <Condition>: n < a1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "Break is error!And < is error!\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("Break is error!And < is error!\n");
[INFO] Matched <Statement>: printf("Break is error!And < is error!\n");
[INFO] Matched <BlockItem>:
printf("Break is error!And < is error!\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    break;
    printf("Break is error!And < is error!\n");
}
[INFO] Matched <Statement>:
{
    break;
    printf("Break is error!And < is error!\n");
}
[INFO] Matched <IfStatement>:
if (n < a1) {
    break;
    printf("Break is error!And < is error!\n");
}  
[INFO] Matched <Statement>:
if (n < a1) {
    break;
    printf("Break is error!And < is error!\n");
}  
[INFO] Matched <BlockItem>:
if (n < a1) {
    break;
    printf("Break is error!And < is error!\n");
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Matched <RelationalExpression>: n
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a2
[INFO] Matched <LeftValue>: a2
[INFO] Matched <PrimaryExpression>: a2
[INFO] Matched <UnaryExpression>: a2
[INFO] Matched <MultiplicativeExpression>: a2
[INFO] Matched <AdditiveExpression>: a2
[INFO] Matched <RelationalExpression>: a2
[INFO] Matched <EqualityExpression>: n == a2
[INFO] Matched <LogicalAndExpression>: n == a2
[INFO] Matched <LogicalOrExpression>: n == a2
[INFO] Matched <Condition>: n == a2
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "+ is correct!\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("+ is correct!\n");
[INFO] Matched <Statement>: printf("+ is correct!\n");
[INFO] Matched <BlockItem>:
printf("+ is correct!\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("+ is correct!\n");
}
[INFO] Matched <Statement>:
{
    printf("+ is correct!\n");
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "+ is error!\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("+ is error!\n");
[INFO] Matched <Statement>: printf("+ is error!\n");
[INFO] Matched <BlockItem>:
printf("+ is error!\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("+ is error!\n");
}
[INFO] Matched <Statement>:
{
    printf("+ is error!\n");
}
[INFO] Matched <IfStatement>:
if (n == a2) {
    printf("+ is correct!\n");
} else {
    printf("+ is error!\n");
}
[INFO] Matched <Statement>:
if (n == a2) {
    printf("+ is correct!\n");
} else {
    printf("+ is error!\n");
}
[INFO] Matched <BlockItem>:
if (n == a2) {
    printf("+ is correct!\n");
} else {
    printf("+ is error!\n");
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Matched <RelationalExpression>: n
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b1
[INFO] Matched <LeftValue>: b1
[INFO] Matched <PrimaryExpression>: b1
[INFO] Matched <UnaryExpression>: b1
[INFO] Matched <MultiplicativeExpression>: b1
[INFO] Matched <AdditiveExpression>: b1
[INFO] Matched <RelationalExpression>: b1
[INFO] Matched <EqualityExpression>: n == b1
[INFO] Matched <LogicalAndExpression>: n == b1
[INFO] Matched <LogicalOrExpression>: n == b1
[INFO] Matched <Condition>: n == b1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    break;
}
[INFO] Matched <Statement>:
{
    break;
}
[INFO] Matched <IfStatement>:
if (n == b1) {
    break;
}  
[INFO] Matched <Statement>:
if (n == b1) {
    break;
}  
[INFO] Matched <BlockItem>:
if (n == b1) {
    break;
}  
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    n = n - 1;
    if (n < b3) {
        continue;
        printf("Continue is error!\n");
    }  
    if (n < a1) {
        break;
        printf("Break is error!And < is error!\n");
    }  
    if (n == a2) {
        printf("+ is correct!\n");
    } else {
        printf("+ is error!\n");
    }
    if (n == b1) {
        break;
    }  
}
[INFO] Matched <Statement>:
{
    n = n - 1;
    if (n < b3) {
        continue;
        printf("Continue is error!\n");
    }  
    if (n < a1) {
        break;
        printf("Break is error!And < is error!\n");
    }  
    if (n == a2) {
        printf("+ is correct!\n");
    } else {
        printf("+ is error!\n");
    }
    if (n == b1) {
        break;
    }  
}
[INFO] Matched <ForStatementSelection>:
for (; n; ) {
    n = n - 1;
    if (n < b3) {
        continue;
        printf("Continue is error!\n");
    }  
    if (n < a1) {
        break;
        printf("Break is error!And < is error!\n");
    }  
    if (n == a2) {
        printf("+ is correct!\n");
    } else {
        printf("+ is error!\n");
    }
    if (n == b1) {
        break;
    }  
}
[INFO] Matched <Statement>:
for (; n; ) {
    n = n - 1;
    if (n < b3) {
        continue;
        printf("Continue is error!\n");
    }  
    if (n < a1) {
        break;
        printf("Break is error!And < is error!\n");
    }  
    if (n == a2) {
        printf("+ is correct!\n");
    } else {
        printf("+ is error!\n");
    }
    if (n == b1) {
        break;
    }  
}
[INFO] Matched <BlockItem>:
for (; n; ) {
    n = n - 1;
    if (n < b3) {
        continue;
        printf("Continue is error!\n");
    }  
    if (n < a1) {
        break;
        printf("Break is error!And < is error!\n");
    }  
    if (n == a2) {
        printf("+ is correct!\n");
    } else {
        printf("+ is error!\n");
    }
    if (n == b1) {
        break;
    }  
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Matched <RelationalExpression>: n
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b1
[INFO] Matched <LeftValue>: b1
[INFO] Matched <PrimaryExpression>: b1
[INFO] Matched <UnaryExpression>: b1
[INFO] Matched <MultiplicativeExpression>: b1
[INFO] Matched <AdditiveExpression>: b1
[INFO] Matched <RelationalExpression>: b1
[INFO] Matched <EqualityExpression>: n != b1
[INFO] Matched <LogicalAndExpression>: n != b1
[INFO] Matched <LogicalOrExpression>: n != b1
[INFO] Matched <Condition>: n != b1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Matched <RelationalExpression>: n
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: 0
[INFO] Matched <EqualityExpression>: n == 0
[INFO] Matched <LogicalAndExpression>: n == 0
[INFO] Matched <LogicalOrExpression>: n == 0
[INFO] Matched <Condition>: n == 0
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "Break is error!\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("Break is error!\n");
[INFO] Matched <Statement>: printf("Break is error!\n");
[INFO] Matched <BlockItem>:
printf("Break is error!\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("Break is error!\n");
}
[INFO] Matched <Statement>:
{
    printf("Break is error!\n");
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "Continue is error!\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("Continue is error!\n");
[INFO] Matched <Statement>: printf("Continue is error!\n");
[INFO] Matched <BlockItem>:
printf("Continue is error!\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("Continue is error!\n");
}
[INFO] Matched <Statement>:
{
    printf("Continue is error!\n");
}
[INFO] Matched <IfStatement>:
if (n == 0) {
    printf("Break is error!\n");
} else {
    printf("Continue is error!\n");
}
[INFO] Matched <Statement>:
if (n == 0) {
    printf("Break is error!\n");
} else {
    printf("Continue is error!\n");
}
[INFO] Matched <BlockItem>:
if (n == 0) {
    printf("Break is error!\n");
} else {
    printf("Continue is error!\n");
}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (n == 0) {
        printf("Break is error!\n");
    } else {
        printf("Continue is error!\n");
    }
}
[INFO] Matched <Statement>:
{
    if (n == 0) {
        printf("Break is error!\n");
    } else {
        printf("Continue is error!\n");
    }
}
[INFO] Matched <IfStatement>:
if (n != b1) {
    if (n == 0) {
        printf("Break is error!\n");
    } else {
        printf("Continue is error!\n");
    }
}  
[INFO] Matched <Statement>:
if (n != b1) {
    if (n == 0) {
        printf("Break is error!\n");
    } else {
        printf("Continue is error!\n");
    }
}  
[INFO] Matched <BlockItem>:
if (n != b1) {
    if (n == 0) {
        printf("Break is error!\n");
    } else {
        printf("Continue is error!\n");
    }
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "a1+b1 is %d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b1
[INFO] Matched <LeftValue>: b1
[INFO] Matched <PrimaryExpression>: b1
[INFO] Matched <UnaryExpression>: b1
[INFO] Matched <MultiplicativeExpression>: b1
[INFO] Matched <AdditiveExpression>: a1 + b1
[INFO] Matched <Expression>: a1 + b1
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("a1+b1 is %d\n", a1 + b1);
[INFO] Matched <Statement>: printf("a1+b1 is %d\n", a1 + b1);
[INFO] Matched <BlockItem>:
printf("a1+b1 is %d\n", a1 + b1);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "a2+b2 is %d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a2
[INFO] Matched <LeftValue>: a2
[INFO] Matched <PrimaryExpression>: a2
[INFO] Matched <UnaryExpression>: a2
[INFO] Matched <MultiplicativeExpression>: a2
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b2
[INFO] Matched <LeftValue>: b2
[INFO] Matched <PrimaryExpression>: b2
[INFO] Matched <UnaryExpression>: b2
[INFO] Matched <MultiplicativeExpression>: b2
[INFO] Matched <AdditiveExpression>: a2 + b2
[INFO] Matched <Expression>: a2 + b2
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("a2+b2 is %d\n", a2 + b2);
[INFO] Matched <Statement>: printf("a2+b2 is %d\n", a2 + b2);
[INFO] Matched <BlockItem>:
printf("a2+b2 is %d\n", a2 + b2);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("\n");
    int n = 10;
    for (; n; ) {
        n = n - 1;
        if (n < b3) {
            continue;
            printf("Continue is error!\n");
        }  
        if (n < a1) {
            break;
            printf("Break is error!And < is error!\n");
        }  
        if (n == a2) {
            printf("+ is correct!\n");
        } else {
            printf("+ is error!\n");
        }
        if (n == b1) {
            break;
        }  
    }
    if (n != b1) {
        if (n == 0) {
            printf("Break is error!\n");
        } else {
            printf("Continue is error!\n");
        }
    }  
    printf("a1+b1 is %d\n", a1 + b1);
    printf("a2+b2 is %d\n", a2 + b2);
    return 0;
}
[INFO] Matched <MainFuncDefinition>:
int main() {
    printf("\n");
    int n = 10;
    for (; n; ) {
        n = n - 1;
        if (n < b3) {
            continue;
            printf("Continue is error!\n");
        }  
        if (n < a1) {
            break;
            printf("Break is error!And < is error!\n");
        }  
        if (n == a2) {
            printf("+ is correct!\n");
        } else {
            printf("+ is error!\n");
        }
        if (n == b1) {
            break;
        }  
    }
    if (n != b1) {
        if (n == 0) {
            printf("Break is error!\n");
        } else {
            printf("Continue is error!\n");
        }
    }  
    printf("a1+b1 is %d\n", a1 + b1);
    printf("a2+b2 is %d\n", a2 + b2);
    return 0;
}
[INFO] Matched <CompileUnit>:
const int a1 = 1, a2 = +3, a3 = 8;
int b1 = 0 + 2, b2 = -5, b3 = +6;

int main() {
    printf("\n");
    int n = 10;
    for (; n; ) {
        n = n - 1;
        if (n < b3) {
            continue;
            printf("Continue is error!\n");
        }  
        if (n < a1) {
            break;
            printf("Break is error!And < is error!\n");
        }  
        if (n == a2) {
            printf("+ is correct!\n");
        } else {
            printf("+ is error!\n");
        }
        if (n == b1) {
            break;
        }  
    }
    if (n != b1) {
        if (n == 0) {
            printf("Break is error!\n");
        } else {
            printf("Continue is error!\n");
        }
    }  
    printf("a1+b1 is %d\n", a1 + b1);
    printf("a2+b2 is %d\n", a2 + b2);
    return 0;
}
[INFO] Test 9
[INFO] Matching <CompileUnit>
[INFO] Consumed Token: int
[INFO] Consumed Token: fib_matrix
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: fib_matrix
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: fib_matrix
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 1}
[INFO] Matched <VarInitValue>: {1, 1}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 0}
[INFO] Matched <VarInitValue>: {1, 0}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{1, 1}, {1, 0}}
[INFO] Matched <VarInitValue>: {{1, 1}, {1, 0}}
[INFO] Matched <VarDefinition>: fib_matrix[2][2] = {{1, 1}, {1, 0}}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int fib_matrix[2][2] = {{1, 1}, {1, 0}};
[INFO] Matched <Declaration>: int fib_matrix[2][2] = {{1, 1}, {1, 0}};
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: __res
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <ConstExpression>: 5
[INFO] Matched <ScalarConstInitValue>: 5
[INFO] Matched <ConstInitValue>: 5
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <ConstExpression>: 5
[INFO] Matched <ScalarConstInitValue>: 5
[INFO] Matched <ConstInitValue>: 5
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {5, 5}
[INFO] Matched <ConstInitValue>: {5, 5}
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Matched <ScalarConstInitValue>: 3
[INFO] Matched <ConstInitValue>: 3
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {2, 3}
[INFO] Matched <ConstInitValue>: {2, 3}
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {{5, 5}, {2, 3}}
[INFO] Matched <ConstInitValue>: {{5, 5}, {2, 3}}
[INFO] Matched <ConstDefinition>.__res[2][2] = {{5, 5}, {2, 3}}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int __res[2][2] = {{5, 5}, {2, 3}};
[INFO] Matched <Declaration>: const int __res[2][2] = {{5, 5}, {2, 3}};
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: __useless
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <ConstExpression>: 4
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <ConstExpression>: 0
[INFO] Matched <ScalarConstInitValue>: 0
[INFO] Matched <ConstInitValue>: 0
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {1, 1, 1, 0}
[INFO] Matched <ConstInitValue>: {1, 1, 1, 0}
[INFO] Matched <ConstDefinition>.__useless[4] = {1, 1, 1, 0}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int __useless[4] = {1, 1, 1, 0};
[INFO] Matched <Declaration>: const int __useless[4] = {1, 1, 1, 0};
[INFO] Consumed Token: void
[INFO] Consumed Token: __vec_mul
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: __vec_mul
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int res[]
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: mat
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int mat[][2]
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: vec
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int vec[]
[INFO] Matched <FuncParamList>: int res[], int mat[][2], int vec[]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[0]
[INFO] Matched <PrimaryExpression>: res[0]
[INFO] Matched <UnaryExpression>: res[0]
[INFO] Matched <MultiplicativeExpression>: res[0]
[INFO] Matched <AdditiveExpression>: res[0]
[INFO] Matched <Expression>: res[0]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[0]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[0]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: vec
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: vec
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: vec[0]
[INFO] Matched <PrimaryExpression>: vec[0]
[INFO] Matched <UnaryExpression>: vec[0]
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: mat
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: mat
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: mat[0][0]
[INFO] Matched <PrimaryExpression>: mat[0][0]
[INFO] Matched <UnaryExpression>: mat[0][0]
[INFO] Matched <MultiplicativeExpression>: vec[0] * mat[0][0]
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: vec
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: vec
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: vec[1]
[INFO] Matched <PrimaryExpression>: vec[1]
[INFO] Matched <UnaryExpression>: vec[1]
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: mat
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: mat
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: mat[0][1]
[INFO] Matched <PrimaryExpression>: mat[0][1]
[INFO] Matched <UnaryExpression>: mat[0][1]
[INFO] Matched <MultiplicativeExpression>: vec[1] * mat[0][1]
[INFO] Matched <AdditiveExpression>: vec[0] * mat[0][0] + vec[1] * mat[0][1]
[INFO] Matched <Expression>: vec[0] * mat[0][0] + vec[1] * mat[0][1]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: res[0] = vec[0] * mat[0][0] + vec[1] * mat[0][1];
[INFO] Matched <Statement>: res[0] = vec[0] * mat[0][0] + vec[1] * mat[0][1];
[INFO] Matched <BlockItem>:
res[0] = vec[0] * mat[0][0] + vec[1] * mat[0][1];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[1]
[INFO] Matched <PrimaryExpression>: res[1]
[INFO] Matched <UnaryExpression>: res[1]
[INFO] Matched <MultiplicativeExpression>: res[1]
[INFO] Matched <AdditiveExpression>: res[1]
[INFO] Matched <Expression>: res[1]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[1]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[1]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: vec
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: vec
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: vec[0]
[INFO] Matched <PrimaryExpression>: vec[0]
[INFO] Matched <UnaryExpression>: vec[0]
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: mat
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: mat
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: mat[1][0]
[INFO] Matched <PrimaryExpression>: mat[1][0]
[INFO] Matched <UnaryExpression>: mat[1][0]
[INFO] Matched <MultiplicativeExpression>: vec[0] * mat[1][0]
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: vec
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: vec
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: vec[1]
[INFO] Matched <PrimaryExpression>: vec[1]
[INFO] Matched <UnaryExpression>: vec[1]
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: mat
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: mat
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: mat[1][1]
[INFO] Matched <PrimaryExpression>: mat[1][1]
[INFO] Matched <UnaryExpression>: mat[1][1]
[INFO] Matched <MultiplicativeExpression>: vec[1] * mat[1][1]
[INFO] Matched <AdditiveExpression>: vec[0] * mat[1][0] + vec[1] * mat[1][1]
[INFO] Matched <Expression>: vec[0] * mat[1][0] + vec[1] * mat[1][1]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: res[1] = vec[0] * mat[1][0] + vec[1] * mat[1][1];
[INFO] Matched <Statement>: res[1] = vec[0] * mat[1][0] + vec[1] * mat[1][1];
[INFO] Matched <BlockItem>:
res[1] = vec[0] * mat[1][0] + vec[1] * mat[1][1];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    res[0] = vec[0] * mat[0][0] + vec[1] * mat[0][1];
    res[1] = vec[0] * mat[1][0] + vec[1] * mat[1][1];
    return;
}
[INFO] Matched <FuncDefinition>:
void __vec_mul(int res[], int mat[][2], int vec[]) {
    res[0] = vec[0] * mat[0][0] + vec[1] * mat[0][1];
    res[1] = vec[0] * mat[1][0] + vec[1] * mat[1][1];
    return;
}
[INFO] Consumed Token: void
[INFO] Consumed Token: __mat_mul
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: __mat_mul
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int res[][2]
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: x
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int x[][2]
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: y
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int y[][2]
[INFO] Matched <FuncParamList>: int res[][2], int x[][2], int y[][2]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[0][0]
[INFO] Matched <PrimaryExpression>: res[0][0]
[INFO] Matched <UnaryExpression>: res[0][0]
[INFO] Matched <MultiplicativeExpression>: res[0][0]
[INFO] Matched <AdditiveExpression>: res[0][0]
[INFO] Matched <Expression>: res[0][0]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[0][0]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[0][0]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: x[0][0]
[INFO] Matched <PrimaryExpression>: x[0][0]
[INFO] Matched <UnaryExpression>: x[0][0]
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: y[0][0]
[INFO] Matched <PrimaryExpression>: y[0][0]
[INFO] Matched <UnaryExpression>: y[0][0]
[INFO] Matched <MultiplicativeExpression>: x[0][0] * y[0][0]
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: x[0][1]
[INFO] Matched <PrimaryExpression>: x[0][1]
[INFO] Matched <UnaryExpression>: x[0][1]
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: y[1][0]
[INFO] Matched <PrimaryExpression>: y[1][0]
[INFO] Matched <UnaryExpression>: y[1][0]
[INFO] Matched <MultiplicativeExpression>: x[0][1] * y[1][0]
[INFO] Matched <AdditiveExpression>: x[0][0] * y[0][0] + x[0][1] * y[1][0]
[INFO] Matched <Expression>: x[0][0] * y[0][0] + x[0][1] * y[1][0]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: res[0][0] = x[0][0] * y[0][0] + x[0][1] * y[1][0];
[INFO] Matched <Statement>: res[0][0] = x[0][0] * y[0][0] + x[0][1] * y[1][0];
[INFO] Matched <BlockItem>:
res[0][0] = x[0][0] * y[0][0] + x[0][1] * y[1][0];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[0][1]
[INFO] Matched <PrimaryExpression>: res[0][1]
[INFO] Matched <UnaryExpression>: res[0][1]
[INFO] Matched <MultiplicativeExpression>: res[0][1]
[INFO] Matched <AdditiveExpression>: res[0][1]
[INFO] Matched <Expression>: res[0][1]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[0][1]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[0][1]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: x[0][0]
[INFO] Matched <PrimaryExpression>: x[0][0]
[INFO] Matched <UnaryExpression>: x[0][0]
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: y[0][1]
[INFO] Matched <PrimaryExpression>: y[0][1]
[INFO] Matched <UnaryExpression>: y[0][1]
[INFO] Matched <MultiplicativeExpression>: x[0][0] * y[0][1]
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: x[0][1]
[INFO] Matched <PrimaryExpression>: x[0][1]
[INFO] Matched <UnaryExpression>: x[0][1]
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: y[1][1]
[INFO] Matched <PrimaryExpression>: y[1][1]
[INFO] Matched <UnaryExpression>: y[1][1]
[INFO] Matched <MultiplicativeExpression>: x[0][1] * y[1][1]
[INFO] Matched <AdditiveExpression>: x[0][0] * y[0][1] + x[0][1] * y[1][1]
[INFO] Matched <Expression>: x[0][0] * y[0][1] + x[0][1] * y[1][1]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: res[0][1] = x[0][0] * y[0][1] + x[0][1] * y[1][1];
[INFO] Matched <Statement>: res[0][1] = x[0][0] * y[0][1] + x[0][1] * y[1][1];
[INFO] Matched <BlockItem>:
res[0][1] = x[0][0] * y[0][1] + x[0][1] * y[1][1];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[1][0]
[INFO] Matched <PrimaryExpression>: res[1][0]
[INFO] Matched <UnaryExpression>: res[1][0]
[INFO] Matched <MultiplicativeExpression>: res[1][0]
[INFO] Matched <AdditiveExpression>: res[1][0]
[INFO] Matched <Expression>: res[1][0]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[1][0]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[1][0]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: x[1][0]
[INFO] Matched <PrimaryExpression>: x[1][0]
[INFO] Matched <UnaryExpression>: x[1][0]
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: y[0][0]
[INFO] Matched <PrimaryExpression>: y[0][0]
[INFO] Matched <UnaryExpression>: y[0][0]
[INFO] Matched <MultiplicativeExpression>: x[1][0] * y[0][0]
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: x[1][1]
[INFO] Matched <PrimaryExpression>: x[1][1]
[INFO] Matched <UnaryExpression>: x[1][1]
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: y[1][0]
[INFO] Matched <PrimaryExpression>: y[1][0]
[INFO] Matched <UnaryExpression>: y[1][0]
[INFO] Matched <MultiplicativeExpression>: x[1][1] * y[1][0]
[INFO] Matched <AdditiveExpression>: x[1][0] * y[0][0] + x[1][1] * y[1][0]
[INFO] Matched <Expression>: x[1][0] * y[0][0] + x[1][1] * y[1][0]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: res[1][0] = x[1][0] * y[0][0] + x[1][1] * y[1][0];
[INFO] Matched <Statement>: res[1][0] = x[1][0] * y[0][0] + x[1][1] * y[1][0];
[INFO] Matched <BlockItem>:
res[1][0] = x[1][0] * y[0][0] + x[1][1] * y[1][0];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[1][1]
[INFO] Matched <PrimaryExpression>: res[1][1]
[INFO] Matched <UnaryExpression>: res[1][1]
[INFO] Matched <MultiplicativeExpression>: res[1][1]
[INFO] Matched <AdditiveExpression>: res[1][1]
[INFO] Matched <Expression>: res[1][1]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[1][1]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[1][1]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: x[1][0]
[INFO] Matched <PrimaryExpression>: x[1][0]
[INFO] Matched <UnaryExpression>: x[1][0]
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: y[0][1]
[INFO] Matched <PrimaryExpression>: y[0][1]
[INFO] Matched <UnaryExpression>: y[0][1]
[INFO] Matched <MultiplicativeExpression>: x[1][0] * y[0][1]
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: x[1][1]
[INFO] Matched <PrimaryExpression>: x[1][1]
[INFO] Matched <UnaryExpression>: x[1][1]
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: y
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: y
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: y[1][1]
[INFO] Matched <PrimaryExpression>: y[1][1]
[INFO] Matched <UnaryExpression>: y[1][1]
[INFO] Matched <MultiplicativeExpression>: x[1][1] * y[1][1]
[INFO] Matched <AdditiveExpression>: x[1][0] * y[0][1] + x[1][1] * y[1][1]
[INFO] Matched <Expression>: x[1][0] * y[0][1] + x[1][1] * y[1][1]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: res[1][1] = x[1][0] * y[0][1] + x[1][1] * y[1][1];
[INFO] Matched <Statement>: res[1][1] = x[1][0] * y[0][1] + x[1][1] * y[1][1];
[INFO] Matched <BlockItem>:
res[1][1] = x[1][0] * y[0][1] + x[1][1] * y[1][1];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    res[0][0] = x[0][0] * y[0][0] + x[0][1] * y[1][0];
    res[0][1] = x[0][0] * y[0][1] + x[0][1] * y[1][1];
    res[1][0] = x[1][0] * y[0][0] + x[1][1] * y[1][0];
    res[1][1] = x[1][0] * y[0][1] + x[1][1] * y[1][1];
    return;
}
[INFO] Matched <FuncDefinition>:
void __mat_mul(int res[][2], int x[][2], int y[][2]) {
    res[0][0] = x[0][0] * y[0][0] + x[0][1] * y[1][0];
    res[0][1] = x[0][0] * y[0][1] + x[0][1] * y[1][1];
    res[1][0] = x[1][0] * y[0][0] + x[1][1] * y[1][0];
    res[1][1] = x[1][0] * y[0][1] + x[1][1] * y[1][1];
    return;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: __power
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: __power
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: n
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: cur
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int cur[][2]
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int res[][2]
[INFO] Matched <FuncParamList>: int n, int cur[][2], int res[][2]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Matched <RelationalExpression>: n
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <RelationalExpression>: 1
[INFO] Matched <EqualityExpression>: n == 1
[INFO] Matched <LogicalAndExpression>: n == 1
[INFO] Matched <LogicalOrExpression>: n == 1
[INFO] Matched <Condition>: n == 1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[0][0]
[INFO] Matched <PrimaryExpression>: res[0][0]
[INFO] Matched <UnaryExpression>: res[0][0]
[INFO] Matched <MultiplicativeExpression>: res[0][0]
[INFO] Matched <AdditiveExpression>: res[0][0]
[INFO] Matched <Expression>: res[0][0]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[0][0]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[0][0]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: cur
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cur
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cur[0][0]
[INFO] Matched <PrimaryExpression>: cur[0][0]
[INFO] Matched <UnaryExpression>: cur[0][0]
[INFO] Matched <MultiplicativeExpression>: cur[0][0]
[INFO] Matched <AdditiveExpression>: cur[0][0]
[INFO] Matched <Expression>: cur[0][0]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: res[0][0] = cur[0][0];
[INFO] Matched <Statement>: res[0][0] = cur[0][0];
[INFO] Matched <BlockItem>:
res[0][0] = cur[0][0];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[0][1]
[INFO] Matched <PrimaryExpression>: res[0][1]
[INFO] Matched <UnaryExpression>: res[0][1]
[INFO] Matched <MultiplicativeExpression>: res[0][1]
[INFO] Matched <AdditiveExpression>: res[0][1]
[INFO] Matched <Expression>: res[0][1]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[0][1]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[0][1]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: cur
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cur
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cur[0][1]
[INFO] Matched <PrimaryExpression>: cur[0][1]
[INFO] Matched <UnaryExpression>: cur[0][1]
[INFO] Matched <MultiplicativeExpression>: cur[0][1]
[INFO] Matched <AdditiveExpression>: cur[0][1]
[INFO] Matched <Expression>: cur[0][1]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: res[0][1] = cur[0][1];
[INFO] Matched <Statement>: res[0][1] = cur[0][1];
[INFO] Matched <BlockItem>:
res[0][1] = cur[0][1];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[1][0]
[INFO] Matched <PrimaryExpression>: res[1][0]
[INFO] Matched <UnaryExpression>: res[1][0]
[INFO] Matched <MultiplicativeExpression>: res[1][0]
[INFO] Matched <AdditiveExpression>: res[1][0]
[INFO] Matched <Expression>: res[1][0]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[1][0]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[1][0]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: cur
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cur
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cur[1][0]
[INFO] Matched <PrimaryExpression>: cur[1][0]
[INFO] Matched <UnaryExpression>: cur[1][0]
[INFO] Matched <MultiplicativeExpression>: cur[1][0]
[INFO] Matched <AdditiveExpression>: cur[1][0]
[INFO] Matched <Expression>: cur[1][0]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: res[1][0] = cur[1][0];
[INFO] Matched <Statement>: res[1][0] = cur[1][0];
[INFO] Matched <BlockItem>:
res[1][0] = cur[1][0];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[1][1]
[INFO] Matched <PrimaryExpression>: res[1][1]
[INFO] Matched <UnaryExpression>: res[1][1]
[INFO] Matched <MultiplicativeExpression>: res[1][1]
[INFO] Matched <AdditiveExpression>: res[1][1]
[INFO] Matched <Expression>: res[1][1]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[1][1]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[1][1]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: cur
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cur
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cur[1][1]
[INFO] Matched <PrimaryExpression>: cur[1][1]
[INFO] Matched <UnaryExpression>: cur[1][1]
[INFO] Matched <MultiplicativeExpression>: cur[1][1]
[INFO] Matched <AdditiveExpression>: cur[1][1]
[INFO] Matched <Expression>: cur[1][1]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: res[1][1] = cur[1][1];
[INFO] Matched <Statement>: res[1][1] = cur[1][1];
[INFO] Matched <BlockItem>:
res[1][1] = cur[1][1];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    res[0][0] = cur[0][0];
    res[0][1] = cur[0][1];
    res[1][0] = cur[1][0];
    res[1][1] = cur[1][1];
    return 0;
}
[INFO] Matched <Statement>:
{
    res[0][0] = cur[0][0];
    res[0][1] = cur[0][1];
    res[1][0] = cur[1][0];
    res[1][1] = cur[1][1];
    return 0;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __mat_mul
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: __mat_mul
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Matched <LeftValue>: res
[INFO] Matched <PrimaryExpression>: res
[INFO] Matched <UnaryExpression>: res
[INFO] Matched <MultiplicativeExpression>: res
[INFO] Matched <AdditiveExpression>: res
[INFO] Matched <Expression>: res
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: cur
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cur
[INFO] Matched <LeftValue>: cur
[INFO] Matched <PrimaryExpression>: cur
[INFO] Matched <UnaryExpression>: cur
[INFO] Matched <MultiplicativeExpression>: cur
[INFO] Matched <AdditiveExpression>: cur
[INFO] Matched <Expression>: cur
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: fib_matrix
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: fib_matrix
[INFO] Matched <LeftValue>: fib_matrix
[INFO] Matched <PrimaryExpression>: fib_matrix
[INFO] Matched <UnaryExpression>: fib_matrix
[INFO] Matched <MultiplicativeExpression>: fib_matrix
[INFO] Matched <AdditiveExpression>: fib_matrix
[INFO] Matched <Expression>: fib_matrix
[INFO] Matched <FuncArgList>: res, cur, fib_matrix
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: __mat_mul(res, cur, fib_matrix)
[INFO] Matched <UnaryExpression>: __mat_mul(res, cur, fib_matrix)
[INFO] Matched <MultiplicativeExpression>: __mat_mul(res, cur, fib_matrix)
[INFO] Matched <AdditiveExpression>: __mat_mul(res, cur, fib_matrix)
[INFO] Matched <Expression>: __mat_mul(res, cur, fib_matrix)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: __mat_mul(res, cur, fib_matrix);
[INFO] Matched <Statement>: __mat_mul(res, cur, fib_matrix);
[INFO] Matched <BlockItem>:
__mat_mul(res, cur, fib_matrix);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: cur
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cur
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cur[0][0]
[INFO] Matched <PrimaryExpression>: cur[0][0]
[INFO] Matched <UnaryExpression>: cur[0][0]
[INFO] Matched <MultiplicativeExpression>: cur[0][0]
[INFO] Matched <AdditiveExpression>: cur[0][0]
[INFO] Matched <Expression>: cur[0][0]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cur
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cur[0][0]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cur
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cur[0][0]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[0][0]
[INFO] Matched <PrimaryExpression>: res[0][0]
[INFO] Matched <UnaryExpression>: res[0][0]
[INFO] Matched <MultiplicativeExpression>: res[0][0]
[INFO] Matched <AdditiveExpression>: res[0][0]
[INFO] Matched <Expression>: res[0][0]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: cur[0][0] = res[0][0];
[INFO] Matched <Statement>: cur[0][0] = res[0][0];
[INFO] Matched <BlockItem>:
cur[0][0] = res[0][0];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: cur
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cur
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cur[0][1]
[INFO] Matched <PrimaryExpression>: cur[0][1]
[INFO] Matched <UnaryExpression>: cur[0][1]
[INFO] Matched <MultiplicativeExpression>: cur[0][1]
[INFO] Matched <AdditiveExpression>: cur[0][1]
[INFO] Matched <Expression>: cur[0][1]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cur
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cur[0][1]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cur
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cur[0][1]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[0][1]
[INFO] Matched <PrimaryExpression>: res[0][1]
[INFO] Matched <UnaryExpression>: res[0][1]
[INFO] Matched <MultiplicativeExpression>: res[0][1]
[INFO] Matched <AdditiveExpression>: res[0][1]
[INFO] Matched <Expression>: res[0][1]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: cur[0][1] = res[0][1];
[INFO] Matched <Statement>: cur[0][1] = res[0][1];
[INFO] Matched <BlockItem>:
cur[0][1] = res[0][1];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: cur
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cur
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cur[1][0]
[INFO] Matched <PrimaryExpression>: cur[1][0]
[INFO] Matched <UnaryExpression>: cur[1][0]
[INFO] Matched <MultiplicativeExpression>: cur[1][0]
[INFO] Matched <AdditiveExpression>: cur[1][0]
[INFO] Matched <Expression>: cur[1][0]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cur
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cur[1][0]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cur
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cur[1][0]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[1][0]
[INFO] Matched <PrimaryExpression>: res[1][0]
[INFO] Matched <UnaryExpression>: res[1][0]
[INFO] Matched <MultiplicativeExpression>: res[1][0]
[INFO] Matched <AdditiveExpression>: res[1][0]
[INFO] Matched <Expression>: res[1][0]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: cur[1][0] = res[1][0];
[INFO] Matched <Statement>: cur[1][0] = res[1][0];
[INFO] Matched <BlockItem>:
cur[1][0] = res[1][0];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: cur
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cur
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cur[1][1]
[INFO] Matched <PrimaryExpression>: cur[1][1]
[INFO] Matched <UnaryExpression>: cur[1][1]
[INFO] Matched <MultiplicativeExpression>: cur[1][1]
[INFO] Matched <AdditiveExpression>: cur[1][1]
[INFO] Matched <Expression>: cur[1][1]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cur
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cur[1][1]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cur
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cur[1][1]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: res[1][1]
[INFO] Matched <PrimaryExpression>: res[1][1]
[INFO] Matched <UnaryExpression>: res[1][1]
[INFO] Matched <MultiplicativeExpression>: res[1][1]
[INFO] Matched <AdditiveExpression>: res[1][1]
[INFO] Matched <Expression>: res[1][1]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: cur[1][1] = res[1][1];
[INFO] Matched <Statement>: cur[1][1] = res[1][1];
[INFO] Matched <BlockItem>:
cur[1][1] = res[1][1];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __power
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: __power
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: n - 1
[INFO] Matched <Expression>: n - 1
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: cur
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cur
[INFO] Matched <LeftValue>: cur
[INFO] Matched <PrimaryExpression>: cur
[INFO] Matched <UnaryExpression>: cur
[INFO] Matched <MultiplicativeExpression>: cur
[INFO] Matched <AdditiveExpression>: cur
[INFO] Matched <Expression>: cur
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Matched <LeftValue>: res
[INFO] Matched <PrimaryExpression>: res
[INFO] Matched <UnaryExpression>: res
[INFO] Matched <MultiplicativeExpression>: res
[INFO] Matched <AdditiveExpression>: res
[INFO] Matched <Expression>: res
[INFO] Matched <FuncArgList>: n - 1, cur, res
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: __power(n - 1, cur, res)
[INFO] Matched <UnaryExpression>: __power(n - 1, cur, res)
[INFO] Matched <MultiplicativeExpression>: __power(n - 1, cur, res)
[INFO] Matched <AdditiveExpression>: __power(n - 1, cur, res)
[INFO] Matched <Expression>: __power(n - 1, cur, res)
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return __power(n - 1, cur, res);
[INFO] Matched <Statement>: return __power(n - 1, cur, res);
[INFO] Matched <BlockItem>:
return __power(n - 1, cur, res);
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    __mat_mul(res, cur, fib_matrix);
    cur[0][0] = res[0][0];
    cur[0][1] = res[0][1];
    cur[1][0] = res[1][0];
    cur[1][1] = res[1][1];
    return __power(n - 1, cur, res);
}
[INFO] Matched <Statement>:
{
    __mat_mul(res, cur, fib_matrix);
    cur[0][0] = res[0][0];
    cur[0][1] = res[0][1];
    cur[1][0] = res[1][0];
    cur[1][1] = res[1][1];
    return __power(n - 1, cur, res);
}
[INFO] Matched <IfStatement>:
if (n == 1) {
    res[0][0] = cur[0][0];
    res[0][1] = cur[0][1];
    res[1][0] = cur[1][0];
    res[1][1] = cur[1][1];
    return 0;
} else {
    __mat_mul(res, cur, fib_matrix);
    cur[0][0] = res[0][0];
    cur[0][1] = res[0][1];
    cur[1][0] = res[1][0];
    cur[1][1] = res[1][1];
    return __power(n - 1, cur, res);
}
[INFO] Matched <Statement>:
if (n == 1) {
    res[0][0] = cur[0][0];
    res[0][1] = cur[0][1];
    res[1][0] = cur[1][0];
    res[1][1] = cur[1][1];
    return 0;
} else {
    __mat_mul(res, cur, fib_matrix);
    cur[0][0] = res[0][0];
    cur[0][1] = res[0][1];
    cur[1][0] = res[1][0];
    cur[1][1] = res[1][1];
    return __power(n - 1, cur, res);
}
[INFO] Matched <BlockItem>:
if (n == 1) {
    res[0][0] = cur[0][0];
    res[0][1] = cur[0][1];
    res[1][0] = cur[1][0];
    res[1][1] = cur[1][1];
    return 0;
} else {
    __mat_mul(res, cur, fib_matrix);
    cur[0][0] = res[0][0];
    cur[0][1] = res[0][1];
    cur[1][0] = res[1][0];
    cur[1][1] = res[1][1];
    return __power(n - 1, cur, res);
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (n == 1) {
        res[0][0] = cur[0][0];
        res[0][1] = cur[0][1];
        res[1][0] = cur[1][0];
        res[1][1] = cur[1][1];
        return 0;
    } else {
        __mat_mul(res, cur, fib_matrix);
        cur[0][0] = res[0][0];
        cur[0][1] = res[0][1];
        cur[1][0] = res[1][0];
        cur[1][1] = res[1][1];
        return __power(n - 1, cur, res);
    }
    return 0;
}
[INFO] Matched <FuncDefinition>:
int __power(int n, int cur[][2], int res[][2]) {
    if (n == 1) {
        res[0][0] = cur[0][0];
        res[0][1] = cur[0][1];
        res[1][0] = cur[1][0];
        res[1][1] = cur[1][1];
        return 0;
    } else {
        __mat_mul(res, cur, fib_matrix);
        cur[0][0] = res[0][0];
        cur[0][1] = res[0][1];
        cur[1][0] = res[1][0];
        cur[1][1] = res[1][1];
        return __power(n - 1, cur, res);
    }
    return 0;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: power
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: power
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: n
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int res[][2]
[INFO] Matched <FuncParamList>: int n, int res[][2]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: n <= 0
[INFO] Matched <EqualityExpression>: n <= 0
[INFO] Matched <LogicalAndExpression>: n <= 0
[INFO] Matched <LogicalOrExpression>: n <= 0
[INFO] Matched <Condition>: n <= 0
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: -1
[INFO] Matched <UnaryExpression>: -1
[INFO] Matched <MultiplicativeExpression>: -1
[INFO] Matched <AdditiveExpression>: -1
[INFO] Matched <Expression>: -1
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return -1;
[INFO] Matched <Statement>: return -1;
[INFO] Matched <IfStatement>:
if (n <= 0) return -1;  
[INFO] Matched <Statement>:
if (n <= 0) return -1;  
[INFO] Matched <BlockItem>:
if (n <= 0) return -1;  
[INFO] Consumed Token: int
[INFO] Consumed Token: temp
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: temp
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: temp
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: temp
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 1}
[INFO] Matched <VarInitValue>: {1, 1}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 0}
[INFO] Matched <VarInitValue>: {1, 0}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{1, 1}, {1, 0}}
[INFO] Matched <VarInitValue>: {{1, 1}, {1, 0}}
[INFO] Matched <VarDefinition>: temp[2][2] = {{1, 1}, {1, 0}}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int temp[2][2] = {{1, 1}, {1, 0}};
[INFO] Matched <Declaration>: int temp[2][2] = {{1, 1}, {1, 0}};
[INFO] Matched <BlockItem>:
int temp[2][2] = {{1, 1}, {1, 0}};
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __power
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: __power
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Matched <Expression>: n
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: temp
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: temp
[INFO] Matched <LeftValue>: temp
[INFO] Matched <PrimaryExpression>: temp
[INFO] Matched <UnaryExpression>: temp
[INFO] Matched <MultiplicativeExpression>: temp
[INFO] Matched <AdditiveExpression>: temp
[INFO] Matched <Expression>: temp
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Matched <LeftValue>: res
[INFO] Matched <PrimaryExpression>: res
[INFO] Matched <UnaryExpression>: res
[INFO] Matched <MultiplicativeExpression>: res
[INFO] Matched <AdditiveExpression>: res
[INFO] Matched <Expression>: res
[INFO] Matched <FuncArgList>: n, temp, res
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: __power(n, temp, res)
[INFO] Matched <UnaryExpression>: __power(n, temp, res)
[INFO] Matched <MultiplicativeExpression>: __power(n, temp, res)
[INFO] Matched <AdditiveExpression>: __power(n, temp, res)
[INFO] Matched <Expression>: __power(n, temp, res)
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return __power(n, temp, res);
[INFO] Matched <Statement>: return __power(n, temp, res);
[INFO] Matched <BlockItem>:
return __power(n, temp, res);
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (n <= 0) return -1;  
    int temp[2][2] = {{1, 1}, {1, 0}};
    return __power(n, temp, res);
}
[INFO] Matched <FuncDefinition>:
int power(int n, int res[][2]) {
    if (n <= 0) return -1;  
    int temp[2][2] = {{1, 1}, {1, 0}};
    return __power(n, temp, res);
}
[INFO] Consumed Token: int
[INFO] Consumed Token: error
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: error
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Failed to match <BasicType>.
[INFO] Failed to match <FuncParam>.
[INFO] Failed to match <FuncParamList>.
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "Error!\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("Error!\n");
[INFO] Matched <Statement>: printf("Error!\n");
[INFO] Matched <BlockItem>:
printf("Error!\n");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 1;
[INFO] Matched <Statement>: return 1;
[INFO] Matched <BlockItem>:
return 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("Error!\n");
    return 1;
}
[INFO] Matched <FuncDefinition>:
int error() {
    printf("Error!\n");
    return 1;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: out
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: out
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: r
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int r[][2]
[INFO] Matched <FuncParamList>: int r[][2]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d %d\n%d %d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: r
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: r
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: r[0][0]
[INFO] Matched <PrimaryExpression>: r[0][0]
[INFO] Matched <UnaryExpression>: r[0][0]
[INFO] Matched <MultiplicativeExpression>: r[0][0]
[INFO] Matched <AdditiveExpression>: r[0][0]
[INFO] Matched <Expression>: r[0][0]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: r
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: r
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: r[0][1]
[INFO] Matched <PrimaryExpression>: r[0][1]
[INFO] Matched <UnaryExpression>: r[0][1]
[INFO] Matched <MultiplicativeExpression>: r[0][1]
[INFO] Matched <AdditiveExpression>: r[0][1]
[INFO] Matched <Expression>: r[0][1]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: r
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: r
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: r[1][0]
[INFO] Matched <PrimaryExpression>: r[1][0]
[INFO] Matched <UnaryExpression>: r[1][0]
[INFO] Matched <MultiplicativeExpression>: r[1][0]
[INFO] Matched <AdditiveExpression>: r[1][0]
[INFO] Matched <Expression>: r[1][0]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: r
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: r
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: r[1][1]
[INFO] Matched <PrimaryExpression>: r[1][1]
[INFO] Matched <UnaryExpression>: r[1][1]
[INFO] Matched <MultiplicativeExpression>: r[1][1]
[INFO] Matched <AdditiveExpression>: r[1][1]
[INFO] Matched <Expression>: r[1][1]
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d %d\n%d %d\n", r[0][0], r[0][1], r[1][0], r[1][1]);
[INFO] Matched <Statement>: printf("%d %d\n%d %d\n", r[0][0], r[0][1], r[1][0], r[1][1]);
[INFO] Matched <BlockItem>:
printf("%d %d\n%d %d\n", r[0][0], r[0][1], r[1][0], r[1][1]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 1;
[INFO] Matched <Statement>: return 1;
[INFO] Matched <BlockItem>:
return 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("%d %d\n%d %d\n", r[0][0], r[0][1], r[1][0], r[1][1]);
    return 1;
}
[INFO] Matched <FuncDefinition>:
int out(int r[][2]) {
    printf("%d %d\n%d %d\n", r[0][0], r[0][1], r[1][0], r[1][1]);
    return 1;
}
[INFO] Consumed Token: int
[INFO] Lexer rolling back...
[INFO] Matching <MainFuncDefinition>.
[INFO] Consumed Token: int
[INFO] Consumed Token: main
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: down
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10078
[INFO] Matched <Number>: 10078
[INFO] Matched <PrimaryExpression>: 10078
[INFO] Matched <UnaryExpression>: 10078
[INFO] Matched <MultiplicativeExpression>: 0 / 10078
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 45
[INFO] Matched <Number>: 45
[INFO] Matched <PrimaryExpression>: 45
[INFO] Matched <UnaryExpression>: 45
[INFO] Matched <MultiplicativeExpression>: 0 * 45
[INFO] Matched <AdditiveExpression>: 0 * 45
[INFO] Matched <Expression>: 0 * 45
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (0 * 45)
[INFO] Matched <PrimaryExpression>: (0 * 45)
[INFO] Matched <UnaryExpression>: (0 * 45)
[INFO] Matched <MultiplicativeExpression>: (0 * 45)
[INFO] Matched <AdditiveExpression>: 0 / 10078 + (0 * 45)
[INFO] Matched <ConstExpression>: 0 / 10078 + (0 * 45)
[INFO] Matched <ScalarConstInitValue>: 0 / 10078 + (0 * 45)
[INFO] Matched <ConstInitValue>: 0 / 10078 + (0 * 45)
[INFO] Matched <ConstDefinition>.down = 0 / 10078 + (0 * 45)
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int down = 0 / 10078 + (0 * 45);
[INFO] Matched <Declaration>: const int down = 0 / 10078 + (0 * 45);
[INFO] Matched <BlockItem>:
const int down = 0 / 10078 + (0 * 45);
[INFO] Consumed Token: int
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: n
[INFO] Matched <VarDefinition>: n
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int n;
[INFO] Matched <Declaration>: int n;
[INFO] Matched <BlockItem>:
int n;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Matched <Expression>: n
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: n = getint();
[INFO] Matched <Statement>: n = getint();
[INFO] Matched <BlockItem>:
n = getint();
[INFO] Consumed Token: int
[INFO] Consumed Token: tmp
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: tmp
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: tmp
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: tmp
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {0, 0}
[INFO] Matched <VarInitValue>: {0, 0}
[INFO] Matched <VarDefinition>: tmp[2] = {0, 0}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int tmp[2] = {0, 0};
[INFO] Matched <Declaration>: int tmp[2] = {0, 0};
[INFO] Matched <BlockItem>:
int tmp[2] = {0, 0};
[INFO] Consumed Token: int
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: res
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <VarDefinition>: res[2][2]
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int res[2][2];
[INFO] Matched <Declaration>: int res[2][2];
[INFO] Matched <BlockItem>:
int res[2][2];
[INFO] Consumed Token: int
[INFO] Consumed Token: vec_list
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: vec_list
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: vec_list
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: vec_list
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: 6
[INFO] Matched <ConstExpression>: 6
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 0}
[INFO] Matched <VarInitValue>: {1, 0}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 1}
[INFO] Matched <VarInitValue>: {1, 1}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {2, 1}
[INFO] Matched <VarInitValue>: {2, 1}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {3, 1}
[INFO] Matched <VarInitValue>: {3, 1}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <Expression>: 4
[INFO] Matched <ScalarVarInitValue>: 4
[INFO] Matched <VarInitValue>: 4
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {4, 3}
[INFO] Matched <VarInitValue>: {4, 3}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: -1
[INFO] Matched <UnaryExpression>: -1
[INFO] Matched <MultiplicativeExpression>: -1
[INFO] Matched <AdditiveExpression>: -1
[INFO] Matched <Expression>: -1
[INFO] Matched <ScalarVarInitValue>: -1
[INFO] Matched <VarInitValue>: -1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {-1, 1}
[INFO] Matched <VarInitValue>: {-1, 1}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{1, 0}, {1, 1}, {2, 1}, {3, 1}, {4, 3}, {-1, 1}}
[INFO] Matched <VarInitValue>: {{1, 0}, {1, 1}, {2, 1}, {3, 1}, {4, 3}, {-1, 1}}
[INFO] Matched <VarDefinition>: vec_list[6][2] = {{1, 0}, {1, 1}, {2, 1}, {3, 1}, {4, 3}, {-1, 1}}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int vec_list[6][2] = {{1, 0}, {1, 1}, {2, 1}, {3, 1}, {4, 3}, {-1, 1}};
[INFO] Matched <Declaration>: int vec_list[6][2] = {{1, 0}, {1, 1}, {2, 1}, {3, 1}, {4, 3}, {-1, 1}};
[INFO] Matched <BlockItem>:
int vec_list[6][2] = {{1, 0}, {1, 1}, {2, 1}, {3, 1}, {4, 3}, {-1, 1}};
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "a[n] = a[n - 1] + a[n - 2] (for different init values)\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("a[n] = a[n - 1] + a[n - 2] (for different init values)\n");
[INFO] Matched <Statement>: printf("a[n] = a[n - 1] + a[n - 2] (for different init values)\n");
[INFO] Matched <BlockItem>:
printf("a[n] = a[n - 1] + a[n - 2] (for different init values)\n");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: down
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: down
[INFO] Matched <LeftValue>: down
[INFO] Matched <PrimaryExpression>: down
[INFO] Matched <UnaryExpression>: down
[INFO] Matched <MultiplicativeExpression>: down
[INFO] Matched <AdditiveExpression>: down
[INFO] Matched <RelationalExpression>: n > down
[INFO] Matched <EqualityExpression>: n > down
[INFO] Matched <LogicalAndExpression>: n > down
[INFO] Matched <LogicalOrExpression>: n > down
[INFO] Matched <Condition>: n > down
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: p
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: p
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: p
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: p
[INFO] Matched <VarDefinition>: p
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int p;
[INFO] Matched <Declaration>: int p;
[INFO] Matched <BlockItem>:
int p;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: p
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: p
[INFO] Matched <LeftValue>: p
[INFO] Matched <PrimaryExpression>: p
[INFO] Matched <UnaryExpression>: p
[INFO] Matched <MultiplicativeExpression>: p
[INFO] Matched <AdditiveExpression>: p
[INFO] Matched <Expression>: p
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: p
[INFO] Matched <LeftValue>: p
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: p = getint();
[INFO] Matched <Statement>: p = getint();
[INFO] Matched <BlockItem>:
p = getint();
[INFO] Consumed Token: int
[INFO] Consumed Token: ret
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: ret
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: ret
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: ret
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: power
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: power
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: p
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: p
[INFO] Matched <LeftValue>: p
[INFO] Matched <PrimaryExpression>: p
[INFO] Matched <UnaryExpression>: p
[INFO] Matched <MultiplicativeExpression>: p
[INFO] Matched <AdditiveExpression>: p
[INFO] Matched <Expression>: p
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Matched <LeftValue>: res
[INFO] Matched <PrimaryExpression>: res
[INFO] Matched <UnaryExpression>: res
[INFO] Matched <MultiplicativeExpression>: res
[INFO] Matched <AdditiveExpression>: res
[INFO] Matched <Expression>: res
[INFO] Matched <FuncArgList>: p, res
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: power(p, res)
[INFO] Matched <UnaryExpression>: power(p, res)
[INFO] Matched <MultiplicativeExpression>: power(p, res)
[INFO] Matched <AdditiveExpression>: power(p, res)
[INFO] Matched <Expression>: power(p, res)
[INFO] Matched <ScalarVarInitValue>: power(p, res)
[INFO] Matched <VarInitValue>: power(p, res)
[INFO] Matched <VarDefinition>: ret = power(p, res)
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int ret = power(p, res);
[INFO] Matched <Declaration>: int ret = power(p, res);
[INFO] Matched <BlockItem>:
int ret = power(p, res);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "/* input = %d */\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: p
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: p
[INFO] Matched <LeftValue>: p
[INFO] Matched <PrimaryExpression>: p
[INFO] Matched <UnaryExpression>: p
[INFO] Matched <MultiplicativeExpression>: p
[INFO] Matched <AdditiveExpression>: p
[INFO] Matched <Expression>: p
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("/* input = %d */\n", p);
[INFO] Matched <Statement>: printf("/* input = %d */\n", p);
[INFO] Matched <BlockItem>:
printf("/* input = %d */\n", p);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ret
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ret
[INFO] Matched <LeftValue>: ret
[INFO] Matched <PrimaryExpression>: ret
[INFO] Matched <UnaryExpression>: ret
[INFO] Matched <MultiplicativeExpression>: ret
[INFO] Matched <AdditiveExpression>: ret
[INFO] Matched <RelationalExpression>: ret
[INFO] Matched <EqualityExpression>: ret
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: error
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: error
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: error()
[INFO] Matched <UnaryExpression>: error()
[INFO] Matched <MultiplicativeExpression>: error()
[INFO] Matched <AdditiveExpression>: error()
[INFO] Matched <RelationalExpression>: error()
[INFO] Matched <EqualityExpression>: error()
[INFO] Matched <LogicalAndExpression>: ret && error()
[INFO] Matched <LogicalOrExpression>: ret && error()
[INFO] Matched <Condition>: ret && error()
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Matched <Expression>: n
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: n - 1
[INFO] Matched <Expression>: n - 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: n = n - 1;
[INFO] Matched <Statement>: n = n - 1;
[INFO] Matched <BlockItem>:
n = n - 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ContinueStatement>.
[INFO] Consumed Token: continue
[INFO] Consumed Token: ;
[INFO] Matched <ContinueStatement>: continue;
[INFO] Matched <Statement>: continue;
[INFO] Matched <BlockItem>:
continue;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    n = n - 1;
    continue;
}
[INFO] Matched <Statement>:
{
    n = n - 1;
    continue;
}
[INFO] Matched <IfStatement>:
if (ret && error()) {
    n = n - 1;
    continue;
}  
[INFO] Matched <Statement>:
if (ret && error()) {
    n = n - 1;
    continue;
}  
[INFO] Matched <BlockItem>:
if (ret && error()) {
    n = n - 1;
    continue;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ret
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ret
[INFO] Matched <LeftValue>: ret
[INFO] Matched <PrimaryExpression>: ret
[INFO] Matched <UnaryExpression>: ret
[INFO] Matched <MultiplicativeExpression>: ret
[INFO] Matched <AdditiveExpression>: ret
[INFO] Matched <RelationalExpression>: ret
[INFO] Matched <EqualityExpression>: ret
[INFO] Matched <LogicalAndExpression>: ret
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: out
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: out
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Matched <LeftValue>: res
[INFO] Matched <PrimaryExpression>: res
[INFO] Matched <UnaryExpression>: res
[INFO] Matched <MultiplicativeExpression>: res
[INFO] Matched <AdditiveExpression>: res
[INFO] Matched <Expression>: res
[INFO] Matched <FuncArgList>: res
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: out(res)
[INFO] Matched <UnaryExpression>: out(res)
[INFO] Matched <MultiplicativeExpression>: out(res)
[INFO] Matched <AdditiveExpression>: out(res)
[INFO] Matched <RelationalExpression>: out(res)
[INFO] Matched <EqualityExpression>: out(res)
[INFO] Matched <LogicalAndExpression>: out(res)
[INFO] Matched <LogicalOrExpression>: ret || out(res)
[INFO] Matched <Condition>: ret || out(res)
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: i
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: i = 0
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int i = 0;
[INFO] Matched <Declaration>: int i = 0;
[INFO] Matched <BlockItem>:
int i = 0;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: 6
[INFO] Matched <RelationalExpression>: i < 6
[INFO] Matched <EqualityExpression>: i < 6
[INFO] Matched <LogicalAndExpression>: i < 6
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <RelationalExpression>: 1
[INFO] Matched <EqualityExpression>: 1
[INFO] Matched <LogicalAndExpression>: 1
[INFO] Matched <LogicalOrExpression>: i < 6 || 1
[INFO] Matched <Condition>: i < 6 || 1
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __vec_mul
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: __vec_mul
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: tmp
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: tmp
[INFO] Matched <LeftValue>: tmp
[INFO] Matched <PrimaryExpression>: tmp
[INFO] Matched <UnaryExpression>: tmp
[INFO] Matched <MultiplicativeExpression>: tmp
[INFO] Matched <AdditiveExpression>: tmp
[INFO] Matched <Expression>: tmp
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: res
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: res
[INFO] Matched <LeftValue>: res
[INFO] Matched <PrimaryExpression>: res
[INFO] Matched <UnaryExpression>: res
[INFO] Matched <MultiplicativeExpression>: res
[INFO] Matched <AdditiveExpression>: res
[INFO] Matched <Expression>: res
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: vec_list
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: vec_list
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: vec_list[i]
[INFO] Matched <PrimaryExpression>: vec_list[i]
[INFO] Matched <UnaryExpression>: vec_list[i]
[INFO] Matched <MultiplicativeExpression>: vec_list[i]
[INFO] Matched <AdditiveExpression>: vec_list[i]
[INFO] Matched <Expression>: vec_list[i]
[INFO] Matched <FuncArgList>: tmp, res, vec_list[i]
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: __vec_mul(tmp, res, vec_list[i])
[INFO] Matched <UnaryExpression>: __vec_mul(tmp, res, vec_list[i])
[INFO] Matched <MultiplicativeExpression>: __vec_mul(tmp, res, vec_list[i])
[INFO] Matched <AdditiveExpression>: __vec_mul(tmp, res, vec_list[i])
[INFO] Matched <Expression>: __vec_mul(tmp, res, vec_list[i])
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: __vec_mul(tmp, res, vec_list[i]);
[INFO] Matched <Statement>: __vec_mul(tmp, res, vec_list[i]);
[INFO] Matched <BlockItem>:
__vec_mul(tmp, res, vec_list[i]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "when a[0] = %d, a[1] = %d ==> a[%d] = %d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: vec_list
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: vec_list
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: vec_list[i][1]
[INFO] Matched <PrimaryExpression>: vec_list[i][1]
[INFO] Matched <UnaryExpression>: vec_list[i][1]
[INFO] Matched <MultiplicativeExpression>: vec_list[i][1]
[INFO] Matched <AdditiveExpression>: vec_list[i][1]
[INFO] Matched <Expression>: vec_list[i][1]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: vec_list
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: vec_list
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: vec_list[i][0]
[INFO] Matched <PrimaryExpression>: vec_list[i][0]
[INFO] Matched <UnaryExpression>: vec_list[i][0]
[INFO] Matched <MultiplicativeExpression>: vec_list[i][0]
[INFO] Matched <AdditiveExpression>: vec_list[i][0]
[INFO] Matched <Expression>: vec_list[i][0]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: p
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: p
[INFO] Matched <LeftValue>: p
[INFO] Matched <PrimaryExpression>: p
[INFO] Matched <UnaryExpression>: p
[INFO] Matched <MultiplicativeExpression>: p
[INFO] Matched <AdditiveExpression>: p
[INFO] Matched <Expression>: p
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: tmp
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: tmp
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: tmp[1]
[INFO] Matched <PrimaryExpression>: tmp[1]
[INFO] Matched <UnaryExpression>: tmp[1]
[INFO] Matched <MultiplicativeExpression>: tmp[1]
[INFO] Matched <AdditiveExpression>: tmp[1]
[INFO] Matched <Expression>: tmp[1]
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("when a[0] = %d, a[1] = %d ==> a[%d] = %d\n", vec_list[i][1], vec_list[i][0], p, tmp[1]);
[INFO] Matched <Statement>: printf("when a[0] = %d, a[1] = %d ==> a[%d] = %d\n", vec_list[i][1], vec_list[i][0], p, tmp[1]);
[INFO] Matched <BlockItem>:
printf("when a[0] = %d, a[1] = %d ==> a[%d] = %d\n", vec_list[i][1], vec_list[i][0], p, tmp[1]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: i + 1
[INFO] Matched <Expression>: i + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = i + 1;
[INFO] Matched <Statement>: i = i + 1;
[INFO] Matched <BlockItem>:
i = i + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: 6
[INFO] Matched <RelationalExpression>: i >= 6
[INFO] Matched <EqualityExpression>: i >= 6
[INFO] Matched <LogicalAndExpression>: i >= 6
[INFO] Matched <LogicalOrExpression>: i >= 6
[INFO] Matched <Condition>: i >= 6
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <ContinueStatement>.
[INFO] Consumed Token: continue
[INFO] Consumed Token: ;
[INFO] Matched <ContinueStatement>: continue;
[INFO] Matched <Statement>: continue;
[INFO] Matched <IfStatement>:
if (i >= 6) break; else continue;
[INFO] Matched <Statement>:
if (i >= 6) break; else continue;
[INFO] Matched <BlockItem>:
if (i >= 6) break; else continue;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    __vec_mul(tmp, res, vec_list[i]);
    printf("when a[0] = %d, a[1] = %d ==> a[%d] = %d\n", vec_list[i][1], vec_list[i][0], p, tmp[1]);
    i = i + 1;
    if (i >= 6) break; else continue;
}
[INFO] Matched <Statement>:
{
    __vec_mul(tmp, res, vec_list[i]);
    printf("when a[0] = %d, a[1] = %d ==> a[%d] = %d\n", vec_list[i][1], vec_list[i][0], p, tmp[1]);
    i = i + 1;
    if (i >= 6) break; else continue;
}
[INFO] Matched <ForStatementSelection>:
for (; i < 6 || 1; ) {
    __vec_mul(tmp, res, vec_list[i]);
    printf("when a[0] = %d, a[1] = %d ==> a[%d] = %d\n", vec_list[i][1], vec_list[i][0], p, tmp[1]);
    i = i + 1;
    if (i >= 6) break; else continue;
}
[INFO] Matched <Statement>:
for (; i < 6 || 1; ) {
    __vec_mul(tmp, res, vec_list[i]);
    printf("when a[0] = %d, a[1] = %d ==> a[%d] = %d\n", vec_list[i][1], vec_list[i][0], p, tmp[1]);
    i = i + 1;
    if (i >= 6) break; else continue;
}
[INFO] Matched <BlockItem>:
for (; i < 6 || 1; ) {
    __vec_mul(tmp, res, vec_list[i]);
    printf("when a[0] = %d, a[1] = %d ==> a[%d] = %d\n", vec_list[i][1], vec_list[i][0], p, tmp[1]);
    i = i + 1;
    if (i >= 6) break; else continue;
}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int i = 0;
    for (; i < 6 || 1; ) {
        __vec_mul(tmp, res, vec_list[i]);
        printf("when a[0] = %d, a[1] = %d ==> a[%d] = %d\n", vec_list[i][1], vec_list[i][0], p, tmp[1]);
        i = i + 1;
        if (i >= 6) break; else continue;
    }
}
[INFO] Matched <Statement>:
{
    int i = 0;
    for (; i < 6 || 1; ) {
        __vec_mul(tmp, res, vec_list[i]);
        printf("when a[0] = %d, a[1] = %d ==> a[%d] = %d\n", vec_list[i][1], vec_list[i][0], p, tmp[1]);
        i = i + 1;
        if (i >= 6) break; else continue;
    }
}
[INFO] Matched <IfStatement>:
if (ret || out(res)) {
    int i = 0;
    for (; i < 6 || 1; ) {
        __vec_mul(tmp, res, vec_list[i]);
        printf("when a[0] = %d, a[1] = %d ==> a[%d] = %d\n", vec_list[i][1], vec_list[i][0], p, tmp[1]);
        i = i + 1;
        if (i >= 6) break; else continue;
    }
}  
[INFO] Matched <Statement>:
if (ret || out(res)) {
    int i = 0;
    for (; i < 6 || 1; ) {
        __vec_mul(tmp, res, vec_list[i]);
        printf("when a[0] = %d, a[1] = %d ==> a[%d] = %d\n", vec_list[i][1], vec_list[i][0], p, tmp[1]);
        i = i + 1;
        if (i >= 6) break; else continue;
    }
}  
[INFO] Matched <BlockItem>:
if (ret || out(res)) {
    int i = 0;
    for (; i < 6 || 1; ) {
        __vec_mul(tmp, res, vec_list[i]);
        printf("when a[0] = %d, a[1] = %d ==> a[%d] = %d\n", vec_list[i][1], vec_list[i][0], p, tmp[1]);
        i = i + 1;
        if (i >= 6) break; else continue;
    }
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "//////////////////////////////////////\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("//////////////////////////////////////\n");
[INFO] Matched <Statement>: printf("//////////////////////////////////////\n");
[INFO] Matched <BlockItem>:
printf("//////////////////////////////////////\n");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Matched <Expression>: n
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: 1 - n
[INFO] Matched <Expression>: 1 - n
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (1 - n)
[INFO] Matched <PrimaryExpression>: (1 - n)
[INFO] Matched <UnaryExpression>: (1 - n)
[INFO] Matched <UnaryOperatedExpression>: -(1 - n)
[INFO] Matched <UnaryExpression>: -(1 - n)
[INFO] Matched <UnaryOperatedExpression>: +-(1 - n)
[INFO] Matched <UnaryExpression>: +-(1 - n)
[INFO] Matched <UnaryOperatedExpression>: -+-(1 - n)
[INFO] Matched <UnaryExpression>: -+-(1 - n)
[INFO] Matched <UnaryOperatedExpression>: +-+-(1 - n)
[INFO] Matched <UnaryExpression>: +-+-(1 - n)
[INFO] Matched <UnaryOperatedExpression>: -+-+-(1 - n)
[INFO] Matched <UnaryExpression>: -+-+-(1 - n)
[INFO] Matched <MultiplicativeExpression>: -+-+-(1 - n)
[INFO] Matched <AdditiveExpression>: -+-+-(1 - n)
[INFO] Matched <Expression>: -+-+-(1 - n)
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: n = -+-+-(1 - n);
[INFO] Matched <Statement>: n = -+-+-(1 - n);
[INFO] Matched <BlockItem>:
n = -+-+-(1 - n);
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int p;
    p = getint();
    int ret = power(p, res);
    printf("/* input = %d */\n", p);
    if (ret && error()) {
        n = n - 1;
        continue;
    }  
    if (ret || out(res)) {
        int i = 0;
        for (; i < 6 || 1; ) {
            __vec_mul(tmp, res, vec_list[i]);
            printf("when a[0] = %d, a[1] = %d ==> a[%d] = %d\n", vec_list[i][1], vec_list[i][0], p, tmp[1]);
            i = i + 1;
            if (i >= 6) break; else continue;
        }
    }  
    printf("//////////////////////////////////////\n");
    n = -+-+-(1 - n);
}
[INFO] Matched <Statement>:
{
    int p;
    p = getint();
    int ret = power(p, res);
    printf("/* input = %d */\n", p);
    if (ret && error()) {
        n = n - 1;
        continue;
    }  
    if (ret || out(res)) {
        int i = 0;
        for (; i < 6 || 1; ) {
            __vec_mul(tmp, res, vec_list[i]);
            printf("when a[0] = %d, a[1] = %d ==> a[%d] = %d\n", vec_list[i][1], vec_list[i][0], p, tmp[1]);
            i = i + 1;
            if (i >= 6) break; else continue;
        }
    }  
    printf("//////////////////////////////////////\n");
    n = -+-+-(1 - n);
}
[INFO] Matched <ForStatementSelection>:
for (; n > down; ) {
    int p;
    p = getint();
    int ret = power(p, res);
    printf("/* input = %d */\n", p);
    if (ret && error()) {
        n = n - 1;
        continue;
    }  
    if (ret || out(res)) {
        int i = 0;
        for (; i < 6 || 1; ) {
            __vec_mul(tmp, res, vec_list[i]);
            printf("when a[0] = %d, a[1] = %d ==> a[%d] = %d\n", vec_list[i][1], vec_list[i][0], p, tmp[1]);
            i = i + 1;
            if (i >= 6) break; else continue;
        }
    }  
    printf("//////////////////////////////////////\n");
    n = -+-+-(1 - n);
}
[INFO] Matched <Statement>:
for (; n > down; ) {
    int p;
    p = getint();
    int ret = power(p, res);
    printf("/* input = %d */\n", p);
    if (ret && error()) {
        n = n - 1;
        continue;
    }  
    if (ret || out(res)) {
        int i = 0;
        for (; i < 6 || 1; ) {
            __vec_mul(tmp, res, vec_list[i]);
            printf("when a[0] = %d, a[1] = %d ==> a[%d] = %d\n", vec_list[i][1], vec_list[i][0], p, tmp[1]);
            i = i + 1;
            if (i >= 6) break; else continue;
        }
    }  
    printf("//////////////////////////////////////\n");
    n = -+-+-(1 - n);
}
[INFO] Matched <BlockItem>:
for (; n > down; ) {
    int p;
    p = getint();
    int ret = power(p, res);
    printf("/* input = %d */\n", p);
    if (ret && error()) {
        n = n - 1;
        continue;
    }  
    if (ret || out(res)) {
        int i = 0;
        for (; i < 6 || 1; ) {
            __vec_mul(tmp, res, vec_list[i]);
            printf("when a[0] = %d, a[1] = %d ==> a[%d] = %d\n", vec_list[i][1], vec_list[i][0], p, tmp[1]);
            i = i + 1;
            if (i >= 6) break; else continue;
        }
    }  
    printf("//////////////////////////////////////\n");
    n = -+-+-(1 - n);
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "/****************** END ******************/\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("/****************** END ******************/\n");
[INFO] Matched <Statement>: printf("/****************** END ******************/\n");
[INFO] Matched <BlockItem>:
printf("/****************** END ******************/\n");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: ""
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("");
[INFO] Matched <Statement>: printf("");
[INFO] Matched <BlockItem>:
printf("");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: ""
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("");
[INFO] Matched <Statement>: printf("");
[INFO] Matched <BlockItem>:
printf("");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    const int down = 0 / 10078 + (0 * 45);
    int n;
    n = getint();
    int tmp[2] = {0, 0};
    int res[2][2];
    int vec_list[6][2] = {{1, 0}, {1, 1}, {2, 1}, {3, 1}, {4, 3}, {-1, 1}};
    printf("a[n] = a[n - 1] + a[n - 2] (for different init values)\n");
    for (; n > down; ) {
        int p;
        p = getint();
        int ret = power(p, res);
        printf("/* input = %d */\n", p);
        if (ret && error()) {
            n = n - 1;
            continue;
        }  
        if (ret || out(res)) {
            int i = 0;
            for (; i < 6 || 1; ) {
                __vec_mul(tmp, res, vec_list[i]);
                printf("when a[0] = %d, a[1] = %d ==> a[%d] = %d\n", vec_list[i][1], vec_list[i][0], p, tmp[1]);
                i = i + 1;
                if (i >= 6) break; else continue;
            }
        }  
        printf("//////////////////////////////////////\n");
        n = -+-+-(1 - n);
    }
    printf("/****************** END ******************/\n");
    printf("");
    printf("");
    return 0;
}
[INFO] Matched <MainFuncDefinition>:
int main() {
    const int down = 0 / 10078 + (0 * 45);
    int n;
    n = getint();
    int tmp[2] = {0, 0};
    int res[2][2];
    int vec_list[6][2] = {{1, 0}, {1, 1}, {2, 1}, {3, 1}, {4, 3}, {-1, 1}};
    printf("a[n] = a[n - 1] + a[n - 2] (for different init values)\n");
    for (; n > down; ) {
        int p;
        p = getint();
        int ret = power(p, res);
        printf("/* input = %d */\n", p);
        if (ret && error()) {
            n = n - 1;
            continue;
        }  
        if (ret || out(res)) {
            int i = 0;
            for (; i < 6 || 1; ) {
                __vec_mul(tmp, res, vec_list[i]);
                printf("when a[0] = %d, a[1] = %d ==> a[%d] = %d\n", vec_list[i][1], vec_list[i][0], p, tmp[1]);
                i = i + 1;
                if (i >= 6) break; else continue;
            }
        }  
        printf("//////////////////////////////////////\n");
        n = -+-+-(1 - n);
    }
    printf("/****************** END ******************/\n");
    printf("");
    printf("");
    return 0;
}
[INFO] Matched <CompileUnit>:
int fib_matrix[2][2] = {{1, 1}, {1, 0}};
const int __res[2][2] = {{5, 5}, {2, 3}};
const int __useless[4] = {1, 1, 1, 0};

void __vec_mul(int res[], int mat[][2], int vec[]) {
    res[0] = vec[0] * mat[0][0] + vec[1] * mat[0][1];
    res[1] = vec[0] * mat[1][0] + vec[1] * mat[1][1];
    return;
}

void __mat_mul(int res[][2], int x[][2], int y[][2]) {
    res[0][0] = x[0][0] * y[0][0] + x[0][1] * y[1][0];
    res[0][1] = x[0][0] * y[0][1] + x[0][1] * y[1][1];
    res[1][0] = x[1][0] * y[0][0] + x[1][1] * y[1][0];
    res[1][1] = x[1][0] * y[0][1] + x[1][1] * y[1][1];
    return;
}

int __power(int n, int cur[][2], int res[][2]) {
    if (n == 1) {
        res[0][0] = cur[0][0];
        res[0][1] = cur[0][1];
        res[1][0] = cur[1][0];
        res[1][1] = cur[1][1];
        return 0;
    } else {
        __mat_mul(res, cur, fib_matrix);
        cur[0][0] = res[0][0];
        cur[0][1] = res[0][1];
        cur[1][0] = res[1][0];
        cur[1][1] = res[1][1];
        return __power(n - 1, cur, res);
    }
    return 0;
}

int power(int n, int res[][2]) {
    if (n <= 0) return -1;  
    int temp[2][2] = {{1, 1}, {1, 0}};
    return __power(n, temp, res);
}

int error() {
    printf("Error!\n");
    return 1;
}

int out(int r[][2]) {
    printf("%d %d\n%d %d\n", r[0][0], r[0][1], r[1][0], r[1][1]);
    return 1;
}

int main() {
    const int down = 0 / 10078 + (0 * 45);
    int n;
    n = getint();
    int tmp[2] = {0, 0};
    int res[2][2];
    int vec_list[6][2] = {{1, 0}, {1, 1}, {2, 1}, {3, 1}, {4, 3}, {-1, 1}};
    printf("a[n] = a[n - 1] + a[n - 2] (for different init values)\n");
    for (; n > down; ) {
        int p;
        p = getint();
        int ret = power(p, res);
        printf("/* input = %d */\n", p);
        if (ret && error()) {
            n = n - 1;
            continue;
        }  
        if (ret || out(res)) {
            int i = 0;
            for (; i < 6 || 1; ) {
                __vec_mul(tmp, res, vec_list[i]);
                printf("when a[0] = %d, a[1] = %d ==> a[%d] = %d\n", vec_list[i][1], vec_list[i][0], p, tmp[1]);
                i = i + 1;
                if (i >= 6) break; else continue;
            }
        }  
        printf("//////////////////////////////////////\n");
        n = -+-+-(1 - n);
    }
    printf("/****************** END ******************/\n");
    printf("");
    printf("");
    return 0;
}
[INFO] Test 10
[INFO] Matching <CompileUnit>
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 510
[INFO] Matched <Number>: 510
[INFO] Matched <PrimaryExpression>: 510
[INFO] Matched <UnaryExpression>: 510
[INFO] Matched <MultiplicativeExpression>: 510
[INFO] Matched <AdditiveExpression>: 510
[INFO] Matched <ConstExpression>: 510
[INFO] Consumed Token: ]
[INFO] Matched <VarDefinition>: a[510]
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int a[510];
[INFO] Matched <Declaration>: int a[510];
[INFO] Consumed Token: int
[INFO] Consumed Token: prime
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: prime
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: prime
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 510
[INFO] Matched <Number>: 510
[INFO] Matched <PrimaryExpression>: 510
[INFO] Matched <UnaryExpression>: 510
[INFO] Matched <MultiplicativeExpression>: 510
[INFO] Matched <AdditiveExpression>: 510
[INFO] Matched <ConstExpression>: 510
[INFO] Consumed Token: ]
[INFO] Matched <VarDefinition>: prime[510]
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int prime[510];
[INFO] Matched <Declaration>: int prime[510];
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: reflect1
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 16
[INFO] Matched <Number>: 16
[INFO] Matched <PrimaryExpression>: 16
[INFO] Matched <UnaryExpression>: 16
[INFO] Matched <MultiplicativeExpression>: 16
[INFO] Matched <AdditiveExpression>: 16
[INFO] Matched <ConstExpression>: 16
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 711942876
[INFO] Matched <Number>: 711942876
[INFO] Matched <PrimaryExpression>: 711942876
[INFO] Matched <UnaryExpression>: 711942876
[INFO] Matched <UnaryOperatedExpression>: -711942876
[INFO] Matched <UnaryExpression>: -711942876
[INFO] Matched <MultiplicativeExpression>: -711942876
[INFO] Matched <AdditiveExpression>: -711942876
[INFO] Matched <ConstExpression>: -711942876
[INFO] Matched <ScalarConstInitValue>: -711942876
[INFO] Matched <ConstInitValue>: -711942876
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1060809599
[INFO] Matched <Number>: 1060809599
[INFO] Matched <PrimaryExpression>: 1060809599
[INFO] Matched <UnaryExpression>: 1060809599
[INFO] Matched <UnaryOperatedExpression>: -1060809599
[INFO] Matched <UnaryExpression>: -1060809599
[INFO] Matched <MultiplicativeExpression>: -1060809599
[INFO] Matched <AdditiveExpression>: -1060809599
[INFO] Matched <ConstExpression>: -1060809599
[INFO] Matched <ScalarConstInitValue>: -1060809599
[INFO] Matched <ConstInitValue>: -1060809599
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1758839997
[INFO] Matched <Number>: 1758839997
[INFO] Matched <PrimaryExpression>: 1758839997
[INFO] Matched <UnaryExpression>: 1758839997
[INFO] Matched <MultiplicativeExpression>: 1758839997
[INFO] Matched <AdditiveExpression>: 1758839997
[INFO] Matched <ConstExpression>: 1758839997
[INFO] Matched <ScalarConstInitValue>: 1758839997
[INFO] Matched <ConstInitValue>: 1758839997
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 423174272
[INFO] Matched <Number>: 423174272
[INFO] Matched <PrimaryExpression>: 423174272
[INFO] Matched <UnaryExpression>: 423174272
[INFO] Matched <MultiplicativeExpression>: 423174272
[INFO] Matched <AdditiveExpression>: 423174272
[INFO] Matched <ConstExpression>: 423174272
[INFO] Matched <ScalarConstInitValue>: 423174272
[INFO] Matched <ConstInitValue>: 423174272
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1412407466
[INFO] Matched <Number>: 1412407466
[INFO] Matched <PrimaryExpression>: 1412407466
[INFO] Matched <UnaryExpression>: 1412407466
[INFO] Matched <MultiplicativeExpression>: 1412407466
[INFO] Matched <AdditiveExpression>: 1412407466
[INFO] Matched <ConstExpression>: 1412407466
[INFO] Matched <ScalarConstInitValue>: 1412407466
[INFO] Matched <ConstInitValue>: 1412407466
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 375872692
[INFO] Matched <Number>: 375872692
[INFO] Matched <PrimaryExpression>: 375872692
[INFO] Matched <UnaryExpression>: 375872692
[INFO] Matched <MultiplicativeExpression>: 375872692
[INFO] Matched <AdditiveExpression>: 375872692
[INFO] Matched <ConstExpression>: 375872692
[INFO] Matched <ScalarConstInitValue>: 375872692
[INFO] Matched <ConstInitValue>: 375872692
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1543568839
[INFO] Matched <Number>: 1543568839
[INFO] Matched <PrimaryExpression>: 1543568839
[INFO] Matched <UnaryExpression>: 1543568839
[INFO] Matched <MultiplicativeExpression>: 1543568839
[INFO] Matched <AdditiveExpression>: 1543568839
[INFO] Matched <ConstExpression>: 1543568839
[INFO] Matched <ScalarConstInitValue>: 1543568839
[INFO] Matched <ConstInitValue>: 1543568839
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 915987033
[INFO] Matched <Number>: 915987033
[INFO] Matched <PrimaryExpression>: 915987033
[INFO] Matched <UnaryExpression>: 915987033
[INFO] Matched <MultiplicativeExpression>: 915987033
[INFO] Matched <AdditiveExpression>: 915987033
[INFO] Matched <ConstExpression>: 915987033
[INFO] Matched <ScalarConstInitValue>: 915987033
[INFO] Matched <ConstInitValue>: 915987033
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 698198080
[INFO] Matched <Number>: 698198080
[INFO] Matched <PrimaryExpression>: 698198080
[INFO] Matched <UnaryExpression>: 698198080
[INFO] Matched <MultiplicativeExpression>: 698198080
[INFO] Matched <AdditiveExpression>: 698198080
[INFO] Matched <ConstExpression>: 698198080
[INFO] Matched <ScalarConstInitValue>: 698198080
[INFO] Matched <ConstInitValue>: 698198080
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2143283456
[INFO] Matched <Number>: 2143283456
[INFO] Matched <PrimaryExpression>: 2143283456
[INFO] Matched <UnaryExpression>: 2143283456
[INFO] Matched <UnaryOperatedExpression>: -2143283456
[INFO] Matched <UnaryExpression>: -2143283456
[INFO] Matched <MultiplicativeExpression>: -2143283456
[INFO] Matched <AdditiveExpression>: -2143283456
[INFO] Matched <ConstExpression>: -2143283456
[INFO] Matched <ScalarConstInitValue>: -2143283456
[INFO] Matched <ConstInitValue>: -2143283456
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2059223660
[INFO] Matched <Number>: 2059223660
[INFO] Matched <PrimaryExpression>: 2059223660
[INFO] Matched <UnaryExpression>: 2059223660
[INFO] Matched <MultiplicativeExpression>: 2059223660
[INFO] Matched <AdditiveExpression>: 2059223660
[INFO] Matched <ConstExpression>: 2059223660
[INFO] Matched <ScalarConstInitValue>: 2059223660
[INFO] Matched <ConstInitValue>: 2059223660
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 34179219
[INFO] Matched <Number>: 34179219
[INFO] Matched <PrimaryExpression>: 34179219
[INFO] Matched <UnaryExpression>: 34179219
[INFO] Matched <UnaryOperatedExpression>: -34179219
[INFO] Matched <UnaryExpression>: -34179219
[INFO] Matched <MultiplicativeExpression>: -34179219
[INFO] Matched <AdditiveExpression>: -34179219
[INFO] Matched <ConstExpression>: -34179219
[INFO] Matched <ScalarConstInitValue>: -34179219
[INFO] Matched <ConstInitValue>: -34179219
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 378910912
[INFO] Matched <Number>: 378910912
[INFO] Matched <PrimaryExpression>: 378910912
[INFO] Matched <UnaryExpression>: 378910912
[INFO] Matched <MultiplicativeExpression>: 378910912
[INFO] Matched <AdditiveExpression>: 378910912
[INFO] Matched <ConstExpression>: 378910912
[INFO] Matched <ScalarConstInitValue>: 378910912
[INFO] Matched <ConstInitValue>: 378910912
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1498631475
[INFO] Matched <Number>: 1498631475
[INFO] Matched <PrimaryExpression>: 1498631475
[INFO] Matched <UnaryExpression>: 1498631475
[INFO] Matched <MultiplicativeExpression>: 1498631475
[INFO] Matched <AdditiveExpression>: 1498631475
[INFO] Matched <ConstExpression>: 1498631475
[INFO] Matched <ScalarConstInitValue>: 1498631475
[INFO] Matched <ConstInitValue>: 1498631475
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1853883889
[INFO] Matched <Number>: 1853883889
[INFO] Matched <PrimaryExpression>: 1853883889
[INFO] Matched <UnaryExpression>: 1853883889
[INFO] Matched <UnaryOperatedExpression>: -1853883889
[INFO] Matched <UnaryExpression>: -1853883889
[INFO] Matched <MultiplicativeExpression>: -1853883889
[INFO] Matched <AdditiveExpression>: -1853883889
[INFO] Matched <ConstExpression>: -1853883889
[INFO] Matched <ScalarConstInitValue>: -1853883889
[INFO] Matched <ConstInitValue>: -1853883889
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1640319187
[INFO] Matched <Number>: 1640319187
[INFO] Matched <PrimaryExpression>: 1640319187
[INFO] Matched <UnaryExpression>: 1640319187
[INFO] Matched <MultiplicativeExpression>: 1640319187
[INFO] Matched <AdditiveExpression>: 1640319187
[INFO] Matched <ConstExpression>: 1640319187
[INFO] Matched <ScalarConstInitValue>: 1640319187
[INFO] Matched <ConstInitValue>: 1640319187
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {-711942876, -1060809599, 1758839997, 423174272, 1412407466, 375872692, 1543568839, 915987033, 698198080, -2143283456, 2059223660, -34179219, 378910912, 1498631475, -1853883889, 1640319187}
[INFO] Matched <ConstInitValue>: {-711942876, -1060809599, 1758839997, 423174272, 1412407466, 375872692, 1543568839, 915987033, 698198080, -2143283456, 2059223660, -34179219, 378910912, 1498631475, -1853883889, 1640319187}
[INFO] Matched <ConstDefinition>.reflect1[16] = {-711942876, -1060809599, 1758839997, 423174272, 1412407466, 375872692, 1543568839, 915987033, 698198080, -2143283456, 2059223660, -34179219, 378910912, 1498631475, -1853883889, 1640319187}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int reflect1[16] = {-711942876, -1060809599, 1758839997, 423174272, 1412407466, 375872692, 1543568839, 915987033, 698198080, -2143283456, 2059223660, -34179219, 378910912, 1498631475, -1853883889, 1640319187};
[INFO] Matched <Declaration>: const int reflect1[16] = {-711942876, -1060809599, 1758839997, 423174272, 1412407466, 375872692, 1543568839, 915987033, 698198080, -2143283456, 2059223660, -34179219, 378910912, 1498631475, -1853883889, 1640319187};
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: reflect2
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <ConstExpression>: 5
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <ConstExpression>: 5
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1152785601
[INFO] Matched <Number>: 1152785601
[INFO] Matched <PrimaryExpression>: 1152785601
[INFO] Matched <UnaryExpression>: 1152785601
[INFO] Matched <UnaryOperatedExpression>: -1152785601
[INFO] Matched <UnaryExpression>: -1152785601
[INFO] Matched <MultiplicativeExpression>: -1152785601
[INFO] Matched <AdditiveExpression>: -1152785601
[INFO] Matched <ConstExpression>: -1152785601
[INFO] Matched <ScalarConstInitValue>: -1152785601
[INFO] Matched <ConstInitValue>: -1152785601
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1891446969
[INFO] Matched <Number>: 1891446969
[INFO] Matched <PrimaryExpression>: 1891446969
[INFO] Matched <UnaryExpression>: 1891446969
[INFO] Matched <MultiplicativeExpression>: 1891446969
[INFO] Matched <AdditiveExpression>: 1891446969
[INFO] Matched <ConstExpression>: 1891446969
[INFO] Matched <ScalarConstInitValue>: 1891446969
[INFO] Matched <ConstInitValue>: 1891446969
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 938484211
[INFO] Matched <Number>: 938484211
[INFO] Matched <PrimaryExpression>: 938484211
[INFO] Matched <UnaryExpression>: 938484211
[INFO] Matched <MultiplicativeExpression>: 938484211
[INFO] Matched <AdditiveExpression>: 938484211
[INFO] Matched <ConstExpression>: 938484211
[INFO] Matched <ScalarConstInitValue>: 938484211
[INFO] Matched <ConstInitValue>: 938484211
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1596516698
[INFO] Matched <Number>: 1596516698
[INFO] Matched <PrimaryExpression>: 1596516698
[INFO] Matched <UnaryExpression>: 1596516698
[INFO] Matched <UnaryOperatedExpression>: -1596516698
[INFO] Matched <UnaryExpression>: -1596516698
[INFO] Matched <MultiplicativeExpression>: -1596516698
[INFO] Matched <AdditiveExpression>: -1596516698
[INFO] Matched <ConstExpression>: -1596516698
[INFO] Matched <ScalarConstInitValue>: -1596516698
[INFO] Matched <ConstInitValue>: -1596516698
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1681072330
[INFO] Matched <Number>: 1681072330
[INFO] Matched <PrimaryExpression>: 1681072330
[INFO] Matched <UnaryExpression>: 1681072330
[INFO] Matched <MultiplicativeExpression>: 1681072330
[INFO] Matched <AdditiveExpression>: 1681072330
[INFO] Matched <ConstExpression>: 1681072330
[INFO] Matched <ScalarConstInitValue>: 1681072330
[INFO] Matched <ConstInitValue>: 1681072330
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {-1152785601, 1891446969, 938484211, -1596516698, 1681072330}
[INFO] Matched <ConstInitValue>: {-1152785601, 1891446969, 938484211, -1596516698, 1681072330}
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 128222498
[INFO] Matched <Number>: 128222498
[INFO] Matched <PrimaryExpression>: 128222498
[INFO] Matched <UnaryExpression>: 128222498
[INFO] Matched <MultiplicativeExpression>: 128222498
[INFO] Matched <AdditiveExpression>: 128222498
[INFO] Matched <ConstExpression>: 128222498
[INFO] Matched <ScalarConstInitValue>: 128222498
[INFO] Matched <ConstInitValue>: 128222498
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1090169129
[INFO] Matched <Number>: 1090169129
[INFO] Matched <PrimaryExpression>: 1090169129
[INFO] Matched <UnaryExpression>: 1090169129
[INFO] Matched <MultiplicativeExpression>: 1090169129
[INFO] Matched <AdditiveExpression>: 1090169129
[INFO] Matched <ConstExpression>: 1090169129
[INFO] Matched <ScalarConstInitValue>: 1090169129
[INFO] Matched <ConstInitValue>: 1090169129
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 347746822
[INFO] Matched <Number>: 347746822
[INFO] Matched <PrimaryExpression>: 347746822
[INFO] Matched <UnaryExpression>: 347746822
[INFO] Matched <UnaryOperatedExpression>: -347746822
[INFO] Matched <UnaryExpression>: -347746822
[INFO] Matched <MultiplicativeExpression>: -347746822
[INFO] Matched <AdditiveExpression>: -347746822
[INFO] Matched <ConstExpression>: -347746822
[INFO] Matched <ScalarConstInitValue>: -347746822
[INFO] Matched <ConstInitValue>: -347746822
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 326257601
[INFO] Matched <Number>: 326257601
[INFO] Matched <PrimaryExpression>: 326257601
[INFO] Matched <UnaryExpression>: 326257601
[INFO] Matched <UnaryOperatedExpression>: -326257601
[INFO] Matched <UnaryExpression>: -326257601
[INFO] Matched <MultiplicativeExpression>: -326257601
[INFO] Matched <AdditiveExpression>: -326257601
[INFO] Matched <ConstExpression>: -326257601
[INFO] Matched <ScalarConstInitValue>: -326257601
[INFO] Matched <ConstInitValue>: -326257601
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1366930863
[INFO] Matched <Number>: 1366930863
[INFO] Matched <PrimaryExpression>: 1366930863
[INFO] Matched <UnaryExpression>: 1366930863
[INFO] Matched <UnaryOperatedExpression>: -1366930863
[INFO] Matched <UnaryExpression>: -1366930863
[INFO] Matched <MultiplicativeExpression>: -1366930863
[INFO] Matched <AdditiveExpression>: -1366930863
[INFO] Matched <ConstExpression>: -1366930863
[INFO] Matched <ScalarConstInitValue>: -1366930863
[INFO] Matched <ConstInitValue>: -1366930863
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {128222498, 1090169129, -347746822, -326257601, -1366930863}
[INFO] Matched <ConstInitValue>: {128222498, 1090169129, -347746822, -326257601, -1366930863}
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 823961496
[INFO] Matched <Number>: 823961496
[INFO] Matched <PrimaryExpression>: 823961496
[INFO] Matched <UnaryExpression>: 823961496
[INFO] Matched <UnaryOperatedExpression>: -823961496
[INFO] Matched <UnaryExpression>: -823961496
[INFO] Matched <MultiplicativeExpression>: -823961496
[INFO] Matched <AdditiveExpression>: -823961496
[INFO] Matched <ConstExpression>: -823961496
[INFO] Matched <ScalarConstInitValue>: -823961496
[INFO] Matched <ConstInitValue>: -823961496
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2103453081
[INFO] Matched <Number>: 2103453081
[INFO] Matched <PrimaryExpression>: 2103453081
[INFO] Matched <UnaryExpression>: 2103453081
[INFO] Matched <MultiplicativeExpression>: 2103453081
[INFO] Matched <AdditiveExpression>: 2103453081
[INFO] Matched <ConstExpression>: 2103453081
[INFO] Matched <ScalarConstInitValue>: 2103453081
[INFO] Matched <ConstInitValue>: 2103453081
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 402114823
[INFO] Matched <Number>: 402114823
[INFO] Matched <PrimaryExpression>: 402114823
[INFO] Matched <UnaryExpression>: 402114823
[INFO] Matched <UnaryOperatedExpression>: -402114823
[INFO] Matched <UnaryExpression>: -402114823
[INFO] Matched <MultiplicativeExpression>: -402114823
[INFO] Matched <AdditiveExpression>: -402114823
[INFO] Matched <ConstExpression>: -402114823
[INFO] Matched <ScalarConstInitValue>: -402114823
[INFO] Matched <ConstInitValue>: -402114823
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2139806715
[INFO] Matched <Number>: 2139806715
[INFO] Matched <PrimaryExpression>: 2139806715
[INFO] Matched <UnaryExpression>: 2139806715
[INFO] Matched <MultiplicativeExpression>: 2139806715
[INFO] Matched <AdditiveExpression>: 2139806715
[INFO] Matched <ConstExpression>: 2139806715
[INFO] Matched <ScalarConstInitValue>: 2139806715
[INFO] Matched <ConstInitValue>: 2139806715
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 732814375
[INFO] Matched <Number>: 732814375
[INFO] Matched <PrimaryExpression>: 732814375
[INFO] Matched <UnaryExpression>: 732814375
[INFO] Matched <UnaryOperatedExpression>: -732814375
[INFO] Matched <UnaryExpression>: -732814375
[INFO] Matched <MultiplicativeExpression>: -732814375
[INFO] Matched <AdditiveExpression>: -732814375
[INFO] Matched <ConstExpression>: -732814375
[INFO] Matched <ScalarConstInitValue>: -732814375
[INFO] Matched <ConstInitValue>: -732814375
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {-823961496, 2103453081, -402114823, 2139806715, -732814375}
[INFO] Matched <ConstInitValue>: {-823961496, 2103453081, -402114823, 2139806715, -732814375}
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1302967469
[INFO] Matched <Number>: 1302967469
[INFO] Matched <PrimaryExpression>: 1302967469
[INFO] Matched <UnaryExpression>: 1302967469
[INFO] Matched <MultiplicativeExpression>: 1302967469
[INFO] Matched <AdditiveExpression>: 1302967469
[INFO] Matched <ConstExpression>: 1302967469
[INFO] Matched <ScalarConstInitValue>: 1302967469
[INFO] Matched <ConstInitValue>: 1302967469
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1623817872
[INFO] Matched <Number>: 1623817872
[INFO] Matched <PrimaryExpression>: 1623817872
[INFO] Matched <UnaryExpression>: 1623817872
[INFO] Matched <MultiplicativeExpression>: 1623817872
[INFO] Matched <AdditiveExpression>: 1623817872
[INFO] Matched <ConstExpression>: 1623817872
[INFO] Matched <ScalarConstInitValue>: 1623817872
[INFO] Matched <ConstInitValue>: 1623817872
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 898372270
[INFO] Matched <Number>: 898372270
[INFO] Matched <PrimaryExpression>: 898372270
[INFO] Matched <UnaryExpression>: 898372270
[INFO] Matched <MultiplicativeExpression>: 898372270
[INFO] Matched <AdditiveExpression>: 898372270
[INFO] Matched <ConstExpression>: 898372270
[INFO] Matched <ScalarConstInitValue>: 898372270
[INFO] Matched <ConstInitValue>: 898372270
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 812618050
[INFO] Matched <Number>: 812618050
[INFO] Matched <PrimaryExpression>: 812618050
[INFO] Matched <UnaryExpression>: 812618050
[INFO] Matched <UnaryOperatedExpression>: -812618050
[INFO] Matched <UnaryExpression>: -812618050
[INFO] Matched <MultiplicativeExpression>: -812618050
[INFO] Matched <AdditiveExpression>: -812618050
[INFO] Matched <ConstExpression>: -812618050
[INFO] Matched <ScalarConstInitValue>: -812618050
[INFO] Matched <ConstInitValue>: -812618050
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1403178881
[INFO] Matched <Number>: 1403178881
[INFO] Matched <PrimaryExpression>: 1403178881
[INFO] Matched <UnaryExpression>: 1403178881
[INFO] Matched <UnaryOperatedExpression>: -1403178881
[INFO] Matched <UnaryExpression>: -1403178881
[INFO] Matched <MultiplicativeExpression>: -1403178881
[INFO] Matched <AdditiveExpression>: -1403178881
[INFO] Matched <ConstExpression>: -1403178881
[INFO] Matched <ScalarConstInitValue>: -1403178881
[INFO] Matched <ConstInitValue>: -1403178881
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {1302967469, 1623817872, 898372270, -812618050, -1403178881}
[INFO] Matched <ConstInitValue>: {1302967469, 1623817872, 898372270, -812618050, -1403178881}
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1776328495
[INFO] Matched <Number>: 1776328495
[INFO] Matched <PrimaryExpression>: 1776328495
[INFO] Matched <UnaryExpression>: 1776328495
[INFO] Matched <UnaryOperatedExpression>: -1776328495
[INFO] Matched <UnaryExpression>: -1776328495
[INFO] Matched <MultiplicativeExpression>: -1776328495
[INFO] Matched <AdditiveExpression>: -1776328495
[INFO] Matched <ConstExpression>: -1776328495
[INFO] Matched <ScalarConstInitValue>: -1776328495
[INFO] Matched <ConstInitValue>: -1776328495
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 958769364
[INFO] Matched <Number>: 958769364
[INFO] Matched <PrimaryExpression>: 958769364
[INFO] Matched <UnaryExpression>: 958769364
[INFO] Matched <MultiplicativeExpression>: 958769364
[INFO] Matched <AdditiveExpression>: 958769364
[INFO] Matched <ConstExpression>: 958769364
[INFO] Matched <ScalarConstInitValue>: 958769364
[INFO] Matched <ConstInitValue>: 958769364
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 47496017
[INFO] Matched <Number>: 47496017
[INFO] Matched <PrimaryExpression>: 47496017
[INFO] Matched <UnaryExpression>: 47496017
[INFO] Matched <MultiplicativeExpression>: 47496017
[INFO] Matched <AdditiveExpression>: 47496017
[INFO] Matched <ConstExpression>: 47496017
[INFO] Matched <ScalarConstInitValue>: 47496017
[INFO] Matched <ConstInitValue>: 47496017
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1384738865
[INFO] Matched <Number>: 1384738865
[INFO] Matched <PrimaryExpression>: 1384738865
[INFO] Matched <UnaryExpression>: 1384738865
[INFO] Matched <UnaryOperatedExpression>: -1384738865
[INFO] Matched <UnaryExpression>: -1384738865
[INFO] Matched <MultiplicativeExpression>: -1384738865
[INFO] Matched <AdditiveExpression>: -1384738865
[INFO] Matched <ConstExpression>: -1384738865
[INFO] Matched <ScalarConstInitValue>: -1384738865
[INFO] Matched <ConstInitValue>: -1384738865
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1751940200
[INFO] Matched <Number>: 1751940200
[INFO] Matched <PrimaryExpression>: 1751940200
[INFO] Matched <UnaryExpression>: 1751940200
[INFO] Matched <MultiplicativeExpression>: 1751940200
[INFO] Matched <AdditiveExpression>: 1751940200
[INFO] Matched <ConstExpression>: 1751940200
[INFO] Matched <ScalarConstInitValue>: 1751940200
[INFO] Matched <ConstInitValue>: 1751940200
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {-1776328495, 958769364, 47496017, -1384738865, 1751940200}
[INFO] Matched <ConstInitValue>: {-1776328495, 958769364, 47496017, -1384738865, 1751940200}
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {{-1152785601, 1891446969, 938484211, -1596516698, 1681072330}, {128222498, 1090169129, -347746822, -326257601, -1366930863}, {-823961496, 2103453081, -402114823, 2139806715, -732814375}, {1302967469, 1623817872, 898372270, -812618050, -1403178881}, {-1776328495, 958769364, 47496017, -1384738865, 1751940200}}
[INFO] Matched <ConstInitValue>: {{-1152785601, 1891446969, 938484211, -1596516698, 1681072330}, {128222498, 1090169129, -347746822, -326257601, -1366930863}, {-823961496, 2103453081, -402114823, 2139806715, -732814375}, {1302967469, 1623817872, 898372270, -812618050, -1403178881}, {-1776328495, 958769364, 47496017, -1384738865, 1751940200}}
[INFO] Matched <ConstDefinition>.reflect2[5][5] = {{-1152785601, 1891446969, 938484211, -1596516698, 1681072330}, {128222498, 1090169129, -347746822, -326257601, -1366930863}, {-823961496, 2103453081, -402114823, 2139806715, -732814375}, {1302967469, 1623817872, 898372270, -812618050, -1403178881}, {-1776328495, 958769364, 47496017, -1384738865, 1751940200}}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int reflect2[5][5] = {{-1152785601, 1891446969, 938484211, -1596516698, 1681072330}, {128222498, 1090169129, -347746822, -326257601, -1366930863}, {-823961496, 2103453081, -402114823, 2139806715, -732814375}, {1302967469, 1623817872, 898372270, -812618050, -1403178881}, {-1776328495, 958769364, 47496017, -1384738865, 1751940200}};
[INFO] Matched <Declaration>: const int reflect2[5][5] = {{-1152785601, 1891446969, 938484211, -1596516698, 1681072330}, {128222498, 1090169129, -347746822, -326257601, -1366930863}, {-823961496, 2103453081, -402114823, 2139806715, -732814375}, {1302967469, 1623817872, 898372270, -812618050, -1403178881}, {-1776328495, 958769364, 47496017, -1384738865, 1751940200}};
[INFO] Consumed Token: int
[INFO] Lexer rolling back...
[INFO] Consumed Token: int
[INFO] Lexer rolling back...
[INFO] Matching <MainFuncDefinition>.
[INFO] Consumed Token: int
[INFO] Consumed Token: main
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: i
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Matched <VarDefinition>: i = 2
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: total
[INFO] Matched <VarDefinition>: total
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int i = 2, total;
[INFO] Matched <Declaration>: int i = 2, total;
[INFO] Matched <BlockItem>:
int i = 2, total;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: total
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: total
[INFO] Matched <LeftValue>: total
[INFO] Matched <PrimaryExpression>: total
[INFO] Matched <UnaryExpression>: total
[INFO] Matched <MultiplicativeExpression>: total
[INFO] Matched <AdditiveExpression>: total
[INFO] Matched <Expression>: total
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: total
[INFO] Matched <LeftValue>: total
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: total = getint();
[INFO] Matched <Statement>: total = getint();
[INFO] Matched <BlockItem>:
total = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: total
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: total
[INFO] Matched <LeftValue>: total
[INFO] Matched <PrimaryExpression>: total
[INFO] Matched <UnaryExpression>: total
[INFO] Matched <MultiplicativeExpression>: total
[INFO] Matched <AdditiveExpression>: total
[INFO] Matched <RelationalExpression>: i < total
[INFO] Matched <EqualityExpression>: i < total
[INFO] Matched <LogicalAndExpression>: i < total
[INFO] Matched <LogicalOrExpression>: i < total
[INFO] Matched <Condition>: i < total
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a[i]
[INFO] Matched <PrimaryExpression>: a[i]
[INFO] Matched <UnaryExpression>: a[i]
[INFO] Matched <MultiplicativeExpression>: a[i]
[INFO] Matched <AdditiveExpression>: a[i]
[INFO] Matched <Expression>: a[i]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a[i]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a[i]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a[i] = 1;
[INFO] Matched <Statement>: a[i] = 1;
[INFO] Matched <BlockItem>:
a[i] = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: i + 1
[INFO] Matched <Expression>: i + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = i + 1;
[INFO] Matched <Statement>: i = i + 1;
[INFO] Matched <BlockItem>:
i = i + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    {}
    {}
    a[i] = 1;
    i = i + 1;
    {}
    {}
}
[INFO] Matched <Statement>:
{
    {}
    {}
    a[i] = 1;
    i = i + 1;
    {}
    {}
}
[INFO] Matched <BlockItem>:
{
    {}
    {}
    a[i] = 1;
    i = i + 1;
    {}
    {}
}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    {
        {}
        {}
        a[i] = 1;
        i = i + 1;
        {}
        {}
    }
}
[INFO] Matched <Statement>:
{
    {
        {}
        {}
        a[i] = 1;
        i = i + 1;
        {}
        {}
    }
}
[INFO] Matched <ForStatementSelection>:
for (; i < total; ) {
    {
        {}
        {}
        a[i] = 1;
        i = i + 1;
        {}
        {}
    }
}
[INFO] Matched <Statement>:
for (; i < total; ) {
    {
        {}
        {}
        a[i] = 1;
        i = i + 1;
        {}
        {}
    }
}
[INFO] Matched <BlockItem>:
for (; i < total; ) {
    {
        {}
        {}
        a[i] = 1;
        i = i + 1;
        {}
        {}
    }
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = 2;
[INFO] Matched <Statement>: i = 2;
[INFO] Matched <BlockItem>:
i = 2;
[INFO] Consumed Token: int
[INFO] Consumed Token: con
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: con
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: con
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: con
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: con = 0
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int con = 0;
[INFO] Matched <Declaration>: int con = 0;
[INFO] Matched <BlockItem>:
int con = 0;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: total
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: total
[INFO] Matched <LeftValue>: total
[INFO] Matched <PrimaryExpression>: total
[INFO] Matched <UnaryExpression>: total
[INFO] Matched <MultiplicativeExpression>: total
[INFO] Matched <AdditiveExpression>: total
[INFO] Matched <RelationalExpression>: i < total
[INFO] Matched <EqualityExpression>: i < total
[INFO] Matched <LogicalAndExpression>: i < total
[INFO] Matched <LogicalOrExpression>: i < total
[INFO] Matched <Condition>: i < total
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a[i]
[INFO] Matched <PrimaryExpression>: a[i]
[INFO] Matched <UnaryExpression>: a[i]
[INFO] Matched <MultiplicativeExpression>: a[i]
[INFO] Matched <AdditiveExpression>: a[i]
[INFO] Matched <RelationalExpression>: a[i]
[INFO] Matched <EqualityExpression>: a[i]
[INFO] Matched <LogicalAndExpression>: a[i]
[INFO] Matched <LogicalOrExpression>: a[i]
[INFO] Matched <Condition>: a[i]
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: prime
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: prime
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: con
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: con
[INFO] Matched <LeftValue>: con
[INFO] Matched <PrimaryExpression>: con
[INFO] Matched <UnaryExpression>: con
[INFO] Matched <MultiplicativeExpression>: con
[INFO] Matched <AdditiveExpression>: con
[INFO] Matched <Expression>: con
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: prime[con]
[INFO] Matched <PrimaryExpression>: prime[con]
[INFO] Matched <UnaryExpression>: prime[con]
[INFO] Matched <MultiplicativeExpression>: prime[con]
[INFO] Matched <AdditiveExpression>: prime[con]
[INFO] Matched <Expression>: prime[con]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: prime
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: con
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: con
[INFO] Matched <LeftValue>: con
[INFO] Matched <PrimaryExpression>: con
[INFO] Matched <UnaryExpression>: con
[INFO] Matched <MultiplicativeExpression>: con
[INFO] Matched <AdditiveExpression>: con
[INFO] Matched <Expression>: con
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: prime[con]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: prime
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: con
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: con
[INFO] Matched <LeftValue>: con
[INFO] Matched <PrimaryExpression>: con
[INFO] Matched <UnaryExpression>: con
[INFO] Matched <MultiplicativeExpression>: con
[INFO] Matched <AdditiveExpression>: con
[INFO] Matched <Expression>: con
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: prime[con]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: prime[con] = i;
[INFO] Matched <Statement>: prime[con] = i;
[INFO] Matched <BlockItem>:
prime[con] = i;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: con
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: con
[INFO] Matched <LeftValue>: con
[INFO] Matched <PrimaryExpression>: con
[INFO] Matched <UnaryExpression>: con
[INFO] Matched <MultiplicativeExpression>: con
[INFO] Matched <AdditiveExpression>: con
[INFO] Matched <Expression>: con
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: con
[INFO] Matched <LeftValue>: con
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: con
[INFO] Matched <LeftValue>: con
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: con
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: con
[INFO] Matched <LeftValue>: con
[INFO] Matched <PrimaryExpression>: con
[INFO] Matched <UnaryExpression>: con
[INFO] Matched <MultiplicativeExpression>: con
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: con + 1
[INFO] Matched <Expression>: con + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: con = con + 1;
[INFO] Matched <Statement>: con = con + 1;
[INFO] Matched <BlockItem>:
con = con + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    {}
    {}
    prime[con] = i;
    con = con + 1;
    {}
    {}
}
[INFO] Matched <Statement>:
{
    {}
    {}
    prime[con] = i;
    con = con + 1;
    {}
    {}
}
[INFO] Matched <BlockItem>:
{
    {}
    {}
    prime[con] = i;
    con = con + 1;
    {}
    {}
}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    {
        {}
        {}
        prime[con] = i;
        con = con + 1;
        {}
        {}
    }
}
[INFO] Matched <Statement>:
{
    {
        {}
        {}
        prime[con] = i;
        con = con + 1;
        {}
        {}
    }
}
[INFO] Matched <IfStatement>:
if (a[i]) {
    {
        {}
        {}
        prime[con] = i;
        con = con + 1;
        {}
        {}
    }
}  
[INFO] Matched <Statement>:
if (a[i]) {
    {
        {}
        {}
        prime[con] = i;
        con = con + 1;
        {}
        {}
    }
}  
[INFO] Matched <BlockItem>:
if (a[i]) {
    {
        {}
        {}
        prime[con] = i;
        con = con + 1;
        {}
        {}
    }
}  
[INFO] Consumed Token: int
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: j
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: j = 0
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int j = 0;
[INFO] Matched <Declaration>: int j = 0;
[INFO] Matched <BlockItem>:
int j = 0;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: con
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: con
[INFO] Matched <LeftValue>: con
[INFO] Matched <PrimaryExpression>: con
[INFO] Matched <UnaryExpression>: con
[INFO] Matched <MultiplicativeExpression>: con
[INFO] Matched <AdditiveExpression>: con
[INFO] Matched <RelationalExpression>: j < con
[INFO] Matched <EqualityExpression>: j < con
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: prime
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: prime
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <Expression>: j
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: prime[j]
[INFO] Matched <PrimaryExpression>: prime[j]
[INFO] Matched <UnaryExpression>: prime[j]
[INFO] Matched <MultiplicativeExpression>: i * prime[j]
[INFO] Matched <AdditiveExpression>: i * prime[j]
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: total
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: total
[INFO] Matched <LeftValue>: total
[INFO] Matched <PrimaryExpression>: total
[INFO] Matched <UnaryExpression>: total
[INFO] Matched <MultiplicativeExpression>: total
[INFO] Matched <AdditiveExpression>: total
[INFO] Matched <RelationalExpression>: i * prime[j] <= total
[INFO] Matched <EqualityExpression>: i * prime[j] <= total
[INFO] Matched <LogicalAndExpression>: j < con && i * prime[j] <= total
[INFO] Matched <LogicalOrExpression>: j < con && i * prime[j] <= total
[INFO] Matched <Condition>: j < con && i * prime[j] <= total
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: prime
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: prime
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <Expression>: j
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: prime[j]
[INFO] Matched <PrimaryExpression>: prime[j]
[INFO] Matched <UnaryExpression>: prime[j]
[INFO] Matched <MultiplicativeExpression>: i * prime[j]
[INFO] Matched <AdditiveExpression>: i * prime[j]
[INFO] Matched <Expression>: i * prime[j]
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a[i * prime[j]]
[INFO] Matched <PrimaryExpression>: a[i * prime[j]]
[INFO] Matched <UnaryExpression>: a[i * prime[j]]
[INFO] Matched <MultiplicativeExpression>: a[i * prime[j]]
[INFO] Matched <AdditiveExpression>: a[i * prime[j]]
[INFO] Matched <Expression>: a[i * prime[j]]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: prime
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: prime
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <Expression>: j
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: prime[j]
[INFO] Matched <PrimaryExpression>: prime[j]
[INFO] Matched <UnaryExpression>: prime[j]
[INFO] Matched <MultiplicativeExpression>: i * prime[j]
[INFO] Matched <AdditiveExpression>: i * prime[j]
[INFO] Matched <Expression>: i * prime[j]
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a[i * prime[j]]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: prime
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: prime
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <Expression>: j
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: prime[j]
[INFO] Matched <PrimaryExpression>: prime[j]
[INFO] Matched <UnaryExpression>: prime[j]
[INFO] Matched <MultiplicativeExpression>: i * prime[j]
[INFO] Matched <AdditiveExpression>: i * prime[j]
[INFO] Matched <Expression>: i * prime[j]
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a[i * prime[j]]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a[i * prime[j]] = 0;
[INFO] Matched <Statement>: a[i * prime[j]] = 0;
[INFO] Matched <BlockItem>:
a[i * prime[j]] = 0;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: prime
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: prime
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <Expression>: j
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: prime[j]
[INFO] Matched <PrimaryExpression>: prime[j]
[INFO] Matched <UnaryExpression>: prime[j]
[INFO] Matched <MultiplicativeExpression>: i % prime[j]
[INFO] Matched <AdditiveExpression>: i % prime[j]
[INFO] Matched <RelationalExpression>: i % prime[j]
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: 0
[INFO] Matched <EqualityExpression>: i % prime[j] == 0
[INFO] Matched <LogicalAndExpression>: i % prime[j] == 0
[INFO] Matched <LogicalOrExpression>: i % prime[j] == 0
[INFO] Matched <Condition>: i % prime[j] == 0
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <IfStatement>:
if (i % prime[j] == 0) break;  
[INFO] Matched <Statement>:
if (i % prime[j] == 0) break;  
[INFO] Matched <BlockItem>:
if (i % prime[j] == 0) break;  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <Expression>: j
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: j + 1
[INFO] Matched <Expression>: j + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: j = j + 1;
[INFO] Matched <Statement>: j = j + 1;
[INFO] Matched <BlockItem>:
j = j + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    {}
    {}
    a[i * prime[j]] = 0;
    if (i % prime[j] == 0) break;  
    j = j + 1;
    {}
    {}
}
[INFO] Matched <Statement>:
{
    {}
    {}
    a[i * prime[j]] = 0;
    if (i % prime[j] == 0) break;  
    j = j + 1;
    {}
    {}
}
[INFO] Matched <BlockItem>:
{
    {}
    {}
    a[i * prime[j]] = 0;
    if (i % prime[j] == 0) break;  
    j = j + 1;
    {}
    {}
}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    {
        {}
        {}
        a[i * prime[j]] = 0;
        if (i % prime[j] == 0) break;  
        j = j + 1;
        {}
        {}
    }
}
[INFO] Matched <Statement>:
{
    {
        {}
        {}
        a[i * prime[j]] = 0;
        if (i % prime[j] == 0) break;  
        j = j + 1;
        {}
        {}
    }
}
[INFO] Matched <ForStatementSelection>:
for (; j < con && i * prime[j] <= total; ) {
    {
        {}
        {}
        a[i * prime[j]] = 0;
        if (i % prime[j] == 0) break;  
        j = j + 1;
        {}
        {}
    }
}
[INFO] Matched <Statement>:
for (; j < con && i * prime[j] <= total; ) {
    {
        {}
        {}
        a[i * prime[j]] = 0;
        if (i % prime[j] == 0) break;  
        j = j + 1;
        {}
        {}
    }
}
[INFO] Matched <BlockItem>:
for (; j < con && i * prime[j] <= total; ) {
    {
        {}
        {}
        a[i * prime[j]] = 0;
        if (i % prime[j] == 0) break;  
        j = j + 1;
        {}
        {}
    }
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: i + 1
[INFO] Matched <Expression>: i + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = i + 1;
[INFO] Matched <Statement>: i = i + 1;
[INFO] Matched <BlockItem>:
i = i + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    {}
    {}
    if (a[i]) {
        {
            {}
            {}
            prime[con] = i;
            con = con + 1;
            {}
            {}
        }
    }  
    int j = 0;
    for (; j < con && i * prime[j] <= total; ) {
        {
            {}
            {}
            a[i * prime[j]] = 0;
            if (i % prime[j] == 0) break;  
            j = j + 1;
            {}
            {}
        }
    }
    i = i + 1;
    {}
    {}
}
[INFO] Matched <Statement>:
{
    {}
    {}
    if (a[i]) {
        {
            {}
            {}
            prime[con] = i;
            con = con + 1;
            {}
            {}
        }
    }  
    int j = 0;
    for (; j < con && i * prime[j] <= total; ) {
        {
            {}
            {}
            a[i * prime[j]] = 0;
            if (i % prime[j] == 0) break;  
            j = j + 1;
            {}
            {}
        }
    }
    i = i + 1;
    {}
    {}
}
[INFO] Matched <BlockItem>:
{
    {}
    {}
    if (a[i]) {
        {
            {}
            {}
            prime[con] = i;
            con = con + 1;
            {}
            {}
        }
    }  
    int j = 0;
    for (; j < con && i * prime[j] <= total; ) {
        {
            {}
            {}
            a[i * prime[j]] = 0;
            if (i % prime[j] == 0) break;  
            j = j + 1;
            {}
            {}
        }
    }
    i = i + 1;
    {}
    {}
}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    {
        {}
        {}
        if (a[i]) {
            {
                {}
                {}
                prime[con] = i;
                con = con + 1;
                {}
                {}
            }
        }  
        int j = 0;
        for (; j < con && i * prime[j] <= total; ) {
            {
                {}
                {}
                a[i * prime[j]] = 0;
                if (i % prime[j] == 0) break;  
                j = j + 1;
                {}
                {}
            }
        }
        i = i + 1;
        {}
        {}
    }
}
[INFO] Matched <Statement>:
{
    {
        {}
        {}
        if (a[i]) {
            {
                {}
                {}
                prime[con] = i;
                con = con + 1;
                {}
                {}
            }
        }  
        int j = 0;
        for (; j < con && i * prime[j] <= total; ) {
            {
                {}
                {}
                a[i * prime[j]] = 0;
                if (i % prime[j] == 0) break;  
                j = j + 1;
                {}
                {}
            }
        }
        i = i + 1;
        {}
        {}
    }
}
[INFO] Matched <ForStatementSelection>:
for (; i < total; ) {
    {
        {}
        {}
        if (a[i]) {
            {
                {}
                {}
                prime[con] = i;
                con = con + 1;
                {}
                {}
            }
        }  
        int j = 0;
        for (; j < con && i * prime[j] <= total; ) {
            {
                {}
                {}
                a[i * prime[j]] = 0;
                if (i % prime[j] == 0) break;  
                j = j + 1;
                {}
                {}
            }
        }
        i = i + 1;
        {}
        {}
    }
}
[INFO] Matched <Statement>:
for (; i < total; ) {
    {
        {}
        {}
        if (a[i]) {
            {
                {}
                {}
                prime[con] = i;
                con = con + 1;
                {}
                {}
            }
        }  
        int j = 0;
        for (; j < con && i * prime[j] <= total; ) {
            {
                {}
                {}
                a[i * prime[j]] = 0;
                if (i % prime[j] == 0) break;  
                j = j + 1;
                {}
                {}
            }
        }
        i = i + 1;
        {}
        {}
    }
}
[INFO] Matched <BlockItem>:
for (; i < total; ) {
    {
        {}
        {}
        if (a[i]) {
            {
                {}
                {}
                prime[con] = i;
                con = con + 1;
                {}
                {}
            }
        }  
        int j = 0;
        for (; j < con && i * prime[j] <= total; ) {
            {
                {}
                {}
                a[i * prime[j]] = 0;
                if (i % prime[j] == 0) break;  
                j = j + 1;
                {}
                {}
            }
        }
        i = i + 1;
        {}
        {}
    }
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = 0;
[INFO] Matched <Statement>: i = 0;
[INFO] Matched <BlockItem>:
i = 0;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 114514
[INFO] Matched <Number>: 114514
[INFO] Matched <PrimaryExpression>: 114514
[INFO] Matched <UnaryExpression>: 114514
[INFO] Matched <MultiplicativeExpression>: 114514
[INFO] Matched <AdditiveExpression>: 114514
[INFO] Matched <RelationalExpression>: 114514
[INFO] Matched <EqualityExpression>: 114514
[INFO] Matched <LogicalAndExpression>: 114514
[INFO] Matched <LogicalOrExpression>: 114514
[INFO] Matched <Condition>: 114514
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a[i]
[INFO] Matched <PrimaryExpression>: a[i]
[INFO] Matched <UnaryExpression>: a[i]
[INFO] Matched <MultiplicativeExpression>: a[i]
[INFO] Matched <AdditiveExpression>: a[i]
[INFO] Matched <RelationalExpression>: a[i]
[INFO] Matched <EqualityExpression>: a[i]
[INFO] Matched <LogicalAndExpression>: a[i]
[INFO] Matched <LogicalOrExpression>: a[i]
[INFO] Matched <Condition>: a[i]
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d %d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: i % 2
[INFO] Matched <AdditiveExpression>: i % 2
[INFO] Matched <Expression>: i % 2
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (i % 2)
[INFO] Matched <PrimaryExpression>: (i % 2)
[INFO] Matched <UnaryExpression>: (i % 2)
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: reflect1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: reflect1
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 16
[INFO] Matched <Number>: 16
[INFO] Matched <PrimaryExpression>: 16
[INFO] Matched <UnaryExpression>: 16
[INFO] Matched <MultiplicativeExpression>: i % 16
[INFO] Matched <AdditiveExpression>: i % 16
[INFO] Matched <Expression>: i % 16
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: reflect1[i % 16]
[INFO] Matched <PrimaryExpression>: reflect1[i % 16]
[INFO] Matched <UnaryExpression>: reflect1[i % 16]
[INFO] Matched <MultiplicativeExpression>: (i % 2) * reflect1[i % 16]
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: i + 1
[INFO] Matched <Expression>: i + 1
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (i + 1)
[INFO] Matched <PrimaryExpression>: (i + 1)
[INFO] Matched <UnaryExpression>: (i + 1)
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: (i + 1) % 2
[INFO] Matched <AdditiveExpression>: (i + 1) % 2
[INFO] Matched <Expression>: (i + 1) % 2
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: ((i + 1) % 2)
[INFO] Matched <PrimaryExpression>: ((i + 1) % 2)
[INFO] Matched <UnaryExpression>: ((i + 1) % 2)
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: reflect2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: reflect2
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: i % 5
[INFO] Matched <AdditiveExpression>: i % 5
[INFO] Matched <Expression>: i % 5
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: i % 5
[INFO] Matched <AdditiveExpression>: i % 5
[INFO] Matched <Expression>: i % 5
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: reflect2[i % 5][i % 5]
[INFO] Matched <PrimaryExpression>: reflect2[i % 5][i % 5]
[INFO] Matched <UnaryExpression>: reflect2[i % 5][i % 5]
[INFO] Matched <MultiplicativeExpression>: ((i + 1) % 2) * reflect2[i % 5][i % 5]
[INFO] Matched <AdditiveExpression>: (i % 2) * reflect1[i % 16] + ((i + 1) % 2) * reflect2[i % 5][i % 5]
[INFO] Matched <Expression>: (i % 2) * reflect1[i % 16] + ((i + 1) % 2) * reflect2[i % 5][i % 5]
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d %d\n", i, (i % 2) * reflect1[i % 16] + ((i + 1) % 2) * reflect2[i % 5][i % 5]);
[INFO] Matched <Statement>: printf("%d %d\n", i, (i % 2) * reflect1[i % 16] + ((i + 1) % 2) * reflect2[i % 5][i % 5]);
[INFO] Matched <IfStatement>:
if (a[i]) printf("%d %d\n", i, (i % 2) * reflect1[i % 16] + ((i + 1) % 2) * reflect2[i % 5][i % 5]);  
[INFO] Matched <Statement>:
if (a[i]) printf("%d %d\n", i, (i % 2) * reflect1[i % 16] + ((i + 1) % 2) * reflect2[i % 5][i % 5]);  
[INFO] Matched <BlockItem>:
if (a[i]) printf("%d %d\n", i, (i % 2) * reflect1[i % 16] + ((i + 1) % 2) * reflect2[i % 5][i % 5]);  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: i + 1
[INFO] Matched <Expression>: i + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = i + 1;
[INFO] Matched <Statement>: i = i + 1;
[INFO] Matched <BlockItem>:
i = i + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: total
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: total
[INFO] Matched <LeftValue>: total
[INFO] Matched <PrimaryExpression>: total
[INFO] Matched <UnaryExpression>: total
[INFO] Matched <MultiplicativeExpression>: total
[INFO] Matched <AdditiveExpression>: total
[INFO] Matched <RelationalExpression>: i < total
[INFO] Matched <EqualityExpression>: i < total
[INFO] Matched <LogicalAndExpression>: i < total
[INFO] Matched <LogicalOrExpression>: i < total
[INFO] Matched <Condition>: i < total
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <ContinueStatement>.
[INFO] Consumed Token: continue
[INFO] Consumed Token: ;
[INFO] Matched <ContinueStatement>: continue;
[INFO] Matched <Statement>: continue;
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <IfStatement>:
if (i < total) continue; else break;
[INFO] Matched <Statement>:
if (i < total) continue; else break;
[INFO] Matched <BlockItem>:
if (i < total) continue; else break;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ContinueStatement>.
[INFO] Consumed Token: continue
[INFO] Consumed Token: ;
[INFO] Matched <ContinueStatement>: continue;
[INFO] Matched <Statement>: continue;
[INFO] Matched <BlockItem>:
continue;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ContinueStatement>.
[INFO] Consumed Token: continue
[INFO] Consumed Token: ;
[INFO] Matched <ContinueStatement>: continue;
[INFO] Matched <Statement>: continue;
[INFO] Matched <BlockItem>:
continue;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ContinueStatement>.
[INFO] Consumed Token: continue
[INFO] Consumed Token: ;
[INFO] Matched <ContinueStatement>: continue;
[INFO] Matched <Statement>: continue;
[INFO] Matched <BlockItem>:
continue;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ContinueStatement>.
[INFO] Consumed Token: continue
[INFO] Consumed Token: ;
[INFO] Matched <ContinueStatement>: continue;
[INFO] Matched <Statement>: continue;
[INFO] Matched <BlockItem>:
continue;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    {}
    {}
    if (a[i]) printf("%d %d\n", i, (i % 2) * reflect1[i % 16] + ((i + 1) % 2) * reflect2[i % 5][i % 5]);  
    i = i + 1;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    if (i < total) continue; else break;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    continue;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    break;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    continue;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    break;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    continue;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    break;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    continue;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    break;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    {}
    {}
}
[INFO] Matched <Statement>:
{
    {}
    {}
    if (a[i]) printf("%d %d\n", i, (i % 2) * reflect1[i % 16] + ((i + 1) % 2) * reflect2[i % 5][i % 5]);  
    i = i + 1;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    if (i < total) continue; else break;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    continue;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    break;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    continue;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    break;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    continue;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    break;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    continue;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    break;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    {}
    {}
}
[INFO] Matched <BlockItem>:
{
    {}
    {}
    if (a[i]) printf("%d %d\n", i, (i % 2) * reflect1[i % 16] + ((i + 1) % 2) * reflect2[i % 5][i % 5]);  
    i = i + 1;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    if (i < total) continue; else break;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    continue;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    break;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    continue;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    break;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    continue;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    break;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    continue;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    break;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    {}
    {}
}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    {
        {}
        {}
        if (a[i]) printf("%d %d\n", i, (i % 2) * reflect1[i % 16] + ((i + 1) % 2) * reflect2[i % 5][i % 5]);  
        i = i + 1;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        if (i < total) continue; else break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        continue;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        continue;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        continue;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        continue;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        {}
        {}
    }
}
[INFO] Matched <Statement>:
{
    {
        {}
        {}
        if (a[i]) printf("%d %d\n", i, (i % 2) * reflect1[i % 16] + ((i + 1) % 2) * reflect2[i % 5][i % 5]);  
        i = i + 1;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        if (i < total) continue; else break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        continue;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        continue;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        continue;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        continue;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        {}
        {}
    }
}
[INFO] Matched <ForStatementSelection>:
for (; 114514; ) {
    {
        {}
        {}
        if (a[i]) printf("%d %d\n", i, (i % 2) * reflect1[i % 16] + ((i + 1) % 2) * reflect2[i % 5][i % 5]);  
        i = i + 1;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        if (i < total) continue; else break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        continue;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        continue;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        continue;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        continue;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        {}
        {}
    }
}
[INFO] Matched <Statement>:
for (; 114514; ) {
    {
        {}
        {}
        if (a[i]) printf("%d %d\n", i, (i % 2) * reflect1[i % 16] + ((i + 1) % 2) * reflect2[i % 5][i % 5]);  
        i = i + 1;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        if (i < total) continue; else break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        continue;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        continue;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        continue;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        continue;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        {}
        {}
    }
}
[INFO] Matched <BlockItem>:
for (; 114514; ) {
    {
        {}
        {}
        if (a[i]) printf("%d %d\n", i, (i % 2) * reflect1[i % 16] + ((i + 1) % 2) * reflect2[i % 5][i % 5]);  
        i = i + 1;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        if (i < total) continue; else break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        continue;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        continue;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        continue;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        continue;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        break;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        {}
        {}
    }
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int i = 2, total;
    total = getint();
    for (; i < total; ) {
        {
            {}
            {}
            a[i] = 1;
            i = i + 1;
            {}
            {}
        }
    }
    i = 2;
    int con = 0;
    for (; i < total; ) {
        {
            {}
            {}
            if (a[i]) {
                {
                    {}
                    {}
                    prime[con] = i;
                    con = con + 1;
                    {}
                    {}
                }
            }  
            int j = 0;
            for (; j < con && i * prime[j] <= total; ) {
                {
                    {}
                    {}
                    a[i * prime[j]] = 0;
                    if (i % prime[j] == 0) break;  
                    j = j + 1;
                    {}
                    {}
                }
            }
            i = i + 1;
            {}
            {}
        }
    }
    i = 0;
    for (; 114514; ) {
        {
            {}
            {}
            if (a[i]) printf("%d %d\n", i, (i % 2) * reflect1[i % 16] + ((i + 1) % 2) * reflect2[i % 5][i % 5]);  
            i = i + 1;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            if (i < total) continue; else break;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            continue;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            break;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            continue;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            break;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            continue;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            break;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            continue;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            break;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            {}
            {}
        }
    }
    return 0;
}
[INFO] Matched <MainFuncDefinition>:
int main() {
    int i = 2, total;
    total = getint();
    for (; i < total; ) {
        {
            {}
            {}
            a[i] = 1;
            i = i + 1;
            {}
            {}
        }
    }
    i = 2;
    int con = 0;
    for (; i < total; ) {
        {
            {}
            {}
            if (a[i]) {
                {
                    {}
                    {}
                    prime[con] = i;
                    con = con + 1;
                    {}
                    {}
                }
            }  
            int j = 0;
            for (; j < con && i * prime[j] <= total; ) {
                {
                    {}
                    {}
                    a[i * prime[j]] = 0;
                    if (i % prime[j] == 0) break;  
                    j = j + 1;
                    {}
                    {}
                }
            }
            i = i + 1;
            {}
            {}
        }
    }
    i = 0;
    for (; 114514; ) {
        {
            {}
            {}
            if (a[i]) printf("%d %d\n", i, (i % 2) * reflect1[i % 16] + ((i + 1) % 2) * reflect2[i % 5][i % 5]);  
            i = i + 1;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            if (i < total) continue; else break;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            continue;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            break;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            continue;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            break;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            continue;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            break;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            continue;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            break;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            {}
            {}
        }
    }
    return 0;
}
[INFO] Matched <CompileUnit>:
int a[510];
int prime[510];
const int reflect1[16] = {-711942876, -1060809599, 1758839997, 423174272, 1412407466, 375872692, 1543568839, 915987033, 698198080, -2143283456, 2059223660, -34179219, 378910912, 1498631475, -1853883889, 1640319187};
const int reflect2[5][5] = {{-1152785601, 1891446969, 938484211, -1596516698, 1681072330}, {128222498, 1090169129, -347746822, -326257601, -1366930863}, {-823961496, 2103453081, -402114823, 2139806715, -732814375}, {1302967469, 1623817872, 898372270, -812618050, -1403178881}, {-1776328495, 958769364, 47496017, -1384738865, 1751940200}};

int main() {
    int i = 2, total;
    total = getint();
    for (; i < total; ) {
        {
            {}
            {}
            a[i] = 1;
            i = i + 1;
            {}
            {}
        }
    }
    i = 2;
    int con = 0;
    for (; i < total; ) {
        {
            {}
            {}
            if (a[i]) {
                {
                    {}
                    {}
                    prime[con] = i;
                    con = con + 1;
                    {}
                    {}
                }
            }  
            int j = 0;
            for (; j < con && i * prime[j] <= total; ) {
                {
                    {}
                    {}
                    a[i * prime[j]] = 0;
                    if (i % prime[j] == 0) break;  
                    j = j + 1;
                    {}
                    {}
                }
            }
            i = i + 1;
            {}
            {}
        }
    }
    i = 0;
    for (; 114514; ) {
        {
            {}
            {}
            if (a[i]) printf("%d %d\n", i, (i % 2) * reflect1[i % 16] + ((i + 1) % 2) * reflect2[i % 5][i % 5]);  
            i = i + 1;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            if (i < total) continue; else break;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            continue;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            break;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            continue;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            break;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            continue;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            break;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            continue;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            break;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            ;
            {}
            {}
        }
    }
    return 0;
}
[INFO] Test 11
[INFO] Matching <CompileUnit>
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: _a
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <ConstExpression>: 0
[INFO] Matched <ScalarConstInitValue>: 0
[INFO] Matched <ConstInitValue>: 0
[INFO] Matched <ConstDefinition>._a = 0
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int _a = 0;
[INFO] Matched <Declaration>: const int _a = 0;
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: HelLo_World
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <ConstExpression>: 5
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 55
[INFO] Matched <Number>: 55
[INFO] Matched <PrimaryExpression>: 55
[INFO] Matched <UnaryExpression>: 55
[INFO] Matched <MultiplicativeExpression>: 55
[INFO] Matched <AdditiveExpression>: 55
[INFO] Matched <ConstExpression>: 55
[INFO] Matched <ScalarConstInitValue>: 55
[INFO] Matched <ConstInitValue>: 55
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <ConstExpression>: 0
[INFO] Matched <ScalarConstInitValue>: 0
[INFO] Matched <ConstInitValue>: 0
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <ConstExpression>: 10
[INFO] Matched <ScalarConstInitValue>: 10
[INFO] Matched <ConstInitValue>: 10
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 9999
[INFO] Matched <Number>: 9999
[INFO] Matched <PrimaryExpression>: 9999
[INFO] Matched <UnaryExpression>: 9999
[INFO] Matched <UnaryOperatedExpression>: +9999
[INFO] Matched <UnaryExpression>: +9999
[INFO] Matched <MultiplicativeExpression>: +9999
[INFO] Matched <AdditiveExpression>: +9999
[INFO] Matched <ConstExpression>: +9999
[INFO] Matched <ScalarConstInitValue>: +9999
[INFO] Matched <ConstInitValue>: +9999
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {1, 55, 0, 10, +9999}
[INFO] Matched <ConstInitValue>: {1, 55, 0, 10, +9999}
[INFO] Matched <ConstDefinition>.HelLo_World[5] = {1, 55, 0, 10, +9999}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int HelLo_World[5] = {1, 55, 0, 10, +9999};
[INFO] Matched <Declaration>: const int HelLo_World[5] = {1, 55, 0, 10, +9999};
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: a_r__r
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: -1
[INFO] Matched <UnaryExpression>: -1
[INFO] Matched <MultiplicativeExpression>: -1
[INFO] Matched <AdditiveExpression>: -1
[INFO] Matched <ConstExpression>: -1
[INFO] Matched <ScalarConstInitValue>: -1
[INFO] Matched <ConstInitValue>: -1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <ConstExpression>: 0
[INFO] Matched <ScalarConstInitValue>: 0
[INFO] Matched <ConstInitValue>: 0
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {-1, 0}
[INFO] Matched <ConstInitValue>: {-1, 0}
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: 6
[INFO] Matched <ConstExpression>: 6
[INFO] Matched <ScalarConstInitValue>: 6
[INFO] Matched <ConstInitValue>: 6
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 555
[INFO] Matched <Number>: 555
[INFO] Matched <PrimaryExpression>: 555
[INFO] Matched <UnaryExpression>: 555
[INFO] Matched <UnaryOperatedExpression>: -555
[INFO] Matched <UnaryExpression>: -555
[INFO] Matched <MultiplicativeExpression>: -555
[INFO] Matched <AdditiveExpression>: -555
[INFO] Matched <ConstExpression>: -555
[INFO] Matched <ScalarConstInitValue>: -555
[INFO] Matched <ConstInitValue>: -555
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {6, -555}
[INFO] Matched <ConstInitValue>: {6, -555}
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {{-1, 0}, {6, -555}}
[INFO] Matched <ConstInitValue>: {{-1, 0}, {6, -555}}
[INFO] Matched <ConstDefinition>.a_r__r[2][2] = {{-1, 0}, {6, -555}}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int a_r__r[2][2] = {{-1, 0}, {6, -555}};
[INFO] Matched <Declaration>: const int a_r__r[2][2] = {{-1, 0}, {6, -555}};
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: _A
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: 6
[INFO] Matched <ConstExpression>: 6
[INFO] Matched <ScalarConstInitValue>: 6
[INFO] Matched <ConstInitValue>: 6
[INFO] Matched <ConstDefinition>._A = 6
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: B
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 9966
[INFO] Matched <Number>: 9966
[INFO] Matched <PrimaryExpression>: 9966
[INFO] Matched <UnaryExpression>: 9966
[INFO] Matched <MultiplicativeExpression>: 9966
[INFO] Matched <AdditiveExpression>: 9966
[INFO] Matched <ConstExpression>: 9966
[INFO] Matched <ScalarConstInitValue>: 9966
[INFO] Matched <ConstInitValue>: 9966
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {9966}
[INFO] Matched <ConstInitValue>: {9966}
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {{9966}}
[INFO] Matched <ConstInitValue>: {{9966}}
[INFO] Matched <ConstDefinition>.B[1][1] = {{9966}}
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: _
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 12
[INFO] Matched <Number>: 12
[INFO] Matched <PrimaryExpression>: 12
[INFO] Matched <UnaryExpression>: 12
[INFO] Matched <MultiplicativeExpression>: 12
[INFO] Matched <AdditiveExpression>: 12
[INFO] Matched <ConstExpression>: 12
[INFO] Matched <ScalarConstInitValue>: 12
[INFO] Matched <ConstInitValue>: 12
[INFO] Matched <ConstDefinition>._ = 12
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: c
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 555
[INFO] Matched <Number>: 555
[INFO] Matched <PrimaryExpression>: 555
[INFO] Matched <UnaryExpression>: 555
[INFO] Matched <MultiplicativeExpression>: 555
[INFO] Matched <AdditiveExpression>: 555
[INFO] Matched <ConstExpression>: 555
[INFO] Matched <ScalarConstInitValue>: 555
[INFO] Matched <ConstInitValue>: 555
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {555}
[INFO] Matched <ConstInitValue>: {555}
[INFO] Matched <ConstDefinition>.c[1] = {555}
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: __
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <ConstExpression>: 4
[INFO] Matched <ScalarConstInitValue>: 4
[INFO] Matched <ConstInitValue>: 4
[INFO] Matched <ConstDefinition>.__ = 4
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: con_6
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <ConstExpression>: 0
[INFO] Matched <ScalarConstInitValue>: 0
[INFO] Matched <ConstInitValue>: 0
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {0}
[INFO] Matched <ConstInitValue>: {0}
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: 6
[INFO] Matched <ConstExpression>: 6
[INFO] Matched <ScalarConstInitValue>: 6
[INFO] Matched <ConstInitValue>: 6
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {6}
[INFO] Matched <ConstInitValue>: {6}
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {{0}, {6}}
[INFO] Matched <ConstInitValue>: {{0}, {6}}
[INFO] Matched <ConstDefinition>.con_6[2][1] = {{0}, {6}}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int _A = 6, B[1][1] = {{9966}}, _ = 12, c[1] = {555}, __ = 4, con_6[2][1] = {{0}, {6}};
[INFO] Matched <Declaration>: const int _A = 6, B[1][1] = {{9966}}, _ = 12, c[1] = {555}, __ = 4, con_6[2][1] = {{0}, {6}};
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: lll
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Matched <ConstDefinition>.lll = 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: rrr
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Matched <ConstDefinition>.rrr = 2
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int lll = 1, rrr = 2;
[INFO] Matched <Declaration>: const int lll = 1, rrr = 2;
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: awk_
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _A
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _A
[INFO] Matched <LeftValue>: _A
[INFO] Matched <PrimaryExpression>: _A
[INFO] Matched <UnaryExpression>: _A
[INFO] Matched <MultiplicativeExpression>: _A
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _a
[INFO] Matched <LeftValue>: _a
[INFO] Matched <PrimaryExpression>: _a
[INFO] Matched <UnaryExpression>: _a
[INFO] Matched <MultiplicativeExpression>: _a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: _A + _a + 5
[INFO] Matched <ConstExpression>: _A + _a + 5
[INFO] Matched <ScalarConstInitValue>: _A + _a + 5
[INFO] Matched <ConstInitValue>: _A + _a + 5
[INFO] Matched <ConstDefinition>.awk_ = _A + _a + 5
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int awk_ = _A + _a + 5;
[INFO] Matched <Declaration>: const int awk_ = _A + _a + 5;
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: const_num
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1 + 5 - 1
[INFO] Matched <ConstExpression>: 1 + 5 - 1
[INFO] Matched <ScalarConstInitValue>: 1 + 5 - 1
[INFO] Matched <ConstInitValue>: 1 + 5 - 1
[INFO] Matched <ConstDefinition>.const_num = 1 + 5 - 1
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int const_num = 1 + 5 - 1;
[INFO] Matched <Declaration>: const int const_num = 1 + 5 - 1;
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: yyy
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1 + 1
[INFO] Matched <ConstExpression>: 1 + 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <ConstExpression>: 0
[INFO] Matched <ScalarConstInitValue>: 0
[INFO] Matched <ConstInitValue>: 0
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {1, 0, 2}
[INFO] Matched <ConstInitValue>: {1, 0, 2}
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: -1
[INFO] Matched <UnaryExpression>: -1
[INFO] Matched <MultiplicativeExpression>: -1
[INFO] Matched <AdditiveExpression>: -1
[INFO] Matched <ConstExpression>: -1
[INFO] Matched <ScalarConstInitValue>: -1
[INFO] Matched <ConstInitValue>: -1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Matched <ScalarConstInitValue>: 3
[INFO] Matched <ConstInitValue>: 3
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <UnaryOperatedExpression>: -4
[INFO] Matched <UnaryExpression>: -4
[INFO] Matched <MultiplicativeExpression>: -4
[INFO] Matched <AdditiveExpression>: -4
[INFO] Matched <ConstExpression>: -4
[INFO] Matched <ScalarConstInitValue>: -4
[INFO] Matched <ConstInitValue>: -4
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {-1, 3, -4}
[INFO] Matched <ConstInitValue>: {-1, 3, -4}
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {{1, 0, 2}, {-1, 3, -4}}
[INFO] Matched <ConstInitValue>: {{1, 0, 2}, {-1, 3, -4}}
[INFO] Matched <ConstDefinition>.yyy[1 + 1][3] = {{1, 0, 2}, {-1, 3, -4}}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int yyy[1 + 1][3] = {{1, 0, 2}, {-1, 3, -4}};
[INFO] Matched <Declaration>: const int yyy[1 + 1][3] = {{1, 0, 2}, {-1, 3, -4}};
[INFO] Consumed Token: int
[INFO] Consumed Token: var_1
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: var_1
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: var_1
[INFO] Matched <VarDefinition>: var_1
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int var_1;
[INFO] Matched <Declaration>: int var_1;
[INFO] Consumed Token: int
[INFO] Consumed Token: var_2
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: var_2
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: var_2
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 100
[INFO] Matched <Number>: 100
[INFO] Matched <PrimaryExpression>: 100
[INFO] Matched <UnaryExpression>: 100
[INFO] Matched <MultiplicativeExpression>: 100
[INFO] Matched <AdditiveExpression>: 100
[INFO] Matched <ConstExpression>: 100
[INFO] Consumed Token: ]
[INFO] Matched <VarDefinition>: var_2[100]
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int var_2[100];
[INFO] Matched <Declaration>: int var_2[100];
[INFO] Consumed Token: int
[INFO] Consumed Token: var_3
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: var_3
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: var_3
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 12
[INFO] Matched <Number>: 12
[INFO] Matched <PrimaryExpression>: 12
[INFO] Matched <UnaryExpression>: 12
[INFO] Matched <MultiplicativeExpression>: 12
[INFO] Matched <AdditiveExpression>: 12
[INFO] Matched <ConstExpression>: 12
[INFO] Consumed Token: ]
[INFO] Matched <VarDefinition>: var_3[2][12]
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int var_3[2][12];
[INFO] Matched <Declaration>: int var_3[2][12];
[INFO] Consumed Token: int
[INFO] Consumed Token: varr_1
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: varr_1
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: varr_1
[INFO] Matched <VarDefinition>: varr_1
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: varr_2
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <Expression>: 10
[INFO] Matched <ScalarVarInitValue>: 10
[INFO] Matched <VarInitValue>: 10
[INFO] Matched <VarDefinition>: varr_2 = 10
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: varr_3
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1 + 1
[INFO] Matched <ConstExpression>: 1 + 1
[INFO] Consumed Token: ]
[INFO] Matched <VarDefinition>: varr_3[1 + 1]
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: varr_4
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <ConstExpression>: 5
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 999
[INFO] Matched <Number>: 999
[INFO] Matched <PrimaryExpression>: 999
[INFO] Matched <UnaryExpression>: 999
[INFO] Matched <MultiplicativeExpression>: 999
[INFO] Matched <AdditiveExpression>: 999
[INFO] Matched <ConstExpression>: 999
[INFO] Consumed Token: ]
[INFO] Matched <VarDefinition>: varr_4[5][999]
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int varr_1, varr_2 = 10, varr_3[1 + 1], varr_4[5][999];
[INFO] Matched <Declaration>: int varr_1, varr_2 = 10, varr_3[1 + 1], varr_4[5][999];
[INFO] Consumed Token: int
[INFO] Consumed Token: varrr_1
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: varrr_1
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: varrr_1
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <Expression>: 10
[INFO] Matched <ScalarVarInitValue>: 10
[INFO] Matched <VarInitValue>: 10
[INFO] Matched <VarDefinition>: varrr_1 = 10
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int varrr_1 = 10;
[INFO] Matched <Declaration>: int varrr_1 = 10;
[INFO] Consumed Token: int
[INFO] Consumed Token: varrr_2
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: varrr_2
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: varrr_2
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2}
[INFO] Matched <VarInitValue>: {1, 2}
[INFO] Matched <VarDefinition>: varrr_2[2] = {1, 2}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int varrr_2[2] = {1, 2};
[INFO] Matched <Declaration>: int varrr_2[2] = {1, 2};
[INFO] Consumed Token: int
[INFO] Consumed Token: varrr_3
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: varrr_3
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: varrr_3
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 0 + 2
[INFO] Matched <ConstExpression>: 0 + 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: 6
[INFO] Matched <Expression>: 6
[INFO] Matched <ScalarVarInitValue>: 6
[INFO] Matched <VarInitValue>: 6
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: 6
[INFO] Matched <Expression>: 6
[INFO] Matched <ScalarVarInitValue>: 6
[INFO] Matched <VarInitValue>: 6
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {6, 6}
[INFO] Matched <VarInitValue>: {6, 6}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: -1
[INFO] Matched <UnaryExpression>: -1
[INFO] Matched <MultiplicativeExpression>: -1
[INFO] Matched <AdditiveExpression>: -1
[INFO] Matched <Expression>: -1
[INFO] Matched <ScalarVarInitValue>: -1
[INFO] Matched <VarInitValue>: -1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {-1, 0}
[INFO] Matched <VarInitValue>: {-1, 0}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{6, 6}, {-1, 0}}
[INFO] Matched <VarInitValue>: {{6, 6}, {-1, 0}}
[INFO] Matched <VarDefinition>: varrr_3[2][0 + 2] = {{6, 6}, {-1, 0}}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int varrr_3[2][0 + 2] = {{6, 6}, {-1, 0}};
[INFO] Matched <Declaration>: int varrr_3[2][0 + 2] = {{6, 6}, {-1, 0}};
[INFO] Consumed Token: int
[INFO] Consumed Token: varrrr_1
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: varrrr_1
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: varrrr_1
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 666
[INFO] Matched <Number>: 666
[INFO] Matched <PrimaryExpression>: 666
[INFO] Matched <UnaryExpression>: 666
[INFO] Matched <MultiplicativeExpression>: 666
[INFO] Matched <AdditiveExpression>: 666
[INFO] Matched <Expression>: 666
[INFO] Matched <ScalarVarInitValue>: 666
[INFO] Matched <VarInitValue>: 666
[INFO] Matched <VarDefinition>: varrrr_1 = 666
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: varrrr_2
[INFO] Matched <VarDefinition>: varrrr_2
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: varrrr_3
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <ConstExpression>: 5
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <Expression>: 5
[INFO] Matched <ScalarVarInitValue>: 5
[INFO] Matched <VarInitValue>: 5
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 96
[INFO] Matched <Number>: 96
[INFO] Matched <PrimaryExpression>: 96
[INFO] Matched <UnaryExpression>: 96
[INFO] Matched <MultiplicativeExpression>: 96
[INFO] Matched <AdditiveExpression>: 96
[INFO] Matched <Expression>: 96
[INFO] Matched <ScalarVarInitValue>: 96
[INFO] Matched <VarInitValue>: 96
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <UnaryOperatedExpression>: -5
[INFO] Matched <UnaryExpression>: -5
[INFO] Matched <MultiplicativeExpression>: -5
[INFO] Matched <AdditiveExpression>: -5
[INFO] Matched <Expression>: -5
[INFO] Matched <ScalarVarInitValue>: -5
[INFO] Matched <VarInitValue>: -5
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 5, 1, 96, -5}
[INFO] Matched <VarInitValue>: {1, 5, 1, 96, -5}
[INFO] Matched <VarDefinition>: varrrr_3[5] = {1, 5, 1, 96, -5}
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: varrrr_4
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 555
[INFO] Matched <Number>: 555
[INFO] Matched <PrimaryExpression>: 555
[INFO] Matched <UnaryExpression>: 555
[INFO] Matched <MultiplicativeExpression>: 555
[INFO] Matched <AdditiveExpression>: 555
[INFO] Matched <Expression>: 555
[INFO] Matched <ScalarVarInitValue>: 555
[INFO] Matched <VarInitValue>: 555
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <UnaryOperatedExpression>: -5
[INFO] Matched <UnaryExpression>: -5
[INFO] Matched <MultiplicativeExpression>: -5
[INFO] Matched <AdditiveExpression>: -5
[INFO] Matched <Expression>: -5
[INFO] Matched <ScalarVarInitValue>: -5
[INFO] Matched <VarInitValue>: -5
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {555, -5}
[INFO] Matched <VarInitValue>: {555, -5}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{555, -5}}
[INFO] Matched <VarInitValue>: {{555, -5}}
[INFO] Matched <VarDefinition>: varrrr_4[1][2] = {{555, -5}}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int varrrr_1 = 666, varrrr_2, varrrr_3[5] = {1, 5, 1, 96, -5}, varrrr_4[1][2] = {{555, -5}};
[INFO] Matched <Declaration>: int varrrr_1 = 666, varrrr_2, varrrr_3[5] = {1, 5, 1, 96, -5}, varrrr_4[1][2] = {{555, -5}};
[INFO] Lexer rolling back...
[INFO] Consumed Token: void
[INFO] Consumed Token: func1
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: func1
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Matched <FuncParamList>: int a
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _a
[INFO] Matched <LeftValue>: _a
[INFO] Matched <PrimaryExpression>: _a
[INFO] Matched <UnaryExpression>: _a
[INFO] Matched <MultiplicativeExpression>: _a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: _a + 1 + 2 - 1
[INFO] Matched <Expression>: _a + 1 + 2 - 1
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: _a + 1 + 2 - 1;
[INFO] Matched <Statement>: _a + 1 + 2 - 1;
[INFO] Matched <BlockItem>:
_a + 1 + 2 - 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    _a + 1 + 2 - 1;
}
[INFO] Matched <Statement>:
{
    _a + 1 + 2 - 1;
}
[INFO] Matched <BlockItem>:
{
    _a + 1 + 2 - 1;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: func1_var
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: func1_var
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: func1_var
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: func1_var
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Matched <VarDefinition>: func1_var = 1
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int func1_var = 1;
[INFO] Matched <Declaration>: int func1_var = 1;
[INFO] Matched <BlockItem>:
int func1_var = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: func1_var
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: func1_var
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: func1_var
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: func1_var
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Matched <VarDefinition>: func1_var = 2
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int func1_var = 2;
[INFO] Matched <Declaration>: int func1_var = 2;
[INFO] Matched <BlockItem>:
int func1_var = 2;
[INFO] Lexer rolling back...
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int func1_var = 2;
}
[INFO] Matched <Statement>:
{
    int func1_var = 2;
}
[INFO] Matched <BlockItem>:
{
    int func1_var = 2;
}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int func1_var = 1;
    {
        int func1_var = 2;
    }
}
[INFO] Matched <Statement>:
{
    int func1_var = 1;
    {
        int func1_var = 2;
    }
}
[INFO] Matched <BlockItem>:
{
    int func1_var = 1;
    {
        int func1_var = 2;
    }
}
[INFO] Lexer rolling back...
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    {
        _a + 1 + 2 - 1;
    }
    {
        int func1_var = 1;
        {
            int func1_var = 2;
        }
    }
}
[INFO] Matched <FuncDefinition>:
void func1(int a) {
    {
        _a + 1 + 2 - 1;
    }
    {
        int func1_var = 1;
        {
            int func1_var = 2;
        }
    }
}
[INFO] Consumed Token: int
[INFO] Consumed Token: func2
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: func2
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: b
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int b[]
[INFO] Matched <FuncParamList>: int a, int b[]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _A
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _A
[INFO] Matched <LeftValue>: _A
[INFO] Matched <PrimaryExpression>: _A
[INFO] Matched <UnaryExpression>: _A
[INFO] Matched <MultiplicativeExpression>: _A
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: _A + 5 - 6
[INFO] Matched <Expression>: _A + 5 - 6
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = _A + 5 - 6;
[INFO] Matched <Statement>: a = _A + 5 - 6;
[INFO] Matched <BlockItem>:
a = _A + 5 - 6;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _A
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _A
[INFO] Matched <LeftValue>: _A
[INFO] Matched <PrimaryExpression>: _A
[INFO] Matched <UnaryExpression>: _A
[INFO] Matched <MultiplicativeExpression>: _A
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: _A - 6
[INFO] Matched <Expression>: _A - 6
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: b[_A - 6]
[INFO] Matched <PrimaryExpression>: b[_A - 6]
[INFO] Matched <UnaryExpression>: b[_A - 6]
[INFO] Matched <MultiplicativeExpression>: b[_A - 6]
[INFO] Matched <AdditiveExpression>: b[_A - 6]
[INFO] Matched <Expression>: b[_A - 6]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _A
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _A
[INFO] Matched <LeftValue>: _A
[INFO] Matched <PrimaryExpression>: _A
[INFO] Matched <UnaryExpression>: _A
[INFO] Matched <MultiplicativeExpression>: _A
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: _A - 6
[INFO] Matched <Expression>: _A - 6
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: b[_A - 6]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _A
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _A
[INFO] Matched <LeftValue>: _A
[INFO] Matched <PrimaryExpression>: _A
[INFO] Matched <UnaryExpression>: _A
[INFO] Matched <MultiplicativeExpression>: _A
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: _A - 6
[INFO] Matched <Expression>: _A - 6
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: b[_A - 6]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 46554646
[INFO] Matched <Number>: 46554646
[INFO] Matched <PrimaryExpression>: 46554646
[INFO] Matched <UnaryExpression>: 46554646
[INFO] Matched <MultiplicativeExpression>: 46554646
[INFO] Matched <AdditiveExpression>: 46554646
[INFO] Matched <Expression>: 46554646
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: b[_A - 6] = 46554646;
[INFO] Matched <Statement>: b[_A - 6] = 46554646;
[INFO] Matched <BlockItem>:
b[_A - 6] = 46554646;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <RelationalExpression>: a
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <RelationalExpression>: 5
[INFO] Matched <EqualityExpression>: a == 5
[INFO] Matched <LogicalAndExpression>: a == 5
[INFO] Matched <LogicalOrExpression>: a == 5
[INFO] Matched <Condition>: a == 5
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Lexer rolling back...
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <IfStatement>:
if (a == 5) {}  
[INFO] Matched <Statement>:
if (a == 5) {}  
[INFO] Matched <BlockItem>:
if (a == 5) {}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <RelationalExpression>: a < 10
[INFO] Matched <EqualityExpression>: a < 10
[INFO] Matched <LogicalAndExpression>: a < 10
[INFO] Matched <LogicalOrExpression>: a < 10
[INFO] Matched <Condition>: a < 10
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1000
[INFO] Matched <Number>: 1000
[INFO] Matched <PrimaryExpression>: 1000
[INFO] Matched <UnaryExpression>: 1000
[INFO] Matched <MultiplicativeExpression>: 1000
[INFO] Matched <AdditiveExpression>: 1000
[INFO] Matched <Expression>: 1000
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = 1000;
[INFO] Matched <Statement>: a = 1000;
[INFO] Matched <BlockItem>:
a = 1000;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a = 1000;
}
[INFO] Matched <Statement>:
{
    a = 1000;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _A
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _A
[INFO] Matched <LeftValue>: _A
[INFO] Matched <PrimaryExpression>: _A
[INFO] Matched <UnaryExpression>: _A
[INFO] Matched <MultiplicativeExpression>: _A
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: _A - 5
[INFO] Matched <Expression>: _A - 5
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: b[_A - 5]
[INFO] Matched <PrimaryExpression>: b[_A - 5]
[INFO] Matched <UnaryExpression>: b[_A - 5]
[INFO] Matched <MultiplicativeExpression>: b[_A - 5]
[INFO] Matched <AdditiveExpression>: b[_A - 5]
[INFO] Matched <Expression>: b[_A - 5]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = b[_A - 5];
[INFO] Matched <Statement>: a = b[_A - 5];
[INFO] Matched <BlockItem>:
a = b[_A - 5];
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a = b[_A - 5];
}
[INFO] Matched <Statement>:
{
    a = b[_A - 5];
}
[INFO] Matched <IfStatement>:
if (a < 10) {
    a = 1000;
} else {
    a = b[_A - 5];
}
[INFO] Matched <Statement>:
if (a < 10) {
    a = 1000;
} else {
    a = b[_A - 5];
}
[INFO] Matched <BlockItem>:
if (a < 10) {
    a = 1000;
} else {
    a = b[_A - 5];
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 666
[INFO] Matched <Number>: 666
[INFO] Matched <PrimaryExpression>: 666
[INFO] Matched <UnaryExpression>: 666
[INFO] Matched <MultiplicativeExpression>: 666
[INFO] Matched <AdditiveExpression>: 666
[INFO] Matched <Expression>: 666
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 666;
[INFO] Matched <Statement>: return 666;
[INFO] Matched <BlockItem>:
return 666;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    ;
    ;
    a = _A + 5 - 6;
    b[_A - 6] = 46554646;
    if (a == 5) {}  
    if (a < 10) {
        a = 1000;
    } else {
        a = b[_A - 5];
    }
    return 666;
}
[INFO] Matched <FuncDefinition>:
int func2(int a, int b[]) {
    ;
    ;
    a = _A + 5 - 6;
    b[_A - 6] = 46554646;
    if (a == 5) {}  
    if (a < 10) {
        a = 1000;
    } else {
        a = b[_A - 5];
    }
    return 666;
}
[INFO] Consumed Token: void
[INFO] Consumed Token: func3
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: func3
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int a[][3]
[INFO] Matched <FuncParamList>: int a[][3]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: i
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: i = 0
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int i = 0;
[INFO] Matched <Declaration>: int i = 0;
[INFO] Matched <BlockItem>:
int i = 0;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _
[INFO] Matched <LeftValue>: _
[INFO] Matched <PrimaryExpression>: _
[INFO] Matched <UnaryExpression>: _
[INFO] Matched <MultiplicativeExpression>: _
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 12
[INFO] Matched <Number>: 12
[INFO] Matched <PrimaryExpression>: 12
[INFO] Matched <UnaryExpression>: 12
[INFO] Matched <MultiplicativeExpression>: 12
[INFO] Matched <AdditiveExpression>: _ - 12
[INFO] Matched <Expression>: _ - 12
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a[_ - 12][0]
[INFO] Matched <PrimaryExpression>: a[_ - 12][0]
[INFO] Matched <UnaryExpression>: a[_ - 12][0]
[INFO] Matched <MultiplicativeExpression>: a[_ - 12][0]
[INFO] Matched <AdditiveExpression>: a[_ - 12][0]
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <RelationalExpression>: a[_ - 12][0] > 10
[INFO] Matched <EqualityExpression>: a[_ - 12][0] > 10
[INFO] Matched <LogicalAndExpression>: a[_ - 12][0] > 10
[INFO] Matched <LogicalOrExpression>: a[_ - 12][0] > 10
[INFO] Matched <Condition>: a[_ - 12][0] > 10
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return;
}
[INFO] Matched <Statement>:
{
    return;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Lexer rolling back...
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <IfStatement>:
if (a[_ - 12][0] > 10) {
    return;
} else {}
[INFO] Matched <Statement>:
if (a[_ - 12][0] > 10) {
    return;
} else {}
[INFO] Matched <BlockItem>:
if (a[_ - 12][0] > 10) {
    return;
} else {}
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 100
[INFO] Matched <Number>: 100
[INFO] Matched <PrimaryExpression>: 100
[INFO] Matched <UnaryExpression>: 100
[INFO] Matched <MultiplicativeExpression>: 100
[INFO] Matched <AdditiveExpression>: 100
[INFO] Matched <RelationalExpression>: i < 100
[INFO] Matched <EqualityExpression>: i < 100
[INFO] Matched <LogicalAndExpression>: i < 100
[INFO] Matched <LogicalOrExpression>: i < 100
[INFO] Matched <Condition>: i < 100
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <RelationalExpression>: i
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 50
[INFO] Matched <Number>: 50
[INFO] Matched <PrimaryExpression>: 50
[INFO] Matched <UnaryExpression>: 50
[INFO] Matched <MultiplicativeExpression>: 50
[INFO] Matched <AdditiveExpression>: 50
[INFO] Matched <RelationalExpression>: 50
[INFO] Matched <EqualityExpression>: i == 50
[INFO] Matched <LogicalAndExpression>: i == 50
[INFO] Matched <LogicalOrExpression>: i == 50
[INFO] Matched <Condition>: i == 50
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a[0][0]
[INFO] Matched <PrimaryExpression>: a[0][0]
[INFO] Matched <UnaryExpression>: a[0][0]
[INFO] Matched <MultiplicativeExpression>: a[0][0]
[INFO] Matched <AdditiveExpression>: a[0][0]
[INFO] Matched <Expression>: a[0][0]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a[0][0]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a[0][0]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a[0][0] = 1;
[INFO] Matched <Statement>: a[0][0] = 1;
[INFO] Matched <BlockItem>:
a[0][0] = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a[0][0] = 1;
    break;
    return;
    ;
    ;
    ;
    ;
    ;
    ;
}
[INFO] Matched <Statement>:
{
    a[0][0] = 1;
    break;
    return;
    ;
    ;
    ;
    ;
    ;
    ;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: i + 1
[INFO] Matched <Expression>: i + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = i + 1;
[INFO] Matched <Statement>: i = i + 1;
[INFO] Matched <BlockItem>:
i = i + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ContinueStatement>.
[INFO] Consumed Token: continue
[INFO] Consumed Token: ;
[INFO] Matched <ContinueStatement>: continue;
[INFO] Matched <Statement>: continue;
[INFO] Matched <BlockItem>:
continue;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    i = i + 1;
    continue;
}
[INFO] Matched <Statement>:
{
    i = i + 1;
    continue;
}
[INFO] Matched <IfStatement>:
if (i == 50) {
    a[0][0] = 1;
    break;
    return;
    ;
    ;
    ;
    ;
    ;
    ;
} else {
    i = i + 1;
    continue;
}
[INFO] Matched <Statement>:
if (i == 50) {
    a[0][0] = 1;
    break;
    return;
    ;
    ;
    ;
    ;
    ;
    ;
} else {
    i = i + 1;
    continue;
}
[INFO] Matched <BlockItem>:
if (i == 50) {
    a[0][0] = 1;
    break;
    return;
    ;
    ;
    ;
    ;
    ;
    ;
} else {
    i = i + 1;
    continue;
}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (i == 50) {
        a[0][0] = 1;
        break;
        return;
        ;
        ;
        ;
        ;
        ;
        ;
    } else {
        i = i + 1;
        continue;
    }
}
[INFO] Matched <Statement>:
{
    if (i == 50) {
        a[0][0] = 1;
        break;
        return;
        ;
        ;
        ;
        ;
        ;
        ;
    } else {
        i = i + 1;
        continue;
    }
}
[INFO] Matched <ForStatementSelection>:
for (; i < 100; ) {
    if (i == 50) {
        a[0][0] = 1;
        break;
        return;
        ;
        ;
        ;
        ;
        ;
        ;
    } else {
        i = i + 1;
        continue;
    }
}
[INFO] Matched <Statement>:
for (; i < 100; ) {
    if (i == 50) {
        a[0][0] = 1;
        break;
        return;
        ;
        ;
        ;
        ;
        ;
        ;
    } else {
        i = i + 1;
        continue;
    }
}
[INFO] Matched <BlockItem>:
for (; i < 100; ) {
    if (i == 50) {
        a[0][0] = 1;
        break;
        return;
        ;
        ;
        ;
        ;
        ;
        ;
    } else {
        i = i + 1;
        continue;
    }
}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int i = 0;
    if (a[_ - 12][0] > 10) {
        return;
    } else {}
    for (; i < 100; ) {
        if (i == 50) {
            a[0][0] = 1;
            break;
            return;
            ;
            ;
            ;
            ;
            ;
            ;
        } else {
            i = i + 1;
            continue;
        }
    }
}
[INFO] Matched <FuncDefinition>:
void func3(int a[][3]) {
    int i = 0;
    if (a[_ - 12][0] > 10) {
        return;
    } else {}
    for (; i < 100; ) {
        if (i == 50) {
            a[0][0] = 1;
            break;
            return;
            ;
            ;
            ;
            ;
            ;
            ;
        } else {
            i = i + 1;
            continue;
        }
    }
}
[INFO] Consumed Token: int
[INFO] Consumed Token: func4
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: func4
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: b
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int b[]
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: c
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int c[][3]
[INFO] Matched <FuncParamList>: int a, int b[], int c[][3]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: a;
[INFO] Matched <Statement>: a;
[INFO] Matched <BlockItem>:
a;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: b[0]
[INFO] Matched <PrimaryExpression>: b[0]
[INFO] Matched <UnaryExpression>: b[0]
[INFO] Matched <MultiplicativeExpression>: b[0]
[INFO] Matched <AdditiveExpression>: b[0]
[INFO] Matched <Expression>: b[0]
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: b[0];
[INFO] Matched <Statement>: b[0];
[INFO] Matched <BlockItem>:
b[0];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: c[0][1]
[INFO] Matched <PrimaryExpression>: c[0][1]
[INFO] Matched <UnaryExpression>: c[0][1]
[INFO] Matched <MultiplicativeExpression>: c[0][1]
[INFO] Matched <AdditiveExpression>: c[0][1]
[INFO] Matched <Expression>: c[0][1]
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: c[0][1];
[INFO] Matched <Statement>: c[0][1];
[INFO] Matched <BlockItem>:
c[0][1];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 123456
[INFO] Matched <Number>: 123456
[INFO] Matched <PrimaryExpression>: 123456
[INFO] Matched <UnaryExpression>: 123456
[INFO] Matched <MultiplicativeExpression>: 123456
[INFO] Matched <AdditiveExpression>: 123456
[INFO] Matched <Expression>: 123456
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: 123456;
[INFO] Matched <Statement>: 123456;
[INFO] Matched <BlockItem>:
123456;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 111111111
[INFO] Matched <Number>: 111111111
[INFO] Matched <PrimaryExpression>: 111111111
[INFO] Matched <UnaryExpression>: 111111111
[INFO] Matched <MultiplicativeExpression>: 111111111
[INFO] Matched <AdditiveExpression>: 111111111
[INFO] Matched <Expression>: 111111111
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: 111111111;
[INFO] Matched <Statement>: 111111111;
[INFO] Matched <BlockItem>:
111111111;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: b[1]
[INFO] Matched <PrimaryExpression>: b[1]
[INFO] Matched <UnaryExpression>: b[1]
[INFO] Matched <MultiplicativeExpression>: b[1]
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: c[0][0]
[INFO] Matched <PrimaryExpression>: c[0][0]
[INFO] Matched <UnaryExpression>: c[0][0]
[INFO] Matched <MultiplicativeExpression>: c[0][0]
[INFO] Matched <AdditiveExpression>: a + b[1] + c[0][0]
[INFO] Matched <Expression>: a + b[1] + c[0][0]
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: a + b[1] + c[0][0];
[INFO] Matched <Statement>: a + b[1] + c[0][0];
[INFO] Matched <BlockItem>:
a + b[1] + c[0][0];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: 1 + a
[INFO] Matched <Expression>: 1 + a
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (1 + a)
[INFO] Matched <PrimaryExpression>: (1 + a)
[INFO] Matched <UnaryExpression>: (1 + a)
[INFO] Matched <UnaryOperatedExpression>: -(1 + a)
[INFO] Matched <UnaryExpression>: -(1 + a)
[INFO] Matched <MultiplicativeExpression>: -(1 + a)
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 44
[INFO] Matched <Number>: 44
[INFO] Matched <PrimaryExpression>: 44
[INFO] Matched <UnaryExpression>: 44
[INFO] Matched <MultiplicativeExpression>: 44
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 1 + 2
[INFO] Matched <Expression>: 1 + 2
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (1 + 2)
[INFO] Matched <PrimaryExpression>: (1 + 2)
[INFO] Matched <UnaryExpression>: (1 + 2)
[INFO] Matched <MultiplicativeExpression>: (1 + 2)
[INFO] Matched <AdditiveExpression>: 1 + a + 44 + (1 + 2)
[INFO] Matched <Expression>: 1 + a + 44 + (1 + 2)
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (1 + a + 44 + (1 + 2))
[INFO] Matched <PrimaryExpression>: (1 + a + 44 + (1 + 2))
[INFO] Matched <UnaryExpression>: (1 + a + 44 + (1 + 2))
[INFO] Matched <MultiplicativeExpression>: (1 + a + 44 + (1 + 2))
[INFO] Matched <AdditiveExpression>: -(1 + a) + (1 + a + 44 + (1 + 2))
[INFO] Matched <Expression>: -(1 + a) + (1 + a + 44 + (1 + 2))
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: -(1 + a) + (1 + a + 44 + (1 + 2));
[INFO] Matched <Statement>: -(1 + a) + (1 + a + 44 + (1 + 2));
[INFO] Matched <BlockItem>:
-(1 + a) + (1 + a + 44 + (1 + 2));
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 1 * 5 / 4
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 5 * 4 % 4
[INFO] Matched <AdditiveExpression>: 1 * 5 / 4 - 5 * 4 % 4
[INFO] Matched <Expression>: 1 * 5 / 4 - 5 * 4 % 4
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: 1 * 5 / 4 - 5 * 4 % 4;
[INFO] Matched <Statement>: 1 * 5 / 4 - 5 * 4 % 4;
[INFO] Matched <BlockItem>:
1 * 5 / 4 - 5 * 4 % 4;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <UnaryOperatedExpression>: +6
[INFO] Matched <UnaryExpression>: +6
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: +6 * a
[INFO] Matched <AdditiveExpression>: +6 * a
[INFO] Matched <Expression>: +6 * a
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: +6 * a;
[INFO] Matched <Statement>: +6 * a;
[INFO] Matched <BlockItem>:
+6 * a;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 1 * 6
[INFO] Matched <AdditiveExpression>: 1 * 6
[INFO] Matched <Expression>: 1 * 6
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: 1 * 6;
[INFO] Matched <Statement>: 1 * 6;
[INFO] Matched <BlockItem>:
1 * 6;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 8
[INFO] Matched <Number>: 8
[INFO] Matched <PrimaryExpression>: 8
[INFO] Matched <UnaryExpression>: 8
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 444
[INFO] Matched <Number>: 444
[INFO] Matched <PrimaryExpression>: 444
[INFO] Matched <UnaryExpression>: 444
[INFO] Matched <MultiplicativeExpression>: 8 / 444
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: 8 / 444 + 6
[INFO] Matched <Expression>: 8 / 444 + 6
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: 8 / 444 + 6;
[INFO] Matched <Statement>: 8 / 444 + 6;
[INFO] Matched <BlockItem>:
8 / 444 + 6;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 55
[INFO] Matched <Number>: 55
[INFO] Matched <PrimaryExpression>: 55
[INFO] Matched <UnaryExpression>: 55
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 8
[INFO] Matched <Number>: 8
[INFO] Matched <PrimaryExpression>: 8
[INFO] Matched <UnaryExpression>: 8
[INFO] Matched <MultiplicativeExpression>: 55 / 8
[INFO] Matched <AdditiveExpression>: 55 / 8
[INFO] Matched <Expression>: 55 / 8
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: 55 / 8;
[INFO] Matched <Statement>: 55 / 8;
[INFO] Matched <BlockItem>:
55 / 8;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 9
[INFO] Matched <Number>: 9
[INFO] Matched <PrimaryExpression>: 9
[INFO] Matched <UnaryExpression>: 9
[INFO] Matched <MultiplicativeExpression>: 5 * 9
[INFO] Matched <AdditiveExpression>: 5 * 9
[INFO] Matched <Expression>: 5 * 9
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: 5 * 9;
[INFO] Matched <Statement>: 5 * 9;
[INFO] Matched <BlockItem>:
5 * 9;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 9
[INFO] Matched <Number>: 9
[INFO] Matched <PrimaryExpression>: 9
[INFO] Matched <UnaryExpression>: 9
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 44
[INFO] Matched <Number>: 44
[INFO] Matched <PrimaryExpression>: 44
[INFO] Matched <UnaryExpression>: 44
[INFO] Matched <MultiplicativeExpression>: 9 % 44
[INFO] Matched <AdditiveExpression>: 9 % 44
[INFO] Matched <Expression>: 9 % 44
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: 9 % 44;
[INFO] Matched <Statement>: 9 % 44;
[INFO] Matched <BlockItem>:
9 % 44;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 999
[INFO] Matched <Number>: 999
[INFO] Matched <PrimaryExpression>: 999
[INFO] Matched <UnaryExpression>: 999
[INFO] Matched <MultiplicativeExpression>: 999
[INFO] Matched <AdditiveExpression>: 999
[INFO] Matched <Expression>: 999
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 999;
[INFO] Matched <Statement>: return 999;
[INFO] Matched <BlockItem>:
return 999;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a;
    b[0];
    c[0][1];
    123456;
    111111111;
    a + b[1] + c[0][0];
    -(1 + a) + (1 + a + 44 + (1 + 2));
    1 * 5 / 4 - 5 * 4 % 4;
    +6 * a;
    1 * 6;
    8 / 444 + 6;
    55 / 8;
    5 * 9;
    9 % 44;
    return 999;
}
[INFO] Matched <FuncDefinition>:
int func4(int a, int b[], int c[][3]) {
    a;
    b[0];
    c[0][1];
    123456;
    111111111;
    a + b[1] + c[0][0];
    -(1 + a) + (1 + a + 44 + (1 + 2));
    1 * 5 / 4 - 5 * 4 % 4;
    +6 * a;
    1 * 6;
    8 / 444 + 6;
    55 / 8;
    5 * 9;
    9 % 44;
    return 999;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: func5
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: func5
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Failed to match <BasicType>.
[INFO] Failed to match <FuncParam>.
[INFO] Failed to match <FuncParamList>.
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <RelationalExpression>: 1
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <RelationalExpression>: 2
[INFO] Matched <EqualityExpression>: 1 == 2
[INFO] Matched <LogicalAndExpression>: 1 == 2
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <RelationalExpression>: 2
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _a
[INFO] Matched <LeftValue>: _a
[INFO] Matched <PrimaryExpression>: _a
[INFO] Matched <UnaryExpression>: _a
[INFO] Matched <MultiplicativeExpression>: _a
[INFO] Matched <AdditiveExpression>: _a
[INFO] Matched <RelationalExpression>: _a
[INFO] Matched <EqualityExpression>: 2 != _a
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6666
[INFO] Matched <Number>: 6666
[INFO] Matched <PrimaryExpression>: 6666
[INFO] Matched <UnaryExpression>: 6666
[INFO] Matched <MultiplicativeExpression>: 6666
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 6666 + 5
[INFO] Matched <RelationalExpression>: 6666 + 5
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <RelationalExpression>: 4
[INFO] Matched <EqualityExpression>: 6666 + 5 == 4
[INFO] Matched <LogicalAndExpression>: 2 != _a && 6666 + 5 == 4
[INFO] Matched <LogicalOrExpression>: 1 == 2 || 2 != _a && 6666 + 5 == 4
[INFO] Matched <Condition>: 1 == 2 || 2 != _a && 6666 + 5 == 4
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1111
[INFO] Matched <Number>: 1111
[INFO] Matched <PrimaryExpression>: 1111
[INFO] Matched <UnaryExpression>: 1111
[INFO] Matched <MultiplicativeExpression>: 1111
[INFO] Matched <AdditiveExpression>: 1111
[INFO] Matched <Expression>: 1111
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 1111;
[INFO] Matched <Statement>: return 1111;
[INFO] Matched <BlockItem>:
return 1111;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return 1111;
}
[INFO] Matched <Statement>:
{
    return 1111;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 666
[INFO] Matched <Number>: 666
[INFO] Matched <PrimaryExpression>: 666
[INFO] Matched <UnaryExpression>: 666
[INFO] Matched <UnaryOperatedExpression>: !666
[INFO] Matched <UnaryExpression>: !666
[INFO] Matched <MultiplicativeExpression>: !666
[INFO] Matched <AdditiveExpression>: !666
[INFO] Matched <RelationalExpression>: !666
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _
[INFO] Matched <LeftValue>: _
[INFO] Matched <PrimaryExpression>: _
[INFO] Matched <UnaryExpression>: _
[INFO] Matched <UnaryOperatedExpression>: -_
[INFO] Matched <UnaryExpression>: -_
[INFO] Matched <MultiplicativeExpression>: -_
[INFO] Matched <AdditiveExpression>: -_
[INFO] Matched <RelationalExpression>: -_
[INFO] Matched <EqualityExpression>: !666 != -_
[INFO] Matched <LogicalAndExpression>: !666 != -_
[INFO] Matched <LogicalOrExpression>: !666 != -_
[INFO] Matched <Condition>: !666 != -_
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5464
[INFO] Matched <Number>: 5464
[INFO] Matched <PrimaryExpression>: 5464
[INFO] Matched <UnaryExpression>: 5464
[INFO] Matched <MultiplicativeExpression>: 5464
[INFO] Matched <AdditiveExpression>: 5464
[INFO] Matched <Expression>: 5464
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 5464;
[INFO] Matched <Statement>: return 5464;
[INFO] Matched <BlockItem>:
return 5464;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return 5464;
}
[INFO] Matched <Statement>:
{
    return 5464;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Matched <PrimaryExpression>: __
[INFO] Matched <UnaryExpression>: __
[INFO] Matched <MultiplicativeExpression>: __
[INFO] Matched <AdditiveExpression>: __
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 55
[INFO] Matched <Number>: 55
[INFO] Matched <PrimaryExpression>: 55
[INFO] Matched <UnaryExpression>: 55
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var_3
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_3
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_3[1][1]
[INFO] Matched <PrimaryExpression>: var_3[1][1]
[INFO] Matched <UnaryExpression>: var_3[1][1]
[INFO] Matched <MultiplicativeExpression>: 55 * var_3[1][1]
[INFO] Matched <AdditiveExpression>: 55 * var_3[1][1]
[INFO] Matched <RelationalExpression>: __ <= 55 * var_3[1][1]
[INFO] Matched <EqualityExpression>: __ <= 55 * var_3[1][1]
[INFO] Matched <LogicalAndExpression>: __ <= 55 * var_3[1][1]
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 54564
[INFO] Matched <Number>: 54564
[INFO] Matched <PrimaryExpression>: 54564
[INFO] Matched <UnaryExpression>: 54564
[INFO] Matched <MultiplicativeExpression>: 54564
[INFO] Matched <AdditiveExpression>: 54564
[INFO] Matched <RelationalExpression>: 2 >= 54564
[INFO] Matched <EqualityExpression>: 2 >= 54564
[INFO] Matched <LogicalAndExpression>: 2 >= 54564
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: +1
[INFO] Matched <UnaryExpression>: +1
[INFO] Matched <MultiplicativeExpression>: +1
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <UnaryOperatedExpression>: +2
[INFO] Matched <UnaryExpression>: +2
[INFO] Matched <MultiplicativeExpression>: +2
[INFO] Matched <AdditiveExpression>: +1 - +2
[INFO] Matched <RelationalExpression>: +1 - +2
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: 6
[INFO] Matched <RelationalExpression>: 6
[INFO] Matched <EqualityExpression>: +1 - +2 == 6
[INFO] Matched <LogicalAndExpression>: +1 - +2 == 6
[INFO] Matched <LogicalOrExpression>: __ <= 55 * var_3[1][1] || 2 >= 54564 || +1 - +2 == 6
[INFO] Matched <Condition>: __ <= 55 * var_3[1][1] || 2 >= 54564 || +1 - +2 == 6
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4564665
[INFO] Matched <Number>: 4564665
[INFO] Matched <PrimaryExpression>: 4564665
[INFO] Matched <UnaryExpression>: 4564665
[INFO] Matched <MultiplicativeExpression>: 4564665
[INFO] Matched <AdditiveExpression>: 4564665
[INFO] Matched <Expression>: 4564665
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 4564665;
[INFO] Matched <Statement>: return 4564665;
[INFO] Matched <BlockItem>:
return 4564665;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return 4564665;
}
[INFO] Matched <Statement>:
{
    return 4564665;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <RelationalExpression>: 1
[INFO] Matched <EqualityExpression>: 1
[INFO] Matched <LogicalAndExpression>: 1
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: varrrr_2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: varrrr_2
[INFO] Matched <LeftValue>: varrrr_2
[INFO] Matched <PrimaryExpression>: varrrr_2
[INFO] Matched <UnaryExpression>: varrrr_2
[INFO] Matched <MultiplicativeExpression>: varrrr_2
[INFO] Matched <AdditiveExpression>: 2 + varrrr_2
[INFO] Matched <RelationalExpression>: 1 < 2 + varrrr_2
[INFO] Matched <EqualityExpression>: 1 < 2 + varrrr_2
[INFO] Matched <LogicalAndExpression>: 1 < 2 + varrrr_2
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 8
[INFO] Matched <Number>: 8
[INFO] Matched <PrimaryExpression>: 8
[INFO] Matched <UnaryExpression>: 8
[INFO] Matched <MultiplicativeExpression>: 8
[INFO] Matched <AdditiveExpression>: 8
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _a
[INFO] Matched <LeftValue>: _a
[INFO] Matched <PrimaryExpression>: _a
[INFO] Matched <UnaryExpression>: _a
[INFO] Matched <MultiplicativeExpression>: _a
[INFO] Matched <AdditiveExpression>: _a
[INFO] Matched <RelationalExpression>: 8 > _a
[INFO] Matched <EqualityExpression>: 8 > _a
[INFO] Matched <LogicalAndExpression>: 8 > _a
[INFO] Matched <LogicalOrExpression>: 1 || 1 < 2 + varrrr_2 || 8 > _a
[INFO] Matched <Condition>: 1 || 1 < 2 + varrrr_2 || 8 > _a
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5456
[INFO] Matched <Number>: 5456
[INFO] Matched <PrimaryExpression>: 5456
[INFO] Matched <UnaryExpression>: 5456
[INFO] Matched <MultiplicativeExpression>: 5456
[INFO] Matched <AdditiveExpression>: 5456
[INFO] Matched <Expression>: 5456
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 5456;
[INFO] Matched <Statement>: return 5456;
[INFO] Matched <BlockItem>:
return 5456;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return 5456;
}
[INFO] Matched <Statement>:
{
    return 5456;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 55555
[INFO] Matched <Number>: 55555
[INFO] Matched <PrimaryExpression>: 55555
[INFO] Matched <UnaryExpression>: 55555
[INFO] Matched <MultiplicativeExpression>: 55555
[INFO] Matched <AdditiveExpression>: 55555
[INFO] Matched <Expression>: 55555
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 55555;
[INFO] Matched <Statement>: return 55555;
[INFO] Matched <BlockItem>:
return 55555;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return 55555;
}
[INFO] Matched <Statement>:
{
    return 55555;
}
[INFO] Matched <IfStatement>:
if (1 || 1 < 2 + varrrr_2 || 8 > _a) {
    return 5456;
} else {
    return 55555;
}
[INFO] Matched <Statement>:
if (1 || 1 < 2 + varrrr_2 || 8 > _a) {
    return 5456;
} else {
    return 55555;
}
[INFO] Matched <IfStatement>:
if (__ <= 55 * var_3[1][1] || 2 >= 54564 || +1 - +2 == 6) {
    return 4564665;
} else if (1 || 1 < 2 + varrrr_2 || 8 > _a) {
    return 5456;
} else {
    return 55555;
}
[INFO] Matched <Statement>:
if (__ <= 55 * var_3[1][1] || 2 >= 54564 || +1 - +2 == 6) {
    return 4564665;
} else if (1 || 1 < 2 + varrrr_2 || 8 > _a) {
    return 5456;
} else {
    return 55555;
}
[INFO] Matched <IfStatement>:
if (!666 != -_) {
    return 5464;
} else if (__ <= 55 * var_3[1][1] || 2 >= 54564 || +1 - +2 == 6) {
    return 4564665;
} else if (1 || 1 < 2 + varrrr_2 || 8 > _a) {
    return 5456;
} else {
    return 55555;
}
[INFO] Matched <Statement>:
if (!666 != -_) {
    return 5464;
} else if (__ <= 55 * var_3[1][1] || 2 >= 54564 || +1 - +2 == 6) {
    return 4564665;
} else if (1 || 1 < 2 + varrrr_2 || 8 > _a) {
    return 5456;
} else {
    return 55555;
}
[INFO] Matched <IfStatement>:
if (1 == 2 || 2 != _a && 6666 + 5 == 4) {
    return 1111;
} else if (!666 != -_) {
    return 5464;
} else if (__ <= 55 * var_3[1][1] || 2 >= 54564 || +1 - +2 == 6) {
    return 4564665;
} else if (1 || 1 < 2 + varrrr_2 || 8 > _a) {
    return 5456;
} else {
    return 55555;
}
[INFO] Matched <Statement>:
if (1 == 2 || 2 != _a && 6666 + 5 == 4) {
    return 1111;
} else if (!666 != -_) {
    return 5464;
} else if (__ <= 55 * var_3[1][1] || 2 >= 54564 || +1 - +2 == 6) {
    return 4564665;
} else if (1 || 1 < 2 + varrrr_2 || 8 > _a) {
    return 5456;
} else {
    return 55555;
}
[INFO] Matched <BlockItem>:
if (1 == 2 || 2 != _a && 6666 + 5 == 4) {
    return 1111;
} else if (!666 != -_) {
    return 5464;
} else if (__ <= 55 * var_3[1][1] || 2 >= 54564 || +1 - +2 == 6) {
    return 4564665;
} else if (1 || 1 < 2 + varrrr_2 || 8 > _a) {
    return 5456;
} else {
    return 55555;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 555
[INFO] Matched <Number>: 555
[INFO] Matched <PrimaryExpression>: 555
[INFO] Matched <UnaryExpression>: 555
[INFO] Matched <UnaryOperatedExpression>: -555
[INFO] Matched <UnaryExpression>: -555
[INFO] Matched <MultiplicativeExpression>: -555
[INFO] Matched <AdditiveExpression>: -555
[INFO] Matched <Expression>: -555
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return -555;
[INFO] Matched <Statement>: return -555;
[INFO] Matched <BlockItem>:
return -555;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (1 == 2 || 2 != _a && 6666 + 5 == 4) {
        return 1111;
    } else if (!666 != -_) {
        return 5464;
    } else if (__ <= 55 * var_3[1][1] || 2 >= 54564 || +1 - +2 == 6) {
        return 4564665;
    } else if (1 || 1 < 2 + varrrr_2 || 8 > _a) {
        return 5456;
    } else {
        return 55555;
    }
    return -555;
}
[INFO] Matched <FuncDefinition>:
int func5() {
    if (1 == 2 || 2 != _a && 6666 + 5 == 4) {
        return 1111;
    } else if (!666 != -_) {
        return 5464;
    } else if (__ <= 55 * var_3[1][1] || 2 >= 54564 || +1 - +2 == 6) {
        return 4564665;
    } else if (1 || 1 < 2 + varrrr_2 || 8 > _a) {
        return 5456;
    } else {
        return 55555;
    }
    return -555;
}
[INFO] Consumed Token: int
[INFO] Lexer rolling back...
[INFO] Matching <MainFuncDefinition>.
[INFO] Consumed Token: int
[INFO] Consumed Token: main
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: arr
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: arr
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: arr
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: arr
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _a
[INFO] Matched <LeftValue>: _a
[INFO] Matched <PrimaryExpression>: _a
[INFO] Matched <UnaryExpression>: _a
[INFO] Matched <MultiplicativeExpression>: 1 * _a
[INFO] Matched <AdditiveExpression>: 1 * _a
[INFO] Matched <Expression>: 1 * _a
[INFO] Matched <ScalarVarInitValue>: 1 * _a
[INFO] Matched <VarInitValue>: 1 * _a
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 8
[INFO] Matched <Number>: 8
[INFO] Matched <PrimaryExpression>: 8
[INFO] Matched <UnaryExpression>: 8
[INFO] Matched <MultiplicativeExpression>: 2 * 8
[INFO] Matched <AdditiveExpression>: 2 * 8
[INFO] Matched <Expression>: 2 * 8
[INFO] Matched <ScalarVarInitValue>: 2 * 8
[INFO] Matched <VarInitValue>: 2 * 8
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <UnaryOperatedExpression>: +3
[INFO] Matched <UnaryExpression>: +3
[INFO] Matched <MultiplicativeExpression>: +3
[INFO] Matched <AdditiveExpression>: +3
[INFO] Matched <Expression>: +3
[INFO] Matched <ScalarVarInitValue>: +3
[INFO] Matched <VarInitValue>: +3
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1 * _a, 2 * 8, +3}
[INFO] Matched <VarInitValue>: {1 * _a, 2 * 8, +3}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 123
[INFO] Matched <Number>: 123
[INFO] Matched <PrimaryExpression>: 123
[INFO] Matched <UnaryExpression>: 123
[INFO] Matched <MultiplicativeExpression>: 123
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a_r__r
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a_r__r
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a_r__r[1][1]
[INFO] Matched <PrimaryExpression>: a_r__r[1][1]
[INFO] Matched <UnaryExpression>: a_r__r[1][1]
[INFO] Matched <MultiplicativeExpression>: a_r__r[1][1]
[INFO] Matched <AdditiveExpression>: 123 - a_r__r[1][1]
[INFO] Matched <Expression>: 123 - a_r__r[1][1]
[INFO] Matched <ScalarVarInitValue>: 123 - a_r__r[1][1]
[INFO] Matched <VarInitValue>: 123 - a_r__r[1][1]
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5555
[INFO] Matched <Number>: 5555
[INFO] Matched <PrimaryExpression>: 5555
[INFO] Matched <UnaryExpression>: 5555
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: varrrr_1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: varrrr_1
[INFO] Matched <LeftValue>: varrrr_1
[INFO] Matched <PrimaryExpression>: varrrr_1
[INFO] Matched <UnaryExpression>: varrrr_1
[INFO] Matched <MultiplicativeExpression>: 5555 / varrrr_1
[INFO] Matched <AdditiveExpression>: 5555 / varrrr_1
[INFO] Matched <Expression>: 5555 / varrrr_1
[INFO] Matched <ScalarVarInitValue>: 5555 / varrrr_1
[INFO] Matched <VarInitValue>: 5555 / varrrr_1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {123 - a_r__r[1][1], 5555 / varrrr_1, 0}
[INFO] Matched <VarInitValue>: {123 - a_r__r[1][1], 5555 / varrrr_1, 0}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{1 * _a, 2 * 8, +3}, {123 - a_r__r[1][1], 5555 / varrrr_1, 0}}
[INFO] Matched <VarInitValue>: {{1 * _a, 2 * 8, +3}, {123 - a_r__r[1][1], 5555 / varrrr_1, 0}}
[INFO] Matched <VarDefinition>: arr[2][3] = {{1 * _a, 2 * 8, +3}, {123 - a_r__r[1][1], 5555 / varrrr_1, 0}}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int arr[2][3] = {{1 * _a, 2 * 8, +3}, {123 - a_r__r[1][1], 5555 / varrrr_1, 0}};
[INFO] Matched <Declaration>: int arr[2][3] = {{1 * _a, 2 * 8, +3}, {123 - a_r__r[1][1], 5555 / varrrr_1, 0}};
[INFO] Matched <BlockItem>:
int arr[2][3] = {{1 * _a, 2 * 8, +3}, {123 - a_r__r[1][1], 5555 / varrrr_1, 0}};
[INFO] Consumed Token: int
[INFO] Consumed Token: bv
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: bv
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: bv
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: bv
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <ConstExpression>: 4
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 1 / 2
[INFO] Matched <AdditiveExpression>: 1 / 2
[INFO] Matched <Expression>: 1 / 2
[INFO] Matched <ScalarVarInitValue>: 1 / 2
[INFO] Matched <VarInitValue>: 1 / 2
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: arr
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arr
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arr[0][0]
[INFO] Matched <PrimaryExpression>: arr[0][0]
[INFO] Matched <UnaryExpression>: arr[0][0]
[INFO] Matched <MultiplicativeExpression>: 6 * arr[0][0]
[INFO] Matched <AdditiveExpression>: 6 * arr[0][0]
[INFO] Matched <Expression>: 6 * arr[0][0]
[INFO] Matched <ScalarVarInitValue>: 6 * arr[0][0]
[INFO] Matched <VarInitValue>: 6 * arr[0][0]
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5555
[INFO] Matched <Number>: 5555
[INFO] Matched <PrimaryExpression>: 5555
[INFO] Matched <UnaryExpression>: 5555
[INFO] Matched <MultiplicativeExpression>: 5555
[INFO] Matched <AdditiveExpression>: 5555
[INFO] Matched <Expression>: 5555
[INFO] Matched <ScalarVarInitValue>: 5555
[INFO] Matched <VarInitValue>: 5555
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 22
[INFO] Matched <Number>: 22
[INFO] Matched <PrimaryExpression>: 22
[INFO] Matched <UnaryExpression>: 22
[INFO] Matched <MultiplicativeExpression>: 22
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 8
[INFO] Matched <Number>: 8
[INFO] Matched <PrimaryExpression>: 8
[INFO] Matched <UnaryExpression>: 8
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5 * 8 / 4 * 5
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 5 % 4
[INFO] Matched <AdditiveExpression>: 22 - 5 * 8 / 4 * 5 + 5 % 4
[INFO] Matched <Expression>: 22 - 5 * 8 / 4 * 5 + 5 % 4
[INFO] Matched <ScalarVarInitValue>: 22 - 5 * 8 / 4 * 5 + 5 % 4
[INFO] Matched <VarInitValue>: 22 - 5 * 8 / 4 * 5 + 5 % 4
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1 / 2, 6 * arr[0][0], 5555, 22 - 5 * 8 / 4 * 5 + 5 % 4}
[INFO] Matched <VarInitValue>: {1 / 2, 6 * arr[0][0], 5555, 22 - 5 * 8 / 4 * 5 + 5 % 4}
[INFO] Matched <VarDefinition>: bv[4] = {1 / 2, 6 * arr[0][0], 5555, 22 - 5 * 8 / 4 * 5 + 5 % 4}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int bv[4] = {1 / 2, 6 * arr[0][0], 5555, 22 - 5 * 8 / 4 * 5 + 5 % 4};
[INFO] Matched <Declaration>: int bv[4] = {1 / 2, 6 * arr[0][0], 5555, 22 - 5 * 8 / 4 * 5 + 5 % 4};
[INFO] Matched <BlockItem>:
int bv[4] = {1 / 2, 6 * arr[0][0], 5555, 22 - 5 * 8 / 4 * 5 + 5 % 4};
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: a
[INFO] Matched <VarDefinition>: a
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: b
[INFO] Matched <VarDefinition>: b
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int a, b;
[INFO] Matched <Declaration>: int a, b;
[INFO] Matched <BlockItem>:
int a, b;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: a = getint();
[INFO] Matched <Statement>: a = getint();
[INFO] Matched <BlockItem>:
a = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: func1
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: func1
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: varr_2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: varr_2
[INFO] Matched <LeftValue>: varr_2
[INFO] Matched <PrimaryExpression>: varr_2
[INFO] Matched <UnaryExpression>: varr_2
[INFO] Matched <MultiplicativeExpression>: varr_2
[INFO] Matched <AdditiveExpression>: varr_2
[INFO] Matched <Expression>: varr_2
[INFO] Matched <FuncArgList>: varr_2
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: func1(varr_2)
[INFO] Matched <UnaryExpression>: func1(varr_2)
[INFO] Matched <MultiplicativeExpression>: func1(varr_2)
[INFO] Matched <AdditiveExpression>: func1(varr_2)
[INFO] Matched <Expression>: func1(varr_2)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: func1(varr_2);
[INFO] Matched <Statement>: func1(varr_2);
[INFO] Matched <BlockItem>:
func1(varr_2);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: arr
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arr
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arr[1][2]
[INFO] Matched <PrimaryExpression>: arr[1][2]
[INFO] Matched <UnaryExpression>: arr[1][2]
[INFO] Matched <MultiplicativeExpression>: arr[1][2]
[INFO] Matched <AdditiveExpression>: arr[1][2]
[INFO] Matched <Expression>: arr[1][2]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arr
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arr[1][2]
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: arr[1][2] = getint();
[INFO] Matched <Statement>: arr[1][2] = getint();
[INFO] Matched <BlockItem>:
arr[1][2] = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: func2
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: func2
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 111
[INFO] Matched <Number>: 111
[INFO] Matched <PrimaryExpression>: 111
[INFO] Matched <UnaryExpression>: 111
[INFO] Matched <MultiplicativeExpression>: 111
[INFO] Matched <AdditiveExpression>: 111
[INFO] Matched <Expression>: 111
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: arr
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arr
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arr[1]
[INFO] Matched <PrimaryExpression>: arr[1]
[INFO] Matched <UnaryExpression>: arr[1]
[INFO] Matched <MultiplicativeExpression>: arr[1]
[INFO] Matched <AdditiveExpression>: arr[1]
[INFO] Matched <Expression>: arr[1]
[INFO] Matched <FuncArgList>: 111, arr[1]
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: func2(111, arr[1])
[INFO] Matched <UnaryExpression>: func2(111, arr[1])
[INFO] Matched <MultiplicativeExpression>: func2(111, arr[1])
[INFO] Matched <AdditiveExpression>: func2(111, arr[1])
[INFO] Matched <Expression>: func2(111, arr[1])
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: func2(111, arr[1]);
[INFO] Matched <Statement>: func2(111, arr[1]);
[INFO] Matched <BlockItem>:
func2(111, arr[1]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: func3
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: func3
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: arr
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arr
[INFO] Matched <LeftValue>: arr
[INFO] Matched <PrimaryExpression>: arr
[INFO] Matched <UnaryExpression>: arr
[INFO] Matched <MultiplicativeExpression>: arr
[INFO] Matched <AdditiveExpression>: arr
[INFO] Matched <Expression>: arr
[INFO] Matched <FuncArgList>: arr
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: func3(arr)
[INFO] Matched <UnaryExpression>: func3(arr)
[INFO] Matched <MultiplicativeExpression>: func3(arr)
[INFO] Matched <AdditiveExpression>: func3(arr)
[INFO] Matched <Expression>: func3(arr)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: func3(arr);
[INFO] Matched <Statement>: func3(arr);
[INFO] Matched <BlockItem>:
func3(arr);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: bv
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: bv
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: bv[1]
[INFO] Matched <PrimaryExpression>: bv[1]
[INFO] Matched <UnaryExpression>: bv[1]
[INFO] Matched <MultiplicativeExpression>: bv[1]
[INFO] Matched <AdditiveExpression>: bv[1]
[INFO] Matched <Expression>: bv[1]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: bv
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: bv[1]
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: bv[1] = getint();
[INFO] Matched <Statement>: bv[1] = getint();
[INFO] Matched <BlockItem>:
bv[1] = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: func4
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: func4
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: bv
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: bv
[INFO] Matched <LeftValue>: bv
[INFO] Matched <PrimaryExpression>: bv
[INFO] Matched <UnaryExpression>: bv
[INFO] Matched <MultiplicativeExpression>: bv
[INFO] Matched <AdditiveExpression>: bv
[INFO] Matched <Expression>: bv
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: arr
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arr
[INFO] Matched <LeftValue>: arr
[INFO] Matched <PrimaryExpression>: arr
[INFO] Matched <UnaryExpression>: arr
[INFO] Matched <MultiplicativeExpression>: arr
[INFO] Matched <AdditiveExpression>: arr
[INFO] Matched <Expression>: arr
[INFO] Matched <FuncArgList>: a, bv, arr
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: func4(a, bv, arr)
[INFO] Matched <UnaryExpression>: func4(a, bv, arr)
[INFO] Matched <MultiplicativeExpression>: func4(a, bv, arr)
[INFO] Matched <AdditiveExpression>: func4(a, bv, arr)
[INFO] Matched <Expression>: func4(a, bv, arr)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: func4(a, bv, arr);
[INFO] Matched <Statement>: func4(a, bv, arr);
[INFO] Matched <BlockItem>:
func4(a, bv, arr);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: func5
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: func5
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: func5()
[INFO] Matched <UnaryExpression>: func5()
[INFO] Matched <MultiplicativeExpression>: func5()
[INFO] Matched <AdditiveExpression>: func5()
[INFO] Matched <Expression>: func5()
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: func5();
[INFO] Matched <Statement>: func5();
[INFO] Matched <BlockItem>:
func5();
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", 1);
[INFO] Matched <Statement>: printf("%d\n", 1);
[INFO] Matched <BlockItem>:
printf("%d\n", 1);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", 1);
[INFO] Matched <Statement>: printf("%d\n", 1);
[INFO] Matched <BlockItem>:
printf("%d\n", 1);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", 1);
[INFO] Matched <Statement>: printf("%d\n", 1);
[INFO] Matched <BlockItem>:
printf("%d\n", 1);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", 1);
[INFO] Matched <Statement>: printf("%d\n", 1);
[INFO] Matched <BlockItem>:
printf("%d\n", 1);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", 1);
[INFO] Matched <Statement>: printf("%d\n", 1);
[INFO] Matched <BlockItem>:
printf("%d\n", 1);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", 1);
[INFO] Matched <Statement>: printf("%d\n", 1);
[INFO] Matched <BlockItem>:
printf("%d\n", 1);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", 1);
[INFO] Matched <Statement>: printf("%d\n", 1);
[INFO] Matched <BlockItem>:
printf("%d\n", 1);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", 1);
[INFO] Matched <Statement>: printf("%d\n", 1);
[INFO] Matched <BlockItem>:
printf("%d\n", 1);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", 1);
[INFO] Matched <Statement>: printf("%d\n", 1);
[INFO] Matched <BlockItem>:
printf("%d\n", 1);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int arr[2][3] = {{1 * _a, 2 * 8, +3}, {123 - a_r__r[1][1], 5555 / varrrr_1, 0}};
    int bv[4] = {1 / 2, 6 * arr[0][0], 5555, 22 - 5 * 8 / 4 * 5 + 5 % 4};
    int a, b;
    a = getint();
    func1(varr_2);
    arr[1][2] = getint();
    func2(111, arr[1]);
    func3(arr);
    bv[1] = getint();
    func4(a, bv, arr);
    func5();
    printf("%d\n", 1);
    printf("%d\n", 1);
    printf("%d\n", 1);
    printf("%d\n", 1);
    printf("%d\n", 1);
    printf("%d\n", 1);
    printf("%d\n", 1);
    printf("%d\n", 1);
    printf("%d\n", 1);
    return 0;
}
[INFO] Matched <MainFuncDefinition>:
int main() {
    int arr[2][3] = {{1 * _a, 2 * 8, +3}, {123 - a_r__r[1][1], 5555 / varrrr_1, 0}};
    int bv[4] = {1 / 2, 6 * arr[0][0], 5555, 22 - 5 * 8 / 4 * 5 + 5 % 4};
    int a, b;
    a = getint();
    func1(varr_2);
    arr[1][2] = getint();
    func2(111, arr[1]);
    func3(arr);
    bv[1] = getint();
    func4(a, bv, arr);
    func5();
    printf("%d\n", 1);
    printf("%d\n", 1);
    printf("%d\n", 1);
    printf("%d\n", 1);
    printf("%d\n", 1);
    printf("%d\n", 1);
    printf("%d\n", 1);
    printf("%d\n", 1);
    printf("%d\n", 1);
    return 0;
}
[INFO] Matched <CompileUnit>:
const int _a = 0;
const int HelLo_World[5] = {1, 55, 0, 10, +9999};
const int a_r__r[2][2] = {{-1, 0}, {6, -555}};
const int _A = 6, B[1][1] = {{9966}}, _ = 12, c[1] = {555}, __ = 4, con_6[2][1] = {{0}, {6}};
const int lll = 1, rrr = 2;
const int awk_ = _A + _a + 5;
const int const_num = 1 + 5 - 1;
const int yyy[1 + 1][3] = {{1, 0, 2}, {-1, 3, -4}};
int var_1;
int var_2[100];
int var_3[2][12];
int varr_1, varr_2 = 10, varr_3[1 + 1], varr_4[5][999];
int varrr_1 = 10;
int varrr_2[2] = {1, 2};
int varrr_3[2][0 + 2] = {{6, 6}, {-1, 0}};
int varrrr_1 = 666, varrrr_2, varrrr_3[5] = {1, 5, 1, 96, -5}, varrrr_4[1][2] = {{555, -5}};

void func1(int a) {
    {
        _a + 1 + 2 - 1;
    }
    {
        int func1_var = 1;
        {
            int func1_var = 2;
        }
    }
}

int func2(int a, int b[]) {
    ;
    ;
    a = _A + 5 - 6;
    b[_A - 6] = 46554646;
    if (a == 5) {}  
    if (a < 10) {
        a = 1000;
    } else {
        a = b[_A - 5];
    }
    return 666;
}

void func3(int a[][3]) {
    int i = 0;
    if (a[_ - 12][0] > 10) {
        return;
    } else {}
    for (; i < 100; ) {
        if (i == 50) {
            a[0][0] = 1;
            break;
            return;
            ;
            ;
            ;
            ;
            ;
            ;
        } else {
            i = i + 1;
            continue;
        }
    }
}

int func4(int a, int b[], int c[][3]) {
    a;
    b[0];
    c[0][1];
    123456;
    111111111;
    a + b[1] + c[0][0];
    -(1 + a) + (1 + a + 44 + (1 + 2));
    1 * 5 / 4 - 5 * 4 % 4;
    +6 * a;
    1 * 6;
    8 / 444 + 6;
    55 / 8;
    5 * 9;
    9 % 44;
    return 999;
}

int func5() {
    if (1 == 2 || 2 != _a && 6666 + 5 == 4) {
        return 1111;
    } else if (!666 != -_) {
        return 5464;
    } else if (__ <= 55 * var_3[1][1] || 2 >= 54564 || +1 - +2 == 6) {
        return 4564665;
    } else if (1 || 1 < 2 + varrrr_2 || 8 > _a) {
        return 5456;
    } else {
        return 55555;
    }
    return -555;
}

int main() {
    int arr[2][3] = {{1 * _a, 2 * 8, +3}, {123 - a_r__r[1][1], 5555 / varrrr_1, 0}};
    int bv[4] = {1 / 2, 6 * arr[0][0], 5555, 22 - 5 * 8 / 4 * 5 + 5 % 4};
    int a, b;
    a = getint();
    func1(varr_2);
    arr[1][2] = getint();
    func2(111, arr[1]);
    func3(arr);
    bv[1] = getint();
    func4(a, bv, arr);
    func5();
    printf("%d\n", 1);
    printf("%d\n", 1);
    printf("%d\n", 1);
    printf("%d\n", 1);
    printf("%d\n", 1);
    printf("%d\n", 1);
    printf("%d\n", 1);
    printf("%d\n", 1);
    printf("%d\n", 1);
    return 0;
}
[INFO] Test 12
[INFO] Matching <CompileUnit>
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: _1
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <ConstExpression>: 4
[INFO] Matched <ScalarConstInitValue>: 4
[INFO] Matched <ConstInitValue>: 4
[INFO] Matched <ConstDefinition>._1 = 4
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: _3
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _1
[INFO] Matched <LeftValue>: _1
[INFO] Matched <PrimaryExpression>: _1
[INFO] Matched <UnaryExpression>: _1
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _1
[INFO] Matched <LeftValue>: _1
[INFO] Matched <PrimaryExpression>: _1
[INFO] Matched <UnaryExpression>: _1
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _1
[INFO] Matched <LeftValue>: _1
[INFO] Matched <PrimaryExpression>: _1
[INFO] Matched <UnaryExpression>: _1
[INFO] Matched <MultiplicativeExpression>: _1 * _1 * _1
[INFO] Matched <AdditiveExpression>: _1 * _1 * _1
[INFO] Matched <ConstExpression>: _1 * _1 * _1
[INFO] Matched <ScalarConstInitValue>: _1 * _1 * _1
[INFO] Matched <ConstInitValue>: _1 * _1 * _1
[INFO] Matched <ConstDefinition>._3 = _1 * _1 * _1
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: _____
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 376789
[INFO] Matched <Number>: 376789
[INFO] Matched <PrimaryExpression>: 376789
[INFO] Matched <UnaryExpression>: 376789
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 326
[INFO] Matched <Number>: 326
[INFO] Matched <PrimaryExpression>: 326
[INFO] Matched <UnaryExpression>: 326
[INFO] Matched <MultiplicativeExpression>: 376789 % 326
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 23167
[INFO] Matched <Number>: 23167
[INFO] Matched <PrimaryExpression>: 23167
[INFO] Matched <UnaryExpression>: 23167
[INFO] Matched <MultiplicativeExpression>: 23167
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3427
[INFO] Matched <Number>: 3427
[INFO] Matched <PrimaryExpression>: 3427
[INFO] Matched <UnaryExpression>: 3427
[INFO] Matched <UnaryOperatedExpression>: +3427
[INFO] Matched <UnaryExpression>: +3427
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 276
[INFO] Matched <Number>: 276
[INFO] Matched <PrimaryExpression>: 276
[INFO] Matched <UnaryExpression>: 276
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 13
[INFO] Matched <Number>: 13
[INFO] Matched <PrimaryExpression>: 13
[INFO] Matched <UnaryExpression>: 13
[INFO] Matched <MultiplicativeExpression>: +3427 * 276 / 13
[INFO] Matched <AdditiveExpression>: 376789 % 326 + 23167 - +3427 * 276 / 13
[INFO] Matched <ConstExpression>: 376789 % 326 + 23167 - +3427 * 276 / 13
[INFO] Matched <ScalarConstInitValue>: 376789 % 326 + 23167 - +3427 * 276 / 13
[INFO] Matched <ConstInitValue>: 376789 % 326 + 23167 - +3427 * 276 / 13
[INFO] Matched <ConstDefinition>._____ = 376789 % 326 + 23167 - +3427 * 276 / 13
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int _1 = 4, _3 = _1 * _1 * _1, _____ = 376789 % 326 + 23167 - +3427 * 276 / 13;
[INFO] Matched <Declaration>: const int _1 = 4, _3 = _1 * _1 * _1, _____ = 376789 % 326 + 23167 - +3427 * 276 / 13;
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: _2
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _1
[INFO] Matched <LeftValue>: _1
[INFO] Matched <PrimaryExpression>: _1
[INFO] Matched <UnaryExpression>: _1
[INFO] Matched <MultiplicativeExpression>: _1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _1
[INFO] Matched <LeftValue>: _1
[INFO] Matched <PrimaryExpression>: _1
[INFO] Matched <UnaryExpression>: _1
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: _1 / 2
[INFO] Matched <AdditiveExpression>: _1 / 2
[INFO] Matched <Expression>: _1 / 2
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (_1 / 2)
[INFO] Matched <PrimaryExpression>: (_1 / 2)
[INFO] Matched <UnaryExpression>: (_1 / 2)
[INFO] Matched <MultiplicativeExpression>: 10 * (_1 / 2)
[INFO] Matched <AdditiveExpression>: _1 + 10 * (_1 / 2)
[INFO] Matched <ConstExpression>: _1 + 10 * (_1 / 2)
[INFO] Matched <ScalarConstInitValue>: _1 + 10 * (_1 / 2)
[INFO] Matched <ConstInitValue>: _1 + 10 * (_1 / 2)
[INFO] Matched <ConstDefinition>._2 = _1 + 10 * (_1 / 2)
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int _2 = _1 + 10 * (_1 / 2);
[INFO] Matched <Declaration>: const int _2 = _1 + 10 * (_1 / 2);
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: _10
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <UnaryOperatedExpression>: -10
[INFO] Matched <UnaryExpression>: -10
[INFO] Matched <MultiplicativeExpression>: -10
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 123
[INFO] Matched <Number>: 123
[INFO] Matched <PrimaryExpression>: 123
[INFO] Matched <UnaryExpression>: 123
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 3 / 2
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 666
[INFO] Matched <Number>: 666
[INFO] Matched <PrimaryExpression>: 666
[INFO] Matched <UnaryExpression>: 666
[INFO] Matched <MultiplicativeExpression>: 666
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _1
[INFO] Matched <LeftValue>: _1
[INFO] Matched <PrimaryExpression>: _1
[INFO] Matched <UnaryExpression>: _1
[INFO] Matched <MultiplicativeExpression>: _1
[INFO] Matched <AdditiveExpression>: 666 + _1
[INFO] Matched <Expression>: 666 + _1
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (666 + _1)
[INFO] Matched <PrimaryExpression>: (666 + _1)
[INFO] Matched <UnaryExpression>: (666 + _1)
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 233
[INFO] Matched <Number>: 233
[INFO] Matched <PrimaryExpression>: 233
[INFO] Matched <UnaryExpression>: 233
[INFO] Matched <MultiplicativeExpression>: (666 + _1) % 233
[INFO] Matched <AdditiveExpression>: 3 / 2 + (666 + _1) % 233
[INFO] Matched <Expression>: 3 / 2 + (666 + _1) % 233
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (3 / 2 + (666 + _1) % 233)
[INFO] Matched <PrimaryExpression>: (3 / 2 + (666 + _1) % 233)
[INFO] Matched <UnaryExpression>: (3 / 2 + (666 + _1) % 233)
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 21
[INFO] Matched <Number>: 21
[INFO] Matched <PrimaryExpression>: 21
[INFO] Matched <UnaryExpression>: 21
[INFO] Matched <MultiplicativeExpression>: 21
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 21 + 3
[INFO] Matched <Expression>: 21 + 3
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (21 + 3)
[INFO] Matched <PrimaryExpression>: (21 + 3)
[INFO] Matched <UnaryExpression>: (21 + 3)
[INFO] Matched <MultiplicativeExpression>: 123 * (3 / 2 + (666 + _1) % 233) / (21 + 3)
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (0)
[INFO] Matched <PrimaryExpression>: (0)
[INFO] Matched <UnaryExpression>: (0)
[INFO] Matched <MultiplicativeExpression>: (0)
[INFO] Matched <AdditiveExpression>: (0)
[INFO] Matched <Expression>: (0)
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: ((0))
[INFO] Matched <PrimaryExpression>: ((0))
[INFO] Matched <UnaryExpression>: ((0))
[INFO] Matched <UnaryOperatedExpression>: +((0))
[INFO] Matched <UnaryExpression>: +((0))
[INFO] Matched <MultiplicativeExpression>: +((0))
[INFO] Matched <AdditiveExpression>: +((0))
[INFO] Matched <Expression>: +((0))
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (+((0)))
[INFO] Matched <PrimaryExpression>: (+((0)))
[INFO] Matched <UnaryExpression>: (+((0)))
[INFO] Matched <UnaryOperatedExpression>: -(+((0)))
[INFO] Matched <UnaryExpression>: -(+((0)))
[INFO] Matched <MultiplicativeExpression>: -(+((0)))
[INFO] Matched <AdditiveExpression>: -(+((0)))
[INFO] Matched <Expression>: -(+((0)))
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (-(+((0))))
[INFO] Matched <PrimaryExpression>: (-(+((0))))
[INFO] Matched <UnaryExpression>: (-(+((0))))
[INFO] Matched <UnaryOperatedExpression>: +(-(+((0))))
[INFO] Matched <UnaryExpression>: +(-(+((0))))
[INFO] Matched <MultiplicativeExpression>: +(-(+((0))))
[INFO] Matched <AdditiveExpression>: +(-(+((0))))
[INFO] Matched <Expression>: +(-(+((0))))
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (+(-(+((0)))))
[INFO] Matched <PrimaryExpression>: (+(-(+((0)))))
[INFO] Matched <UnaryExpression>: (+(-(+((0)))))
[INFO] Matched <UnaryOperatedExpression>: -(+(-(+((0)))))
[INFO] Matched <UnaryExpression>: -(+(-(+((0)))))
[INFO] Matched <MultiplicativeExpression>: -(+(-(+((0)))))
[INFO] Matched <AdditiveExpression>: -(+(-(+((0)))))
[INFO] Matched <Expression>: -(+(-(+((0)))))
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (-(+(-(+((0))))))
[INFO] Matched <PrimaryExpression>: (-(+(-(+((0))))))
[INFO] Matched <UnaryExpression>: (-(+(-(+((0))))))
[INFO] Matched <UnaryOperatedExpression>: +(-(+(-(+((0))))))
[INFO] Matched <UnaryExpression>: +(-(+(-(+((0))))))
[INFO] Matched <MultiplicativeExpression>: +(-(+(-(+((0))))))
[INFO] Matched <AdditiveExpression>: +(-(+(-(+((0))))))
[INFO] Matched <Expression>: +(-(+(-(+((0))))))
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (+(-(+(-(+((0)))))))
[INFO] Matched <PrimaryExpression>: (+(-(+(-(+((0)))))))
[INFO] Matched <UnaryExpression>: (+(-(+(-(+((0)))))))
[INFO] Matched <MultiplicativeExpression>: (+(-(+(-(+((0)))))))
[INFO] Matched <AdditiveExpression>: -10 + 123 * (3 / 2 + (666 + _1) % 233) / (21 + 3) + (+(-(+(-(+((0)))))))
[INFO] Matched <ConstExpression>: -10 + 123 * (3 / 2 + (666 + _1) % 233) / (21 + 3) + (+(-(+(-(+((0)))))))
[INFO] Matched <ScalarConstInitValue>: -10 + 123 * (3 / 2 + (666 + _1) % 233) / (21 + 3) + (+(-(+(-(+((0)))))))
[INFO] Matched <ConstInitValue>: -10 + 123 * (3 / 2 + (666 + _1) % 233) / (21 + 3) + (+(-(+(-(+((0)))))))
[INFO] Matched <ConstDefinition>._10 = -10 + 123 * (3 / 2 + (666 + _1) % 233) / (21 + 3) + (+(-(+(-(+((0)))))))
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int _10 = -10 + 123 * (3 / 2 + (666 + _1) % 233) / (21 + 3) + (+(-(+(-(+((0)))))));
[INFO] Matched <Declaration>: const int _10 = -10 + 123 * (3 / 2 + (666 + _1) % 233) / (21 + 3) + (+(-(+(-(+((0)))))));
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: aaa
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 4 / 2
[INFO] Matched <AdditiveExpression>: 4 / 2
[INFO] Matched <ConstExpression>: 4 / 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10086
[INFO] Matched <Number>: 10086
[INFO] Matched <PrimaryExpression>: 10086
[INFO] Matched <UnaryExpression>: 10086
[INFO] Matched <MultiplicativeExpression>: 10086
[INFO] Matched <AdditiveExpression>: 10086
[INFO] Matched <ConstExpression>: 10086
[INFO] Matched <ScalarConstInitValue>: 10086
[INFO] Matched <ConstInitValue>: 10086
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _1
[INFO] Matched <LeftValue>: _1
[INFO] Matched <PrimaryExpression>: _1
[INFO] Matched <UnaryExpression>: _1
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _1
[INFO] Matched <LeftValue>: _1
[INFO] Matched <PrimaryExpression>: _1
[INFO] Matched <UnaryExpression>: _1
[INFO] Matched <MultiplicativeExpression>: _1 * _1
[INFO] Matched <AdditiveExpression>: _1 * _1
[INFO] Matched <ConstExpression>: _1 * _1
[INFO] Matched <ScalarConstInitValue>: _1 * _1
[INFO] Matched <ConstInitValue>: _1 * _1
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {10086, _1 * _1}
[INFO] Matched <ConstInitValue>: {10086, _1 * _1}
[INFO] Matched <ConstDefinition>.aaa[4 / 2] = {10086, _1 * _1}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int aaa[4 / 2] = {10086, _1 * _1};
[INFO] Matched <Declaration>: const int aaa[4 / 2] = {10086, _1 * _1};
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: A
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <ConstExpression>: 4
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 233
[INFO] Matched <Number>: 233
[INFO] Matched <PrimaryExpression>: 233
[INFO] Matched <UnaryExpression>: 233
[INFO] Matched <MultiplicativeExpression>: 233
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 233 + 3
[INFO] Matched <Expression>: 233 + 3
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (233 + 3)
[INFO] Matched <PrimaryExpression>: (233 + 3)
[INFO] Matched <UnaryExpression>: (233 + 3)
[INFO] Matched <MultiplicativeExpression>: 0 * (233 + 3)
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 212132
[INFO] Matched <Number>: 212132
[INFO] Matched <PrimaryExpression>: 212132
[INFO] Matched <UnaryExpression>: 212132
[INFO] Matched <MultiplicativeExpression>: 212132
[INFO] Matched <AdditiveExpression>: 0 * (233 + 3) + 212132
[INFO] Matched <ConstExpression>: 0 * (233 + 3) + 212132
[INFO] Matched <ScalarConstInitValue>: 0 * (233 + 3) + 212132
[INFO] Matched <ConstInitValue>: 0 * (233 + 3) + 212132
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _1
[INFO] Matched <LeftValue>: _1
[INFO] Matched <PrimaryExpression>: _1
[INFO] Matched <UnaryExpression>: _1
[INFO] Matched <MultiplicativeExpression>: _1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _1
[INFO] Matched <LeftValue>: _1
[INFO] Matched <PrimaryExpression>: _1
[INFO] Matched <UnaryExpression>: _1
[INFO] Matched <MultiplicativeExpression>: 2 * _1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _3
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _3
[INFO] Matched <LeftValue>: _3
[INFO] Matched <PrimaryExpression>: _3
[INFO] Matched <UnaryExpression>: _3
[INFO] Matched <MultiplicativeExpression>: _3
[INFO] Matched <AdditiveExpression>: _1 + 2 * _1 + _3
[INFO] Matched <ConstExpression>: _1 + 2 * _1 + _3
[INFO] Matched <ScalarConstInitValue>: _1 + 2 * _1 + _3
[INFO] Matched <ConstInitValue>: _1 + 2 * _1 + _3
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1234
[INFO] Matched <Number>: 1234
[INFO] Matched <PrimaryExpression>: 1234
[INFO] Matched <UnaryExpression>: 1234
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _1
[INFO] Matched <LeftValue>: _1
[INFO] Matched <PrimaryExpression>: _1
[INFO] Matched <UnaryExpression>: _1
[INFO] Matched <MultiplicativeExpression>: 1234 / _1
[INFO] Matched <AdditiveExpression>: 1234 / _1
[INFO] Matched <ConstExpression>: 1234 / _1
[INFO] Matched <ScalarConstInitValue>: 1234 / _1
[INFO] Matched <ConstInitValue>: 1234 / _1
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {0 * (233 + 3) + 212132, _1 + 2 * _1 + _3, 1234 / _1}
[INFO] Matched <ConstInitValue>: {0 * (233 + 3) + 212132, _1 + 2 * _1 + _3, 1234 / _1}
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <UnaryOperatedExpression>: -3
[INFO] Matched <UnaryExpression>: -3
[INFO] Matched <MultiplicativeExpression>: -3
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 657
[INFO] Matched <Number>: 657
[INFO] Matched <PrimaryExpression>: 657
[INFO] Matched <UnaryExpression>: 657
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 24
[INFO] Matched <Number>: 24
[INFO] Matched <PrimaryExpression>: 24
[INFO] Matched <UnaryExpression>: 24
[INFO] Matched <MultiplicativeExpression>: 657 / 24
[INFO] Matched <AdditiveExpression>: -3 + 2 + 657 / 24
[INFO] Matched <ConstExpression>: -3 + 2 + 657 / 24
[INFO] Matched <ScalarConstInitValue>: -3 + 2 + 657 / 24
[INFO] Matched <ConstInitValue>: -3 + 2 + 657 / 24
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _2
[INFO] Matched <LeftValue>: _2
[INFO] Matched <PrimaryExpression>: _2
[INFO] Matched <UnaryExpression>: _2
[INFO] Matched <MultiplicativeExpression>: _2
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 57024
[INFO] Matched <Number>: 57024
[INFO] Matched <PrimaryExpression>: 57024
[INFO] Matched <UnaryExpression>: 57024
[INFO] Matched <MultiplicativeExpression>: 57024
[INFO] Matched <AdditiveExpression>: _2 + 57024
[INFO] Matched <ConstExpression>: _2 + 57024
[INFO] Matched <ScalarConstInitValue>: _2 + 57024
[INFO] Matched <ConstInitValue>: _2 + 57024
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _10
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _10
[INFO] Matched <LeftValue>: _10
[INFO] Matched <PrimaryExpression>: _10
[INFO] Matched <UnaryExpression>: _10
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _2
[INFO] Matched <LeftValue>: _2
[INFO] Matched <PrimaryExpression>: _2
[INFO] Matched <UnaryExpression>: _2
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _3
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _3
[INFO] Matched <LeftValue>: _3
[INFO] Matched <PrimaryExpression>: _3
[INFO] Matched <UnaryExpression>: _3
[INFO] Matched <MultiplicativeExpression>: _10 * _2 / 2 * 4 * _3
[INFO] Matched <AdditiveExpression>: _10 * _2 / 2 * 4 * _3
[INFO] Matched <ConstExpression>: _10 * _2 / 2 * 4 * _3
[INFO] Matched <ScalarConstInitValue>: _10 * _2 / 2 * 4 * _3
[INFO] Matched <ConstInitValue>: _10 * _2 / 2 * 4 * _3
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {-3 + 2 + 657 / 24, _2 + 57024, _10 * _2 / 2 * 4 * _3}
[INFO] Matched <ConstInitValue>: {-3 + 2 + 657 / 24, _2 + 57024, _10 * _2 / 2 * 4 * _3}
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 8792
[INFO] Matched <Number>: 8792
[INFO] Matched <PrimaryExpression>: 8792
[INFO] Matched <UnaryExpression>: 8792
[INFO] Matched <MultiplicativeExpression>: 8792
[INFO] Matched <AdditiveExpression>: 8792
[INFO] Matched <ConstExpression>: 8792
[INFO] Matched <ScalarConstInitValue>: 8792
[INFO] Matched <ConstInitValue>: 8792
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 289
[INFO] Matched <Number>: 289
[INFO] Matched <PrimaryExpression>: 289
[INFO] Matched <UnaryExpression>: 289
[INFO] Matched <UnaryOperatedExpression>: -289
[INFO] Matched <UnaryExpression>: -289
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2378
[INFO] Matched <Number>: 2378
[INFO] Matched <PrimaryExpression>: 2378
[INFO] Matched <UnaryExpression>: 2378
[INFO] Matched <MultiplicativeExpression>: -289 * 2378
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 89
[INFO] Matched <Number>: 89
[INFO] Matched <PrimaryExpression>: 89
[INFO] Matched <UnaryExpression>: 89
[INFO] Matched <MultiplicativeExpression>: 89
[INFO] Matched <AdditiveExpression>: -289 * 2378 - 89
[INFO] Matched <ConstExpression>: -289 * 2378 - 89
[INFO] Matched <ScalarConstInitValue>: -289 * 2378 - 89
[INFO] Matched <ConstInitValue>: -289 * 2378 - 89
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 908
[INFO] Matched <Number>: 908
[INFO] Matched <PrimaryExpression>: 908
[INFO] Matched <UnaryExpression>: 908
[INFO] Matched <MultiplicativeExpression>: 908
[INFO] Matched <AdditiveExpression>: 908
[INFO] Matched <ConstExpression>: 908
[INFO] Matched <ScalarConstInitValue>: 908
[INFO] Matched <ConstInitValue>: 908
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {8792, -289 * 2378 - 89, 908}
[INFO] Matched <ConstInitValue>: {8792, -289 * 2378 - 89, 908}
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _10
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _10
[INFO] Matched <LeftValue>: _10
[INFO] Matched <PrimaryExpression>: _10
[INFO] Matched <UnaryExpression>: _10
[INFO] Matched <MultiplicativeExpression>: _10
[INFO] Matched <AdditiveExpression>: _10
[INFO] Matched <ConstExpression>: _10
[INFO] Matched <ScalarConstInitValue>: _10
[INFO] Matched <ConstInitValue>: _10
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2768
[INFO] Matched <Number>: 2768
[INFO] Matched <PrimaryExpression>: 2768
[INFO] Matched <UnaryExpression>: 2768
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 13
[INFO] Matched <Number>: 13
[INFO] Matched <PrimaryExpression>: 13
[INFO] Matched <UnaryExpression>: 13
[INFO] Matched <MultiplicativeExpression>: 2768 % 13
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 56
[INFO] Matched <Number>: 56
[INFO] Matched <PrimaryExpression>: 56
[INFO] Matched <UnaryExpression>: 56
[INFO] Matched <MultiplicativeExpression>: 56
[INFO] Matched <AdditiveExpression>: 2768 % 13 + 56
[INFO] Matched <Expression>: 2768 % 13 + 56
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (2768 % 13 + 56)
[INFO] Matched <PrimaryExpression>: (2768 % 13 + 56)
[INFO] Matched <UnaryExpression>: (2768 % 13 + 56)
[INFO] Matched <MultiplicativeExpression>: 2 * (2768 % 13 + 56)
[INFO] Matched <AdditiveExpression>: 2 * (2768 % 13 + 56)
[INFO] Matched <ConstExpression>: 2 * (2768 % 13 + 56)
[INFO] Matched <ScalarConstInitValue>: 2 * (2768 % 13 + 56)
[INFO] Matched <ConstInitValue>: 2 * (2768 % 13 + 56)
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (0)
[INFO] Matched <PrimaryExpression>: (0)
[INFO] Matched <UnaryExpression>: (0)
[INFO] Matched <MultiplicativeExpression>: (0)
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10086
[INFO] Matched <Number>: 10086
[INFO] Matched <PrimaryExpression>: 10086
[INFO] Matched <UnaryExpression>: 10086
[INFO] Matched <MultiplicativeExpression>: 10086
[INFO] Matched <AdditiveExpression>: 10086
[INFO] Matched <Expression>: 10086
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (10086)
[INFO] Matched <PrimaryExpression>: (10086)
[INFO] Matched <UnaryExpression>: (10086)
[INFO] Matched <MultiplicativeExpression>: (10086)
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <UnaryOperatedExpression>: -2
[INFO] Matched <UnaryExpression>: -2
[INFO] Matched <MultiplicativeExpression>: -2
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 20
[INFO] Matched <Number>: 20
[INFO] Matched <PrimaryExpression>: 20
[INFO] Matched <UnaryExpression>: 20
[INFO] Matched <UnaryOperatedExpression>: +20
[INFO] Matched <UnaryExpression>: +20
[INFO] Matched <MultiplicativeExpression>: +20
[INFO] Matched <AdditiveExpression>: (0) + (10086) + -2 + +20
[INFO] Matched <ConstExpression>: (0) + (10086) + -2 + +20
[INFO] Matched <ScalarConstInitValue>: (0) + (10086) + -2 + +20
[INFO] Matched <ConstInitValue>: (0) + (10086) + -2 + +20
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {_10, 2 * (2768 % 13 + 56), (0) + (10086) + -2 + +20}
[INFO] Matched <ConstInitValue>: {_10, 2 * (2768 % 13 + 56), (0) + (10086) + -2 + +20}
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {{0 * (233 + 3) + 212132, _1 + 2 * _1 + _3, 1234 / _1}, {-3 + 2 + 657 / 24, _2 + 57024, _10 * _2 / 2 * 4 * _3}, {8792, -289 * 2378 - 89, 908}, {_10, 2 * (2768 % 13 + 56), (0) + (10086) + -2 + +20}}
[INFO] Matched <ConstInitValue>: {{0 * (233 + 3) + 212132, _1 + 2 * _1 + _3, 1234 / _1}, {-3 + 2 + 657 / 24, _2 + 57024, _10 * _2 / 2 * 4 * _3}, {8792, -289 * 2378 - 89, 908}, {_10, 2 * (2768 % 13 + 56), (0) + (10086) + -2 + +20}}
[INFO] Matched <ConstDefinition>.A[4][3] = {{0 * (233 + 3) + 212132, _1 + 2 * _1 + _3, 1234 / _1}, {-3 + 2 + 657 / 24, _2 + 57024, _10 * _2 / 2 * 4 * _3}, {8792, -289 * 2378 - 89, 908}, {_10, 2 * (2768 % 13 + 56), (0) + (10086) + -2 + +20}}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int A[4][3] = {{0 * (233 + 3) + 212132, _1 + 2 * _1 + _3, 1234 / _1}, {-3 + 2 + 657 / 24, _2 + 57024, _10 * _2 / 2 * 4 * _3}, {8792, -289 * 2378 - 89, 908}, {_10, 2 * (2768 % 13 + 56), (0) + (10086) + -2 + +20}};
[INFO] Matched <Declaration>: const int A[4][3] = {{0 * (233 + 3) + 212132, _1 + 2 * _1 + _3, 1234 / _1}, {-3 + 2 + 657 / 24, _2 + 57024, _10 * _2 / 2 * 4 * _3}, {8792, -289 * 2378 - 89, 908}, {_10, 2 * (2768 % 13 + 56), (0) + (10086) + -2 + +20}};
[INFO] Consumed Token: int
[INFO] Consumed Token: _3cg
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: _3cg
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: _3cg
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _10
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _10
[INFO] Matched <LeftValue>: _10
[INFO] Matched <PrimaryExpression>: _10
[INFO] Matched <UnaryExpression>: _10
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2364
[INFO] Matched <Number>: 2364
[INFO] Matched <PrimaryExpression>: 2364
[INFO] Matched <UnaryExpression>: 2364
[INFO] Matched <MultiplicativeExpression>: _10 * 2364
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 324567
[INFO] Matched <Number>: 324567
[INFO] Matched <PrimaryExpression>: 324567
[INFO] Matched <UnaryExpression>: 324567
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 34
[INFO] Matched <Number>: 34
[INFO] Matched <PrimaryExpression>: 34
[INFO] Matched <UnaryExpression>: 34
[INFO] Matched <UnaryOperatedExpression>: -34
[INFO] Matched <UnaryExpression>: -34
[INFO] Matched <MultiplicativeExpression>: -34
[INFO] Matched <AdditiveExpression>: -34
[INFO] Matched <Expression>: -34
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (-34)
[INFO] Matched <PrimaryExpression>: (-34)
[INFO] Matched <UnaryExpression>: (-34)
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 213
[INFO] Matched <Number>: 213
[INFO] Matched <PrimaryExpression>: 213
[INFO] Matched <UnaryExpression>: 213
[INFO] Matched <UnaryOperatedExpression>: -213
[INFO] Matched <UnaryExpression>: -213
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10009921
[INFO] Matched <Number>: 10009921
[INFO] Matched <PrimaryExpression>: 10009921
[INFO] Matched <UnaryExpression>: 10009921
[INFO] Matched <MultiplicativeExpression>: 324567 / (-34) * -213 % 10009921
[INFO] Matched <AdditiveExpression>: _10 * 2364 + 324567 / (-34) * -213 % 10009921
[INFO] Matched <Expression>: _10 * 2364 + 324567 / (-34) * -213 % 10009921
[INFO] Matched <ScalarVarInitValue>: _10 * 2364 + 324567 / (-34) * -213 % 10009921
[INFO] Matched <VarInitValue>: _10 * 2364 + 324567 / (-34) * -213 % 10009921
[INFO] Matched <VarDefinition>: _3cg = _10 * 2364 + 324567 / (-34) * -213 % 10009921
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: hdc33ec_dyu
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 278
[INFO] Matched <Number>: 278
[INFO] Matched <PrimaryExpression>: 278
[INFO] Matched <UnaryExpression>: 278
[INFO] Matched <UnaryOperatedExpression>: -278
[INFO] Matched <UnaryExpression>: -278
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2318
[INFO] Matched <Number>: 2318
[INFO] Matched <PrimaryExpression>: 2318
[INFO] Matched <UnaryExpression>: 2318
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10009921
[INFO] Matched <Number>: 10009921
[INFO] Matched <PrimaryExpression>: 10009921
[INFO] Matched <UnaryExpression>: 10009921
[INFO] Matched <MultiplicativeExpression>: -278 * 2318 / 10009921
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 234
[INFO] Matched <Number>: 234
[INFO] Matched <PrimaryExpression>: 234
[INFO] Matched <UnaryExpression>: 234
[INFO] Matched <UnaryOperatedExpression>: +234
[INFO] Matched <UnaryExpression>: +234
[INFO] Matched <MultiplicativeExpression>: +234
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 831
[INFO] Matched <Number>: 831
[INFO] Matched <PrimaryExpression>: 831
[INFO] Matched <UnaryExpression>: 831
[INFO] Matched <MultiplicativeExpression>: 831
[INFO] Matched <AdditiveExpression>: -278 * 2318 / 10009921 + +234 - 831
[INFO] Matched <Expression>: -278 * 2318 / 10009921 + +234 - 831
[INFO] Matched <ScalarVarInitValue>: -278 * 2318 / 10009921 + +234 - 831
[INFO] Matched <VarInitValue>: -278 * 2318 / 10009921 + +234 - 831
[INFO] Matched <VarDefinition>: hdc33ec_dyu = -278 * 2318 / 10009921 + +234 - 831
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int _3cg = _10 * 2364 + 324567 / (-34) * -213 % 10009921, hdc33ec_dyu = -278 * 2318 / 10009921 + +234 - 831;
[INFO] Matched <Declaration>: int _3cg = _10 * 2364 + 324567 / (-34) * -213 % 10009921, hdc33ec_dyu = -278 * 2318 / 10009921 + +234 - 831;
[INFO] Consumed Token: int
[INFO] Consumed Token: cdh3yi_23
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: cdh3yi_23
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: cdh3yi_23
[INFO] Matched <VarDefinition>: cdh3yi_23
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: duhih2_23c
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1983
[INFO] Matched <Number>: 1983
[INFO] Matched <PrimaryExpression>: 1983
[INFO] Matched <UnaryExpression>: 1983
[INFO] Matched <MultiplicativeExpression>: 1983
[INFO] Matched <AdditiveExpression>: 1983
[INFO] Matched <Expression>: 1983
[INFO] Matched <ScalarVarInitValue>: 1983
[INFO] Matched <VarInitValue>: 1983
[INFO] Matched <VarDefinition>: duhih2_23c = 1983
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: _23879
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <ConstExpression>: 4
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2323
[INFO] Matched <Number>: 2323
[INFO] Matched <PrimaryExpression>: 2323
[INFO] Matched <UnaryExpression>: 2323
[INFO] Matched <MultiplicativeExpression>: 2323
[INFO] Matched <AdditiveExpression>: 2323
[INFO] Matched <Expression>: 2323
[INFO] Matched <ScalarVarInitValue>: 2323
[INFO] Matched <VarInitValue>: 2323
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 9382
[INFO] Matched <Number>: 9382
[INFO] Matched <PrimaryExpression>: 9382
[INFO] Matched <UnaryExpression>: 9382
[INFO] Matched <UnaryOperatedExpression>: +9382
[INFO] Matched <UnaryExpression>: +9382
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 23
[INFO] Matched <Number>: 23
[INFO] Matched <PrimaryExpression>: 23
[INFO] Matched <UnaryExpression>: 23
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 23
[INFO] Matched <Number>: 23
[INFO] Matched <PrimaryExpression>: 23
[INFO] Matched <UnaryExpression>: 23
[INFO] Matched <MultiplicativeExpression>: +9382 * 23 / 23
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 128
[INFO] Matched <Number>: 128
[INFO] Matched <PrimaryExpression>: 128
[INFO] Matched <UnaryExpression>: 128
[INFO] Matched <MultiplicativeExpression>: 128
[INFO] Matched <AdditiveExpression>: +9382 * 23 / 23 - 128
[INFO] Matched <Expression>: +9382 * 23 / 23 - 128
[INFO] Matched <ScalarVarInitValue>: +9382 * 23 / 23 - 128
[INFO] Matched <VarInitValue>: +9382 * 23 / 23 - 128
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <UnaryOperatedExpression>: -0
[INFO] Matched <UnaryExpression>: -0
[INFO] Matched <MultiplicativeExpression>: -0
[INFO] Matched <AdditiveExpression>: -0
[INFO] Matched <Expression>: -0
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (-0)
[INFO] Matched <PrimaryExpression>: (-0)
[INFO] Matched <UnaryExpression>: (-0)
[INFO] Matched <MultiplicativeExpression>: (-0)
[INFO] Matched <AdditiveExpression>: (-0)
[INFO] Matched <Expression>: (-0)
[INFO] Matched <ScalarVarInitValue>: (-0)
[INFO] Matched <VarInitValue>: (-0)
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 390042
[INFO] Matched <Number>: 390042
[INFO] Matched <PrimaryExpression>: 390042
[INFO] Matched <UnaryExpression>: 390042
[INFO] Matched <MultiplicativeExpression>: 390042
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 204
[INFO] Matched <Number>: 204
[INFO] Matched <PrimaryExpression>: 204
[INFO] Matched <UnaryExpression>: 204
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 8137
[INFO] Matched <Number>: 8137
[INFO] Matched <PrimaryExpression>: 8137
[INFO] Matched <UnaryExpression>: 8137
[INFO] Matched <MultiplicativeExpression>: 204 * 8137
[INFO] Matched <AdditiveExpression>: 390042 - 204 * 8137
[INFO] Matched <Expression>: 390042 - 204 * 8137
[INFO] Matched <ScalarVarInitValue>: 390042 - 204 * 8137
[INFO] Matched <VarInitValue>: 390042 - 204 * 8137
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {2323, +9382 * 23 / 23 - 128, (-0), 390042 - 204 * 8137}
[INFO] Matched <VarInitValue>: {2323, +9382 * 23 / 23 - 128, (-0), 390042 - 204 * 8137}
[INFO] Matched <VarDefinition>: _23879[4] = {2323, +9382 * 23 / 23 - 128, (-0), 390042 - 204 * 8137}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int cdh3yi_23, duhih2_23c = 1983, _23879[4] = {2323, +9382 * 23 / 23 - 128, (-0), 390042 - 204 * 8137};
[INFO] Matched <Declaration>: int cdh3yi_23, duhih2_23c = 1983, _23879[4] = {2323, +9382 * 23 / 23 - 128, (-0), 390042 - 204 * 8137};
[INFO] Consumed Token: int
[INFO] Consumed Token: dijhw
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: dijhw
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: dijhw
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <VarDefinition>: dijhw[3][2]
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: cdwuh
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <VarDefinition>: cdwuh[2]
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: wuei
[INFO] Matched <VarDefinition>: wuei
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: _3u22
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 287
[INFO] Matched <Number>: 287
[INFO] Matched <PrimaryExpression>: 287
[INFO] Matched <UnaryExpression>: 287
[INFO] Matched <MultiplicativeExpression>: 287
[INFO] Matched <AdditiveExpression>: 287
[INFO] Matched <Expression>: 287
[INFO] Matched <ScalarVarInitValue>: 287
[INFO] Matched <VarInitValue>: 287
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _____
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _____
[INFO] Matched <LeftValue>: _____
[INFO] Matched <PrimaryExpression>: _____
[INFO] Matched <UnaryExpression>: _____
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: _____ * 2
[INFO] Matched <AdditiveExpression>: _____ * 2
[INFO] Matched <Expression>: _____ * 2
[INFO] Matched <ScalarVarInitValue>: _____ * 2
[INFO] Matched <VarInitValue>: _____ * 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {287, _____ * 2}
[INFO] Matched <VarInitValue>: {287, _____ * 2}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 287
[INFO] Matched <Number>: 287
[INFO] Matched <PrimaryExpression>: 287
[INFO] Matched <UnaryExpression>: 287
[INFO] Matched <MultiplicativeExpression>: 287
[INFO] Matched <AdditiveExpression>: 287
[INFO] Matched <Expression>: 287
[INFO] Matched <ScalarVarInitValue>: 287
[INFO] Matched <VarInitValue>: 287
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2786
[INFO] Matched <Number>: 2786
[INFO] Matched <PrimaryExpression>: 2786
[INFO] Matched <UnaryExpression>: 2786
[INFO] Matched <MultiplicativeExpression>: 2786
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 8719
[INFO] Matched <Number>: 8719
[INFO] Matched <PrimaryExpression>: 8719
[INFO] Matched <UnaryExpression>: 8719
[INFO] Matched <UnaryOperatedExpression>: -8719
[INFO] Matched <UnaryExpression>: -8719
[INFO] Matched <MultiplicativeExpression>: -8719
[INFO] Matched <AdditiveExpression>: 2786 - -8719
[INFO] Matched <Expression>: 2786 - -8719
[INFO] Matched <ScalarVarInitValue>: 2786 - -8719
[INFO] Matched <VarInitValue>: 2786 - -8719
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {287, 2786 - -8719}
[INFO] Matched <VarInitValue>: {287, 2786 - -8719}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{287, _____ * 2}, {287, 2786 - -8719}}
[INFO] Matched <VarInitValue>: {{287, _____ * 2}, {287, 2786 - -8719}}
[INFO] Matched <VarDefinition>: _3u22[2][2] = {{287, _____ * 2}, {287, 2786 - -8719}}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int dijhw[3][2], cdwuh[2], wuei, _3u22[2][2] = {{287, _____ * 2}, {287, 2786 - -8719}};
[INFO] Matched <Declaration>: int dijhw[3][2], cdwuh[2], wuei, _3u22[2][2] = {{287, _____ * 2}, {287, 2786 - -8719}};
[INFO] Consumed Token: int
[INFO] Consumed Token: jdfo_
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: jdfo_
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: jdfo_
[INFO] Matched <VarDefinition>: jdfo_
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int jdfo_;
[INFO] Matched <Declaration>: int jdfo_;
[INFO] Consumed Token: int
[INFO] Consumed Token: __my_Ha_s__h
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: __my_Ha_s__h
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: __my_Ha_s__h
[INFO] Matched <VarDefinition>: __my_Ha_s__h
[INFO] Failed to match <VarDeclaration>.
[INFO] Lexer rolling back...
[INFO] Failed to match <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: __my_Ha_s__h
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: __my_Ha_s__h
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: _
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int _[]
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: len
[INFO] Matched <FuncParamList>: int _[], int len
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: __
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: __
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: __
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: __
[INFO] Matched <VarDefinition>: __
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: I
[INFO] Matched <VarDefinition>: I
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int __, I;
[INFO] Matched <Declaration>: int __, I;
[INFO] Matched <BlockItem>:
int __, I;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Matched <PrimaryExpression>: __
[INFO] Matched <UnaryExpression>: __
[INFO] Matched <MultiplicativeExpression>: __
[INFO] Matched <AdditiveExpression>: __
[INFO] Matched <Expression>: __
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: len
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: len
[INFO] Matched <LeftValue>: len
[INFO] Matched <PrimaryExpression>: len
[INFO] Matched <UnaryExpression>: len
[INFO] Matched <MultiplicativeExpression>: len
[INFO] Matched <AdditiveExpression>: len
[INFO] Matched <Expression>: len
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: __ = len;
[INFO] Matched <Statement>: __ = len;
[INFO] Matched <BlockItem>:
__ = len;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: I
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: I
[INFO] Matched <LeftValue>: I
[INFO] Matched <PrimaryExpression>: I
[INFO] Matched <UnaryExpression>: I
[INFO] Matched <MultiplicativeExpression>: I
[INFO] Matched <AdditiveExpression>: I
[INFO] Matched <Expression>: I
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: I
[INFO] Matched <LeftValue>: I
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: I
[INFO] Matched <LeftValue>: I
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: I = 0;
[INFO] Matched <Statement>: I = 0;
[INFO] Matched <BlockItem>:
I = 0;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: I
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: I
[INFO] Matched <LeftValue>: I
[INFO] Matched <PrimaryExpression>: I
[INFO] Matched <UnaryExpression>: I
[INFO] Matched <MultiplicativeExpression>: I
[INFO] Matched <AdditiveExpression>: I
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: len
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: len
[INFO] Matched <LeftValue>: len
[INFO] Matched <PrimaryExpression>: len
[INFO] Matched <UnaryExpression>: len
[INFO] Matched <MultiplicativeExpression>: len
[INFO] Matched <AdditiveExpression>: len
[INFO] Matched <RelationalExpression>: I < len
[INFO] Matched <EqualityExpression>: I < len
[INFO] Matched <LogicalAndExpression>: I < len
[INFO] Matched <LogicalOrExpression>: I < len
[INFO] Matched <Condition>: I < len
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Matched <PrimaryExpression>: __
[INFO] Matched <UnaryExpression>: __
[INFO] Matched <MultiplicativeExpression>: __
[INFO] Matched <AdditiveExpression>: __
[INFO] Matched <Expression>: __
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Matched <PrimaryExpression>: __
[INFO] Matched <UnaryExpression>: __
[INFO] Matched <MultiplicativeExpression>: __
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 98326464
[INFO] Matched <Number>: 98326464
[INFO] Matched <PrimaryExpression>: 98326464
[INFO] Matched <UnaryExpression>: 98326464
[INFO] Matched <MultiplicativeExpression>: 98326464
[INFO] Matched <AdditiveExpression>: __ + 98326464
[INFO] Matched <Expression>: __ + 98326464
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: __ = __ + 98326464;
[INFO] Matched <Statement>: __ = __ + 98326464;
[INFO] Matched <BlockItem>:
__ = __ + 98326464;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Matched <PrimaryExpression>: __
[INFO] Matched <UnaryExpression>: __
[INFO] Matched <MultiplicativeExpression>: __
[INFO] Matched <AdditiveExpression>: __
[INFO] Matched <Expression>: __
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Matched <PrimaryExpression>: __
[INFO] Matched <UnaryExpression>: __
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 20373381
[INFO] Matched <Number>: 20373381
[INFO] Matched <PrimaryExpression>: 20373381
[INFO] Matched <UnaryExpression>: 20373381
[INFO] Matched <MultiplicativeExpression>: __ * 20373381
[INFO] Matched <AdditiveExpression>: __ * 20373381
[INFO] Matched <Expression>: __ * 20373381
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: __ = __ * 20373381;
[INFO] Matched <Statement>: __ = __ * 20373381;
[INFO] Matched <BlockItem>:
__ = __ * 20373381;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Matched <PrimaryExpression>: __
[INFO] Matched <UnaryExpression>: __
[INFO] Matched <MultiplicativeExpression>: __
[INFO] Matched <AdditiveExpression>: __
[INFO] Matched <Expression>: __
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Matched <PrimaryExpression>: __
[INFO] Matched <UnaryExpression>: __
[INFO] Matched <MultiplicativeExpression>: __
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 23667832
[INFO] Matched <Number>: 23667832
[INFO] Matched <PrimaryExpression>: 23667832
[INFO] Matched <UnaryExpression>: 23667832
[INFO] Matched <MultiplicativeExpression>: 23667832
[INFO] Matched <AdditiveExpression>: __ + 23667832
[INFO] Matched <Expression>: __ + 23667832
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: __ = __ + 23667832;
[INFO] Matched <Statement>: __ = __ + 23667832;
[INFO] Matched <BlockItem>:
__ = __ + 23667832;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Matched <PrimaryExpression>: __
[INFO] Matched <UnaryExpression>: __
[INFO] Matched <MultiplicativeExpression>: __
[INFO] Matched <AdditiveExpression>: __
[INFO] Matched <Expression>: __
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Matched <PrimaryExpression>: __
[INFO] Matched <UnaryExpression>: __
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 133
[INFO] Matched <Number>: 133
[INFO] Matched <PrimaryExpression>: 133
[INFO] Matched <UnaryExpression>: 133
[INFO] Matched <MultiplicativeExpression>: __ / 133
[INFO] Matched <AdditiveExpression>: __ / 133
[INFO] Matched <Expression>: __ / 133
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: __ = __ / 133;
[INFO] Matched <Statement>: __ = __ / 133;
[INFO] Matched <BlockItem>:
__ = __ / 133;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Matched <PrimaryExpression>: __
[INFO] Matched <UnaryExpression>: __
[INFO] Matched <MultiplicativeExpression>: __
[INFO] Matched <AdditiveExpression>: __
[INFO] Matched <Expression>: __
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Matched <PrimaryExpression>: __
[INFO] Matched <UnaryExpression>: __
[INFO] Matched <MultiplicativeExpression>: __
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1347887899
[INFO] Matched <Number>: 1347887899
[INFO] Matched <PrimaryExpression>: 1347887899
[INFO] Matched <UnaryExpression>: 1347887899
[INFO] Matched <MultiplicativeExpression>: 1347887899
[INFO] Matched <AdditiveExpression>: __ + 1347887899
[INFO] Matched <Expression>: __ + 1347887899
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: __ = __ + 1347887899;
[INFO] Matched <Statement>: __ = __ + 1347887899;
[INFO] Matched <BlockItem>:
__ = __ + 1347887899;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Matched <PrimaryExpression>: __
[INFO] Matched <UnaryExpression>: __
[INFO] Matched <MultiplicativeExpression>: __
[INFO] Matched <AdditiveExpression>: __
[INFO] Matched <Expression>: __
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Matched <PrimaryExpression>: __
[INFO] Matched <UnaryExpression>: __
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 99998099
[INFO] Matched <Number>: 99998099
[INFO] Matched <PrimaryExpression>: 99998099
[INFO] Matched <UnaryExpression>: 99998099
[INFO] Matched <MultiplicativeExpression>: __ % 99998099
[INFO] Matched <AdditiveExpression>: __ % 99998099
[INFO] Matched <Expression>: __ % 99998099
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: __ = __ % 99998099;
[INFO] Matched <Statement>: __ = __ % 99998099;
[INFO] Matched <BlockItem>:
__ = __ % 99998099;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Matched <PrimaryExpression>: __
[INFO] Matched <UnaryExpression>: __
[INFO] Matched <MultiplicativeExpression>: __
[INFO] Matched <AdditiveExpression>: __
[INFO] Matched <Expression>: __
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Matched <PrimaryExpression>: __
[INFO] Matched <UnaryExpression>: __
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 123671861
[INFO] Matched <Number>: 123671861
[INFO] Matched <PrimaryExpression>: 123671861
[INFO] Matched <UnaryExpression>: 123671861
[INFO] Matched <MultiplicativeExpression>: __ * 123671861
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 236234
[INFO] Matched <Number>: 236234
[INFO] Matched <PrimaryExpression>: 236234
[INFO] Matched <UnaryExpression>: 236234
[INFO] Matched <MultiplicativeExpression>: 236234
[INFO] Matched <AdditiveExpression>: __ * 123671861 - 236234
[INFO] Matched <Expression>: __ * 123671861 - 236234
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (__ * 123671861 - 236234)
[INFO] Matched <PrimaryExpression>: (__ * 123671861 - 236234)
[INFO] Matched <UnaryExpression>: (__ * 123671861 - 236234)
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Matched <PrimaryExpression>: __
[INFO] Matched <UnaryExpression>: __
[INFO] Matched <MultiplicativeExpression>: __
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 135632
[INFO] Matched <Number>: 135632
[INFO] Matched <PrimaryExpression>: 135632
[INFO] Matched <UnaryExpression>: 135632
[INFO] Matched <MultiplicativeExpression>: 135632
[INFO] Matched <AdditiveExpression>: __ + 135632
[INFO] Matched <Expression>: __ + 135632
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (__ + 135632)
[INFO] Matched <PrimaryExpression>: (__ + 135632)
[INFO] Matched <UnaryExpression>: (__ + 135632)
[INFO] Matched <MultiplicativeExpression>: (__ + 135632)
[INFO] Matched <AdditiveExpression>: (__ + 135632)
[INFO] Matched <Expression>: (__ + 135632)
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: ((__ + 135632))
[INFO] Matched <PrimaryExpression>: ((__ + 135632))
[INFO] Matched <UnaryExpression>: ((__ + 135632))
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 7
[INFO] Matched <Number>: 7
[INFO] Matched <PrimaryExpression>: 7
[INFO] Matched <UnaryExpression>: 7
[INFO] Matched <MultiplicativeExpression>: (__ * 123671861 - 236234) * ((__ + 135632)) / 7
[INFO] Matched <AdditiveExpression>: (__ * 123671861 - 236234) * ((__ + 135632)) / 7
[INFO] Matched <Expression>: (__ * 123671861 - 236234) * ((__ + 135632)) / 7
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: __ = (__ * 123671861 - 236234) * ((__ + 135632)) / 7;
[INFO] Matched <Statement>: __ = (__ * 123671861 - 236234) * ((__ + 135632)) / 7;
[INFO] Matched <BlockItem>:
__ = (__ * 123671861 - 236234) * ((__ + 135632)) / 7;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: I
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: I
[INFO] Matched <LeftValue>: I
[INFO] Matched <PrimaryExpression>: I
[INFO] Matched <UnaryExpression>: I
[INFO] Matched <MultiplicativeExpression>: I
[INFO] Matched <AdditiveExpression>: I
[INFO] Matched <Expression>: I
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: I
[INFO] Matched <LeftValue>: I
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: I
[INFO] Matched <LeftValue>: I
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: I
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: I
[INFO] Matched <LeftValue>: I
[INFO] Matched <PrimaryExpression>: I
[INFO] Matched <UnaryExpression>: I
[INFO] Matched <MultiplicativeExpression>: I
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <UnaryOperatedExpression>: -0
[INFO] Matched <UnaryExpression>: -0
[INFO] Matched <MultiplicativeExpression>: -0
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1234
[INFO] Matched <Number>: 1234
[INFO] Matched <PrimaryExpression>: 1234
[INFO] Matched <UnaryExpression>: 1234
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 888
[INFO] Matched <Number>: 888
[INFO] Matched <PrimaryExpression>: 888
[INFO] Matched <UnaryExpression>: 888
[INFO] Matched <MultiplicativeExpression>: 1234 / 888
[INFO] Matched <AdditiveExpression>: 1234 / 888
[INFO] Matched <Expression>: 1234 / 888
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (1234 / 888)
[INFO] Matched <PrimaryExpression>: (1234 / 888)
[INFO] Matched <UnaryExpression>: (1234 / 888)
[INFO] Matched <MultiplicativeExpression>: (1234 / 888)
[INFO] Matched <AdditiveExpression>: -0 + 2 - (1234 / 888)
[INFO] Matched <Expression>: -0 + 2 - (1234 / 888)
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (-0 + 2 - (1234 / 888))
[INFO] Matched <PrimaryExpression>: (-0 + 2 - (1234 / 888))
[INFO] Matched <UnaryExpression>: (-0 + 2 - (1234 / 888))
[INFO] Matched <MultiplicativeExpression>: (-0 + 2 - (1234 / 888))
[INFO] Matched <AdditiveExpression>: I + (-0 + 2 - (1234 / 888))
[INFO] Matched <Expression>: I + (-0 + 2 - (1234 / 888))
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: I = I + (-0 + 2 - (1234 / 888));
[INFO] Matched <Statement>: I = I + (-0 + 2 - (1234 / 888));
[INFO] Matched <BlockItem>:
I = I + (-0 + 2 - (1234 / 888));
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    __ = __ + 98326464;
    __ = __ * 20373381;
    __ = __ + 23667832;
    __ = __ / 133;
    __ = __ + 1347887899;
    __ = __ % 99998099;
    __ = (__ * 123671861 - 236234) * ((__ + 135632)) / 7;
    I = I + (-0 + 2 - (1234 / 888));
}
[INFO] Matched <Statement>:
{
    __ = __ + 98326464;
    __ = __ * 20373381;
    __ = __ + 23667832;
    __ = __ / 133;
    __ = __ + 1347887899;
    __ = __ % 99998099;
    __ = (__ * 123671861 - 236234) * ((__ + 135632)) / 7;
    I = I + (-0 + 2 - (1234 / 888));
}
[INFO] Matched <ForStatementSelection>:
for (; I < len; ) {
    __ = __ + 98326464;
    __ = __ * 20373381;
    __ = __ + 23667832;
    __ = __ / 133;
    __ = __ + 1347887899;
    __ = __ % 99998099;
    __ = (__ * 123671861 - 236234) * ((__ + 135632)) / 7;
    I = I + (-0 + 2 - (1234 / 888));
}
[INFO] Matched <Statement>:
for (; I < len; ) {
    __ = __ + 98326464;
    __ = __ * 20373381;
    __ = __ + 23667832;
    __ = __ / 133;
    __ = __ + 1347887899;
    __ = __ % 99998099;
    __ = (__ * 123671861 - 236234) * ((__ + 135632)) / 7;
    I = I + (-0 + 2 - (1234 / 888));
}
[INFO] Matched <BlockItem>:
for (; I < len; ) {
    __ = __ + 98326464;
    __ = __ * 20373381;
    __ = __ + 23667832;
    __ = __ / 133;
    __ = __ + 1347887899;
    __ = __ % 99998099;
    __ = (__ * 123671861 - 236234) * ((__ + 135632)) / 7;
    I = I + (-0 + 2 - (1234 / 888));
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __
[INFO] Matched <LeftValue>: __
[INFO] Matched <PrimaryExpression>: __
[INFO] Matched <UnaryExpression>: __
[INFO] Matched <MultiplicativeExpression>: __
[INFO] Matched <AdditiveExpression>: __
[INFO] Matched <Expression>: __
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return __;
[INFO] Matched <Statement>: return __;
[INFO] Matched <BlockItem>:
return __;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int __, I;
    __ = len;
    I = 0;
    for (; I < len; ) {
        __ = __ + 98326464;
        __ = __ * 20373381;
        __ = __ + 23667832;
        __ = __ / 133;
        __ = __ + 1347887899;
        __ = __ % 99998099;
        __ = (__ * 123671861 - 236234) * ((__ + 135632)) / 7;
        I = I + (-0 + 2 - (1234 / 888));
    }
    return __;
}
[INFO] Matched <FuncDefinition>:
int __my_Ha_s__h(int _[], int len) {
    int __, I;
    __ = len;
    I = 0;
    for (; I < len; ) {
        __ = __ + 98326464;
        __ = __ * 20373381;
        __ = __ + 23667832;
        __ = __ / 133;
        __ = __ + 1347887899;
        __ = __ % 99998099;
        __ = (__ * 123671861 - 236234) * ((__ + 135632)) / 7;
        I = I + (-0 + 2 - (1234 / 888));
    }
    return __;
}
[INFO] Consumed Token: void
[INFO] Consumed Token: ___
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: ___
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Failed to match <BasicType>.
[INFO] Failed to match <FuncParam>.
[INFO] Failed to match <FuncParamList>.
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "   !!! ()*+,-./:;<>=@?^_`{}|~[]  called func: ___\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("   !!! ()*+,-./:;<>=@?^_`{}|~[]  called func: ___\n");
[INFO] Matched <Statement>: printf("   !!! ()*+,-./:;<>=@?^_`{}|~[]  called func: ___\n");
[INFO] Matched <BlockItem>:
printf("   !!! ()*+,-./:;<>=@?^_`{}|~[]  called func: ___\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("   !!! ()*+,-./:;<>=@?^_`{}|~[]  called func: ___\n");
}
[INFO] Matched <FuncDefinition>:
void ___() {
    printf("   !!! ()*+,-./:;<>=@?^_`{}|~[]  called func: ___\n");
}
[INFO] Consumed Token: void
[INFO] Consumed Token: ____
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: ____
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: _arg
[INFO] Matched <FuncParamList>: int _arg
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "//called func: ____, _arg = %d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _arg
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _arg
[INFO] Matched <LeftValue>: _arg
[INFO] Matched <PrimaryExpression>: _arg
[INFO] Matched <UnaryExpression>: _arg
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: _arg * 2 * 3 / 6
[INFO] Matched <AdditiveExpression>: _arg * 2 * 3 / 6
[INFO] Matched <Expression>: _arg * 2 * 3 / 6
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("//called func: ____, _arg = %d\n", _arg * 2 * 3 / 6);
[INFO] Matched <Statement>: printf("//called func: ____, _arg = %d\n", _arg * 2 * 3 / 6);
[INFO] Matched <BlockItem>:
printf("//called func: ____, _arg = %d\n", _arg * 2 * 3 / 6);
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("//called func: ____, _arg = %d\n", _arg * 2 * 3 / 6);
}
[INFO] Matched <FuncDefinition>:
void ____(int _arg) {
    printf("//called func: ____, _arg = %d\n", _arg * 2 * 3 / 6);
}
[INFO] Consumed Token: void
[INFO] Consumed Token: __
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: __
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: _arr_Ay
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int _arr_Ay[]
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: useless
[INFO] Matched <FuncParamList>: int _arr_Ay[], int useless
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "called func: __, array[0] = %d\n\n\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _arr_Ay
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _arr_Ay
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: _arr_Ay[0]
[INFO] Matched <PrimaryExpression>: _arr_Ay[0]
[INFO] Matched <UnaryExpression>: _arr_Ay[0]
[INFO] Matched <MultiplicativeExpression>: _arr_Ay[0]
[INFO] Matched <AdditiveExpression>: _arr_Ay[0]
[INFO] Matched <Expression>: _arr_Ay[0]
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("called func: __, array[0] = %d\n\n\n", _arr_Ay[0]);
[INFO] Matched <Statement>: printf("called func: __, array[0] = %d\n\n\n", _arr_Ay[0]);
[INFO] Matched <BlockItem>:
printf("called func: __, array[0] = %d\n\n\n", _arr_Ay[0]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("called func: __, array[0] = %d\n\n\n", _arr_Ay[0]);
    return;
}
[INFO] Matched <FuncDefinition>:
void __(int _arr_Ay[], int useless) {
    printf("called func: __, array[0] = %d\n\n\n", _arr_Ay[0]);
    return;
}
[INFO] Consumed Token: void
[INFO] Consumed Token: _Main
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: _Main
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: _arr_Ay
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int _arr_Ay[][2]
[INFO] Matched <FuncParamList>: int _arr_Ay[][2]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "called func: Main, array[0][0] = %d, array[0][1] = %d\n\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _arr_Ay
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _arr_Ay
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: _arr_Ay[0][0]
[INFO] Matched <PrimaryExpression>: _arr_Ay[0][0]
[INFO] Matched <UnaryExpression>: _arr_Ay[0][0]
[INFO] Matched <MultiplicativeExpression>: _arr_Ay[0][0]
[INFO] Matched <AdditiveExpression>: _arr_Ay[0][0]
[INFO] Matched <Expression>: _arr_Ay[0][0]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _arr_Ay
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _arr_Ay
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: _arr_Ay[0][1]
[INFO] Matched <PrimaryExpression>: _arr_Ay[0][1]
[INFO] Matched <UnaryExpression>: _arr_Ay[0][1]
[INFO] Matched <MultiplicativeExpression>: _arr_Ay[0][1]
[INFO] Matched <AdditiveExpression>: _arr_Ay[0][1]
[INFO] Matched <Expression>: _arr_Ay[0][1]
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("called func: Main, array[0][0] = %d, array[0][1] = %d\n\n", _arr_Ay[0][0], _arr_Ay[0][1]);
[INFO] Matched <Statement>: printf("called func: Main, array[0][0] = %d, array[0][1] = %d\n\n", _arr_Ay[0][0], _arr_Ay[0][1]);
[INFO] Matched <BlockItem>:
printf("called func: Main, array[0][0] = %d, array[0][1] = %d\n\n", _arr_Ay[0][0], _arr_Ay[0][1]);
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("called func: Main, array[0][0] = %d, array[0][1] = %d\n\n", _arr_Ay[0][0], _arr_Ay[0][1]);
}
[INFO] Matched <FuncDefinition>:
void _Main(int _arr_Ay[][2]) {
    printf("called func: Main, array[0][0] = %d, array[0][1] = %d\n\n", _arr_Ay[0][0], _arr_Ay[0][1]);
}
[INFO] Consumed Token: int
[INFO] Consumed Token: _add_fake
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: _add_fake
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: b
[INFO] Matched <FuncParamList>: int a, int b
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: a + b
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 100
[INFO] Matched <Number>: 100
[INFO] Matched <PrimaryExpression>: 100
[INFO] Matched <UnaryExpression>: 100
[INFO] Matched <MultiplicativeExpression>: 100
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10086
[INFO] Matched <Number>: 10086
[INFO] Matched <PrimaryExpression>: 10086
[INFO] Matched <UnaryExpression>: 10086
[INFO] Matched <MultiplicativeExpression>: 10086
[INFO] Matched <AdditiveExpression>: 100 + 10086
[INFO] Matched <RelationalExpression>: a + b >= 100 + 10086
[INFO] Matched <EqualityExpression>: a + b >= 100 + 10086
[INFO] Matched <LogicalAndExpression>: a + b >= 100 + 10086
[INFO] Matched <LogicalOrExpression>: a + b >= 100 + 10086
[INFO] Matched <Condition>: a + b >= 100 + 10086
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 203
[INFO] Matched <Number>: 203
[INFO] Matched <PrimaryExpression>: 203
[INFO] Matched <UnaryExpression>: 203
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: 203 * b
[INFO] Matched <AdditiveExpression>: 203 * b
[INFO] Matched <Expression>: 203 * b
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (203 * b)
[INFO] Matched <PrimaryExpression>: (203 * b)
[INFO] Matched <UnaryExpression>: (203 * b)
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 201
[INFO] Matched <Number>: 201
[INFO] Matched <PrimaryExpression>: 201
[INFO] Matched <UnaryExpression>: 201
[INFO] Matched <MultiplicativeExpression>: (203 * b) / 201
[INFO] Matched <AdditiveExpression>: a + (203 * b) / 201
[INFO] Matched <Expression>: a + (203 * b) / 201
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return a + (203 * b) / 201;
[INFO] Matched <Statement>: return a + (203 * b) / 201;
[INFO] Matched <BlockItem>:
return a + (203 * b) / 201;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return a + (203 * b) / 201;
}
[INFO] Matched <Statement>:
{
    return a + (203 * b) / 201;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10086
[INFO] Matched <Number>: 10086
[INFO] Matched <PrimaryExpression>: 10086
[INFO] Matched <UnaryExpression>: 10086
[INFO] Matched <MultiplicativeExpression>: 10086
[INFO] Matched <AdditiveExpression>: a + b - 10086
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 12345678
[INFO] Matched <Number>: 12345678
[INFO] Matched <PrimaryExpression>: 12345678
[INFO] Matched <UnaryExpression>: 12345678
[INFO] Matched <MultiplicativeExpression>: 12345678
[INFO] Matched <AdditiveExpression>: 12345678
[INFO] Matched <RelationalExpression>: a + b - 10086 < 12345678
[INFO] Matched <EqualityExpression>: a + b - 10086 < 12345678
[INFO] Matched <LogicalAndExpression>: a + b - 10086 < 12345678
[INFO] Matched <LogicalOrExpression>: a + b - 10086 < 12345678
[INFO] Matched <Condition>: a + b - 10086 < 12345678
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1003
[INFO] Matched <Number>: 1003
[INFO] Matched <PrimaryExpression>: 1003
[INFO] Matched <UnaryExpression>: 1003
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1009
[INFO] Matched <Number>: 1009
[INFO] Matched <PrimaryExpression>: 1009
[INFO] Matched <UnaryExpression>: 1009
[INFO] Matched <MultiplicativeExpression>: 1003 * a / 1009
[INFO] Matched <AdditiveExpression>: 1003 * a / 1009
[INFO] Matched <Expression>: 1003 * a / 1009
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (1003 * a / 1009)
[INFO] Matched <PrimaryExpression>: (1003 * a / 1009)
[INFO] Matched <UnaryExpression>: (1003 * a / 1009)
[INFO] Matched <MultiplicativeExpression>: (1003 * a / 1009)
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2022
[INFO] Matched <Number>: 2022
[INFO] Matched <PrimaryExpression>: 2022
[INFO] Matched <UnaryExpression>: 2022
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2019
[INFO] Matched <Number>: 2019
[INFO] Matched <PrimaryExpression>: 2019
[INFO] Matched <UnaryExpression>: 2019
[INFO] Matched <MultiplicativeExpression>: 2022 * b / 2019
[INFO] Matched <AdditiveExpression>: (1003 * a / 1009) + 2022 * b / 2019
[INFO] Matched <Expression>: (1003 * a / 1009) + 2022 * b / 2019
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return (1003 * a / 1009) + 2022 * b / 2019;
[INFO] Matched <Statement>: return (1003 * a / 1009) + 2022 * b / 2019;
[INFO] Matched <BlockItem>:
return (1003 * a / 1009) + 2022 * b / 2019;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return (1003 * a / 1009) + 2022 * b / 2019;
}
[INFO] Matched <Statement>:
{
    return (1003 * a / 1009) + 2022 * b / 2019;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 233
[INFO] Matched <Number>: 233
[INFO] Matched <PrimaryExpression>: 233
[INFO] Matched <UnaryExpression>: 233
[INFO] Matched <MultiplicativeExpression>: 233
[INFO] Matched <AdditiveExpression>: a + b - 233
[INFO] Matched <Expression>: a + b - 233
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return a + b - 233;
[INFO] Matched <Statement>: return a + b - 233;
[INFO] Matched <BlockItem>:
return a + b - 233;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return a + b - 233;
}
[INFO] Matched <Statement>:
{
    return a + b - 233;
}
[INFO] Matched <IfStatement>:
if (a + b - 10086 < 12345678) {
    return (1003 * a / 1009) + 2022 * b / 2019;
} else {
    return a + b - 233;
}
[INFO] Matched <Statement>:
if (a + b - 10086 < 12345678) {
    return (1003 * a / 1009) + 2022 * b / 2019;
} else {
    return a + b - 233;
}
[INFO] Matched <IfStatement>:
if (a + b >= 100 + 10086) {
    return a + (203 * b) / 201;
} else if (a + b - 10086 < 12345678) {
    return (1003 * a / 1009) + 2022 * b / 2019;
} else {
    return a + b - 233;
}
[INFO] Matched <Statement>:
if (a + b >= 100 + 10086) {
    return a + (203 * b) / 201;
} else if (a + b - 10086 < 12345678) {
    return (1003 * a / 1009) + 2022 * b / 2019;
} else {
    return a + b - 233;
}
[INFO] Matched <BlockItem>:
if (a + b >= 100 + 10086) {
    return a + (203 * b) / 201;
} else if (a + b - 10086 < 12345678) {
    return (1003 * a / 1009) + 2022 * b / 2019;
} else {
    return a + b - 233;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10086
[INFO] Matched <Number>: 10086
[INFO] Matched <PrimaryExpression>: 10086
[INFO] Matched <UnaryExpression>: 10086
[INFO] Matched <UnaryOperatedExpression>: -10086
[INFO] Matched <UnaryExpression>: -10086
[INFO] Matched <MultiplicativeExpression>: -10086
[INFO] Matched <AdditiveExpression>: -10086
[INFO] Matched <Expression>: -10086
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return -10086;
[INFO] Matched <Statement>: return -10086;
[INFO] Matched <BlockItem>:
return -10086;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (a + b >= 100 + 10086) {
        return a + (203 * b) / 201;
    } else if (a + b - 10086 < 12345678) {
        return (1003 * a / 1009) + 2022 * b / 2019;
    } else {
        return a + b - 233;
    }
    return -10086;
}
[INFO] Matched <FuncDefinition>:
int _add_fake(int a, int b) {
    if (a + b >= 100 + 10086) {
        return a + (203 * b) / 201;
    } else if (a + b - 10086 < 12345678) {
        return (1003 * a / 1009) + 2022 * b / 2019;
    } else {
        return a + b - 233;
    }
    return -10086;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: _add
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: _add
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: b
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: c
[INFO] Matched <FuncParamList>: int a, int b, int c
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Matched <LeftValue>: c
[INFO] Matched <PrimaryExpression>: c
[INFO] Matched <UnaryExpression>: c
[INFO] Matched <MultiplicativeExpression>: c
[INFO] Matched <AdditiveExpression>: a + b + c
[INFO] Matched <Expression>: a + b + c
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return a + b + c;
[INFO] Matched <Statement>: return a + b + c;
[INFO] Matched <BlockItem>:
return a + b + c;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return a + b + c;
}
[INFO] Matched <FuncDefinition>:
int _add(int a, int b, int c) {
    return a + b + c;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: _get_id
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: _get_id
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Failed to match <BasicType>.
[INFO] Failed to match <FuncParam>.
[INFO] Failed to match <FuncParamList>.
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Matched <VarDefinition>: _2_wj5qhidw_
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int _2_wj5qhidw_;
[INFO] Matched <Declaration>: int _2_wj5qhidw_;
[INFO] Matched <BlockItem>:
int _2_wj5qhidw_;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Matched <LeftValue>: _2_wj5qhidw_
[INFO] Matched <PrimaryExpression>: _2_wj5qhidw_
[INFO] Matched <UnaryExpression>: _2_wj5qhidw_
[INFO] Matched <MultiplicativeExpression>: _2_wj5qhidw_
[INFO] Matched <AdditiveExpression>: _2_wj5qhidw_
[INFO] Matched <Expression>: _2_wj5qhidw_
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Matched <LeftValue>: _2_wj5qhidw_
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Matched <LeftValue>: _2_wj5qhidw_
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 76
[INFO] Matched <Number>: 76
[INFO] Matched <PrimaryExpression>: 76
[INFO] Matched <UnaryExpression>: 76
[INFO] Matched <MultiplicativeExpression>: 76
[INFO] Matched <AdditiveExpression>: 76
[INFO] Matched <Expression>: 76
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: _2_wj5qhidw_ = 76;
[INFO] Matched <Statement>: _2_wj5qhidw_ = 76;
[INFO] Matched <BlockItem>:
_2_wj5qhidw_ = 76;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 123
[INFO] Matched <Number>: 123
[INFO] Matched <PrimaryExpression>: 123
[INFO] Matched <UnaryExpression>: 123
[INFO] Matched <MultiplicativeExpression>: 123
[INFO] Matched <AdditiveExpression>: 123
[INFO] Matched <Expression>: 123
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: 123;
[INFO] Matched <Statement>: 123;
[INFO] Matched <BlockItem>:
123;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Matched <LeftValue>: _2_wj5qhidw_
[INFO] Matched <PrimaryExpression>: _2_wj5qhidw_
[INFO] Matched <UnaryExpression>: _2_wj5qhidw_
[INFO] Matched <MultiplicativeExpression>: _2_wj5qhidw_
[INFO] Matched <AdditiveExpression>: _2_wj5qhidw_
[INFO] Matched <Expression>: _2_wj5qhidw_
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", _2_wj5qhidw_);
[INFO] Matched <Statement>: printf("%d\n", _2_wj5qhidw_);
[INFO] Matched <BlockItem>:
printf("%d\n", _2_wj5qhidw_);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Matched <LeftValue>: _2_wj5qhidw_
[INFO] Matched <PrimaryExpression>: _2_wj5qhidw_
[INFO] Matched <UnaryExpression>: _2_wj5qhidw_
[INFO] Matched <MultiplicativeExpression>: _2_wj5qhidw_
[INFO] Matched <AdditiveExpression>: _2_wj5qhidw_
[INFO] Matched <Expression>: _2_wj5qhidw_
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Matched <LeftValue>: _2_wj5qhidw_
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Matched <LeftValue>: _2_wj5qhidw_
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10086
[INFO] Matched <Number>: 10086
[INFO] Matched <PrimaryExpression>: 10086
[INFO] Matched <UnaryExpression>: 10086
[INFO] Matched <MultiplicativeExpression>: 10086
[INFO] Matched <AdditiveExpression>: 10086
[INFO] Matched <Expression>: 10086
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: _2_wj5qhidw_ = 10086;
[INFO] Matched <Statement>: _2_wj5qhidw_ = 10086;
[INFO] Matched <BlockItem>:
_2_wj5qhidw_ = 10086;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Matched <LeftValue>: _2_wj5qhidw_
[INFO] Matched <PrimaryExpression>: _2_wj5qhidw_
[INFO] Matched <UnaryExpression>: _2_wj5qhidw_
[INFO] Matched <MultiplicativeExpression>: _2_wj5qhidw_
[INFO] Matched <AdditiveExpression>: _2_wj5qhidw_
[INFO] Matched <Expression>: _2_wj5qhidw_
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", _2_wj5qhidw_);
[INFO] Matched <Statement>: printf("%d\n", _2_wj5qhidw_);
[INFO] Matched <BlockItem>:
printf("%d\n", _2_wj5qhidw_);
[INFO] Consumed Token: int
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <UnaryOperatedExpression>: +10
[INFO] Matched <UnaryExpression>: +10
[INFO] Matched <UnaryOperatedExpression>: -+10
[INFO] Matched <UnaryExpression>: -+10
[INFO] Matched <UnaryOperatedExpression>: +-+10
[INFO] Matched <UnaryExpression>: +-+10
[INFO] Matched <MultiplicativeExpression>: +-+10
[INFO] Matched <AdditiveExpression>: +-+10
[INFO] Matched <Expression>: +-+10
[INFO] Matched <ScalarVarInitValue>: +-+10
[INFO] Matched <VarInitValue>: +-+10
[INFO] Matched <VarDefinition>: _2_wj5qhidw_ = +-+10
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int _2_wj5qhidw_ = +-+10;
[INFO] Matched <Declaration>: int _2_wj5qhidw_ = +-+10;
[INFO] Matched <BlockItem>:
int _2_wj5qhidw_ = +-+10;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _2_wj5qhidw_
[INFO] Matched <LeftValue>: _2_wj5qhidw_
[INFO] Matched <PrimaryExpression>: _2_wj5qhidw_
[INFO] Matched <UnaryExpression>: _2_wj5qhidw_
[INFO] Matched <MultiplicativeExpression>: _2_wj5qhidw_
[INFO] Matched <AdditiveExpression>: _2_wj5qhidw_
[INFO] Matched <Expression>: _2_wj5qhidw_
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", _2_wj5qhidw_);
[INFO] Matched <Statement>: printf("%d\n", _2_wj5qhidw_);
[INFO] Matched <BlockItem>:
printf("%d\n", _2_wj5qhidw_);
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    ;
    123;
    printf("%d\n", _2_wj5qhidw_);
    _2_wj5qhidw_ = 10086;
    printf("%d\n", _2_wj5qhidw_);
    int _2_wj5qhidw_ = +-+10;
    printf("%d\n", _2_wj5qhidw_);
}
[INFO] Matched <Statement>:
{
    ;
    123;
    printf("%d\n", _2_wj5qhidw_);
    _2_wj5qhidw_ = 10086;
    printf("%d\n", _2_wj5qhidw_);
    int _2_wj5qhidw_ = +-+10;
    printf("%d\n", _2_wj5qhidw_);
}
[INFO] Matched <BlockItem>:
{
    ;
    123;
    printf("%d\n", _2_wj5qhidw_);
    _2_wj5qhidw_ = 10086;
    printf("%d\n", _2_wj5qhidw_);
    int _2_wj5qhidw_ = +-+10;
    printf("%d\n", _2_wj5qhidw_);
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 20373381
[INFO] Matched <Number>: 20373381
[INFO] Matched <PrimaryExpression>: 20373381
[INFO] Matched <UnaryExpression>: 20373381
[INFO] Matched <MultiplicativeExpression>: 20373381
[INFO] Matched <AdditiveExpression>: 20373381
[INFO] Matched <Expression>: 20373381
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 20373381;
[INFO] Matched <Statement>: return 20373381;
[INFO] Matched <BlockItem>:
return 20373381;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int _2_wj5qhidw_;
    _2_wj5qhidw_ = 76;
    {
        ;
        123;
        printf("%d\n", _2_wj5qhidw_);
        _2_wj5qhidw_ = 10086;
        printf("%d\n", _2_wj5qhidw_);
        int _2_wj5qhidw_ = +-+10;
        printf("%d\n", _2_wj5qhidw_);
    }
    return 20373381;
}
[INFO] Matched <FuncDefinition>:
int _get_id() {
    int _2_wj5qhidw_;
    _2_wj5qhidw_ = 76;
    {
        ;
        123;
        printf("%d\n", _2_wj5qhidw_);
        _2_wj5qhidw_ = 10086;
        printf("%d\n", _2_wj5qhidw_);
        int _2_wj5qhidw_ = +-+10;
        printf("%d\n", _2_wj5qhidw_);
    }
    return 20373381;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: _M__a_G_I___c
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: _M__a_G_I___c
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: num
[INFO] Matched <FuncParamList>: int num
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: num
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: num
[INFO] Matched <LeftValue>: num
[INFO] Matched <PrimaryExpression>: num
[INFO] Matched <UnaryExpression>: num
[INFO] Matched <MultiplicativeExpression>: num
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 763835168
[INFO] Matched <Number>: 763835168
[INFO] Matched <PrimaryExpression>: 763835168
[INFO] Matched <UnaryExpression>: 763835168
[INFO] Matched <UnaryOperatedExpression>: -763835168
[INFO] Matched <UnaryExpression>: -763835168
[INFO] Matched <MultiplicativeExpression>: -763835168
[INFO] Matched <AdditiveExpression>: num + -763835168
[INFO] Matched <Expression>: num + -763835168
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (num + -763835168)
[INFO] Matched <PrimaryExpression>: (num + -763835168)
[INFO] Matched <UnaryExpression>: (num + -763835168)
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1996325548
[INFO] Matched <Number>: 1996325548
[INFO] Matched <PrimaryExpression>: 1996325548
[INFO] Matched <UnaryExpression>: 1996325548
[INFO] Matched <MultiplicativeExpression>: (num + -763835168) % 1996325548
[INFO] Matched <AdditiveExpression>: (num + -763835168) % 1996325548
[INFO] Matched <Expression>: (num + -763835168) % 1996325548
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: ((num + -763835168) % 1996325548)
[INFO] Matched <PrimaryExpression>: ((num + -763835168) % 1996325548)
[INFO] Matched <UnaryExpression>: ((num + -763835168) % 1996325548)
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1881457024
[INFO] Matched <Number>: 1881457024
[INFO] Matched <PrimaryExpression>: 1881457024
[INFO] Matched <UnaryExpression>: 1881457024
[INFO] Matched <MultiplicativeExpression>: ((num + -763835168) % 1996325548) * 1881457024
[INFO] Matched <AdditiveExpression>: ((num + -763835168) % 1996325548) * 1881457024
[INFO] Matched <Expression>: ((num + -763835168) % 1996325548) * 1881457024
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (((num + -763835168) % 1996325548) * 1881457024)
[INFO] Matched <PrimaryExpression>: (((num + -763835168) % 1996325548) * 1881457024)
[INFO] Matched <UnaryExpression>: (((num + -763835168) % 1996325548) * 1881457024)
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 11
[INFO] Matched <Number>: 11
[INFO] Matched <PrimaryExpression>: 11
[INFO] Matched <UnaryExpression>: 11
[INFO] Matched <MultiplicativeExpression>: (((num + -763835168) % 1996325548) * 1881457024) / 11
[INFO] Matched <AdditiveExpression>: (((num + -763835168) % 1996325548) * 1881457024) / 11
[INFO] Matched <Expression>: (((num + -763835168) % 1996325548) * 1881457024) / 11
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: ((((num + -763835168) % 1996325548) * 1881457024) / 11)
[INFO] Matched <PrimaryExpression>: ((((num + -763835168) % 1996325548) * 1881457024) / 11)
[INFO] Matched <UnaryExpression>: ((((num + -763835168) % 1996325548) * 1881457024) / 11)
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 540488577
[INFO] Matched <Number>: 540488577
[INFO] Matched <PrimaryExpression>: 540488577
[INFO] Matched <UnaryExpression>: 540488577
[INFO] Matched <MultiplicativeExpression>: ((((num + -763835168) % 1996325548) * 1881457024) / 11) * 540488577
[INFO] Matched <AdditiveExpression>: ((((num + -763835168) % 1996325548) * 1881457024) / 11) * 540488577
[INFO] Matched <Expression>: ((((num + -763835168) % 1996325548) * 1881457024) / 11) * 540488577
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return ((((num + -763835168) % 1996325548) * 1881457024) / 11) * 540488577;
[INFO] Matched <Statement>: return ((((num + -763835168) % 1996325548) * 1881457024) / 11) * 540488577;
[INFO] Matched <BlockItem>:
return ((((num + -763835168) % 1996325548) * 1881457024) / 11) * 540488577;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return ((((num + -763835168) % 1996325548) * 1881457024) / 11) * 540488577;
}
[INFO] Matched <FuncDefinition>:
int _M__a_G_I___c(int num) {
    return ((((num + -763835168) % 1996325548) * 1881457024) / 11) * 540488577;
}
[INFO] Consumed Token: int
[INFO] Lexer rolling back...
[INFO] Matching <MainFuncDefinition>.
[INFO] Consumed Token: int
[INFO] Consumed Token: main
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <BlockItem>:
{}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    {}
}
[INFO] Matched <Statement>:
{
    {}
}
[INFO] Matched <BlockItem>:
{
    {}
}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    {
        {}
    }
}
[INFO] Matched <Statement>:
{
    {
        {}
    }
}
[INFO] Matched <BlockItem>:
{
    {
        {}
    }
}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    {
        {
            {}
        }
    }
}
[INFO] Matched <Statement>:
{
    {
        {
            {}
        }
    }
}
[INFO] Matched <BlockItem>:
{
    {
        {
            {}
        }
    }
}
[INFO] Consumed Token: int
[INFO] Consumed Token: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Matched <VarDefinition>: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: _for___
[INFO] Matched <VarDefinition>: _for___
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: _Int
[INFO] Matched <VarDefinition>: _Int
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: _2233
[INFO] Matched <VarDefinition>: _2233
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: a10086__
[INFO] Matched <VarDefinition>: a10086__
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int ___2_0_3_7_3_3_8_1___X___J___h_____, _for___, _Int, _2233, a10086__;
[INFO] Matched <Declaration>: int ___2_0_3_7_3_3_8_1___X___J___h_____, _for___, _Int, _2233, a10086__;
[INFO] Matched <BlockItem>:
int ___2_0_3_7_3_3_8_1___X___J___h_____, _for___, _Int, _2233, a10086__;
[INFO] Matching <BlockItem>.
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: __array
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: -1
[INFO] Matched <UnaryExpression>: -1
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: -1 * 2
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 3 * 4 / 6
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 13
[INFO] Matched <Number>: 13
[INFO] Matched <PrimaryExpression>: 13
[INFO] Matched <UnaryExpression>: 13
[INFO] Matched <MultiplicativeExpression>: 13
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 11
[INFO] Matched <Number>: 11
[INFO] Matched <PrimaryExpression>: 11
[INFO] Matched <UnaryExpression>: 11
[INFO] Matched <MultiplicativeExpression>: 11
[INFO] Matched <AdditiveExpression>: -1 * 2 + 3 * 4 / 6 + 13 - 11
[INFO] Matched <ConstExpression>: -1 * 2 + 3 * 4 / 6 + 13 - 11
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <ConstExpression>: 4
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Matched <ScalarConstInitValue>: 3
[INFO] Matched <ConstInitValue>: 3
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <ConstExpression>: 4
[INFO] Matched <ScalarConstInitValue>: 4
[INFO] Matched <ConstInitValue>: 4
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {1, 2, 3, 4}
[INFO] Matched <ConstInitValue>: {1, 2, 3, 4}
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <ConstExpression>: 5
[INFO] Matched <ScalarConstInitValue>: 5
[INFO] Matched <ConstInitValue>: 5
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: 6
[INFO] Matched <ConstExpression>: 6
[INFO] Matched <ScalarConstInitValue>: 6
[INFO] Matched <ConstInitValue>: 6
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 7
[INFO] Matched <Number>: 7
[INFO] Matched <PrimaryExpression>: 7
[INFO] Matched <UnaryExpression>: 7
[INFO] Matched <MultiplicativeExpression>: 7
[INFO] Matched <AdditiveExpression>: 7
[INFO] Matched <ConstExpression>: 7
[INFO] Matched <ScalarConstInitValue>: 7
[INFO] Matched <ConstInitValue>: 7
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 8
[INFO] Matched <Number>: 8
[INFO] Matched <PrimaryExpression>: 8
[INFO] Matched <UnaryExpression>: 8
[INFO] Matched <MultiplicativeExpression>: 8
[INFO] Matched <AdditiveExpression>: 8
[INFO] Matched <ConstExpression>: 8
[INFO] Matched <ScalarConstInitValue>: 8
[INFO] Matched <ConstInitValue>: 8
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {5, 6, 7, 8}
[INFO] Matched <ConstInitValue>: {5, 6, 7, 8}
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {{1, 2, 3, 4}, {5, 6, 7, 8}}
[INFO] Matched <ConstInitValue>: {{1, 2, 3, 4}, {5, 6, 7, 8}}
[INFO] Matched <ConstDefinition>.__array[-1 * 2 + 3 * 4 / 6 + 13 - 11][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int __array[-1 * 2 + 3 * 4 / 6 + 13 - 11][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}};
[INFO] Matched <Declaration>: const int __array[-1 * 2 + 3 * 4 / 6 + 13 - 11][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}};
[INFO] Matched <BlockItem>:
const int __array[-1 * 2 + 3 * 4 / 6 + 13 - 11][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}};
[INFO] Matching <BlockItem>.
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: aaaaa
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <ConstExpression>: 10
[INFO] Matched <ScalarConstInitValue>: 10
[INFO] Matched <ConstInitValue>: 10
[INFO] Matched <ConstDefinition>.aaaaa = 10
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: bbbbb
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 20
[INFO] Matched <Number>: 20
[INFO] Matched <PrimaryExpression>: 20
[INFO] Matched <UnaryExpression>: 20
[INFO] Matched <MultiplicativeExpression>: 20
[INFO] Matched <AdditiveExpression>: 20
[INFO] Matched <ConstExpression>: 20
[INFO] Matched <ScalarConstInitValue>: 20
[INFO] Matched <ConstInitValue>: 20
[INFO] Matched <ConstDefinition>.bbbbb = 20
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int aaaaa = 10, bbbbb = 20;
[INFO] Matched <Declaration>: const int aaaaa = 10, bbbbb = 20;
[INFO] Matched <BlockItem>:
const int aaaaa = 10, bbbbb = 20;
[INFO] Consumed Token: int
[INFO] Consumed Token: _0
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: _0
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: _0
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: _0
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <Expression>: 10
[INFO] Matched <ScalarVarInitValue>: 10
[INFO] Matched <VarInitValue>: 10
[INFO] Matched <VarDefinition>: _0 = 10
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int _0 = 10;
[INFO] Matched <Declaration>: int _0 = 10;
[INFO] Matched <BlockItem>:
int _0 = 10;
[INFO] Consumed Token: int
[INFO] Consumed Token: _main
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: _main
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: _main
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: _main
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: _main = 0
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: Main
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Matched <VarDefinition>: Main = 1
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int _main = 0, Main = 1;
[INFO] Matched <Declaration>: int _main = 0, Main = 1;
[INFO] Matched <BlockItem>:
int _main = 0, Main = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Matched <LeftValue>: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Matched <PrimaryExpression>: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Matched <UnaryExpression>: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Matched <MultiplicativeExpression>: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Matched <AdditiveExpression>: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Matched <Expression>: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Matched <LeftValue>: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: ___2_0_3_7_3_3_8_1___X___J___h_____ = getint();
[INFO] Matched <Statement>: ___2_0_3_7_3_3_8_1___X___J___h_____ = getint();
[INFO] Matched <BlockItem>:
___2_0_3_7_3_3_8_1___X___J___h_____ = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _for___
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _for___
[INFO] Matched <LeftValue>: _for___
[INFO] Matched <PrimaryExpression>: _for___
[INFO] Matched <UnaryExpression>: _for___
[INFO] Matched <MultiplicativeExpression>: _for___
[INFO] Matched <AdditiveExpression>: _for___
[INFO] Matched <Expression>: _for___
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _for___
[INFO] Matched <LeftValue>: _for___
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: _for___ = getint();
[INFO] Matched <Statement>: _for___ = getint();
[INFO] Matched <BlockItem>:
_for___ = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _Int
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _Int
[INFO] Matched <LeftValue>: _Int
[INFO] Matched <PrimaryExpression>: _Int
[INFO] Matched <UnaryExpression>: _Int
[INFO] Matched <MultiplicativeExpression>: _Int
[INFO] Matched <AdditiveExpression>: _Int
[INFO] Matched <Expression>: _Int
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _Int
[INFO] Matched <LeftValue>: _Int
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: _Int = getint();
[INFO] Matched <Statement>: _Int = getint();
[INFO] Matched <BlockItem>:
_Int = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _2233
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _2233
[INFO] Matched <LeftValue>: _2233
[INFO] Matched <PrimaryExpression>: _2233
[INFO] Matched <UnaryExpression>: _2233
[INFO] Matched <MultiplicativeExpression>: _2233
[INFO] Matched <AdditiveExpression>: _2233
[INFO] Matched <Expression>: _2233
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _2233
[INFO] Matched <LeftValue>: _2233
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: _2233 = getint();
[INFO] Matched <Statement>: _2233 = getint();
[INFO] Matched <BlockItem>:
_2233 = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a10086__
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a10086__
[INFO] Matched <LeftValue>: a10086__
[INFO] Matched <PrimaryExpression>: a10086__
[INFO] Matched <UnaryExpression>: a10086__
[INFO] Matched <MultiplicativeExpression>: a10086__
[INFO] Matched <AdditiveExpression>: a10086__
[INFO] Matched <Expression>: a10086__
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a10086__
[INFO] Matched <LeftValue>: a10086__
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: a10086__ = getint();
[INFO] Matched <Statement>: a10086__ = getint();
[INFO] Matched <BlockItem>:
a10086__ = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Matched <LeftValue>: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Matched <PrimaryExpression>: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Matched <UnaryExpression>: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Matched <MultiplicativeExpression>: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Matched <AdditiveExpression>: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Matched <RelationalExpression>: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 20373381
[INFO] Matched <Number>: 20373381
[INFO] Matched <PrimaryExpression>: 20373381
[INFO] Matched <UnaryExpression>: 20373381
[INFO] Matched <MultiplicativeExpression>: 20373381
[INFO] Matched <AdditiveExpression>: 20373381
[INFO] Matched <RelationalExpression>: 20373381
[INFO] Matched <EqualityExpression>: ___2_0_3_7_3_3_8_1___X___J___h_____ == 20373381
[INFO] Matched <LogicalAndExpression>: ___2_0_3_7_3_3_8_1___X___J___h_____ == 20373381
[INFO] Matched <LogicalOrExpression>: ___2_0_3_7_3_3_8_1___X___J___h_____ == 20373381
[INFO] Matched <Condition>: ___2_0_3_7_3_3_8_1___X___J___h_____ == 20373381
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: Main
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: Main
[INFO] Matched <LeftValue>: Main
[INFO] Matched <PrimaryExpression>: Main
[INFO] Matched <UnaryExpression>: Main
[INFO] Matched <MultiplicativeExpression>: Main
[INFO] Matched <AdditiveExpression>: Main
[INFO] Matched <Expression>: Main
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: Main
[INFO] Matched <LeftValue>: Main
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: Main
[INFO] Matched <LeftValue>: Main
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: Main
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: Main
[INFO] Matched <LeftValue>: Main
[INFO] Matched <PrimaryExpression>: Main
[INFO] Matched <UnaryExpression>: Main
[INFO] Matched <MultiplicativeExpression>: Main
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: Main + 1
[INFO] Matched <Expression>: Main + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: Main = Main + 1;
[INFO] Matched <Statement>: Main = Main + 1;
[INFO] Matched <BlockItem>:
Main = Main + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _main
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _main
[INFO] Matched <LeftValue>: _main
[INFO] Matched <PrimaryExpression>: _main
[INFO] Matched <UnaryExpression>: _main
[INFO] Matched <MultiplicativeExpression>: _main
[INFO] Matched <AdditiveExpression>: _main
[INFO] Matched <Expression>: _main
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _main
[INFO] Matched <LeftValue>: _main
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _main
[INFO] Matched <LeftValue>: _main
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _main
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _main
[INFO] Matched <LeftValue>: _main
[INFO] Matched <PrimaryExpression>: _main
[INFO] Matched <UnaryExpression>: _main
[INFO] Matched <MultiplicativeExpression>: _main
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1332
[INFO] Matched <Number>: 1332
[INFO] Matched <PrimaryExpression>: 1332
[INFO] Matched <UnaryExpression>: 1332
[INFO] Matched <MultiplicativeExpression>: 1332
[INFO] Matched <AdditiveExpression>: _main + 1332
[INFO] Matched <Expression>: _main + 1332
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: _main = _main + 1332;
[INFO] Matched <Statement>: _main = _main + 1332;
[INFO] Matched <BlockItem>:
_main = _main + 1332;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    Main = Main + 1;
    ;
    ;
    _main = _main + 1332;
}
[INFO] Matched <Statement>:
{
    Main = Main + 1;
    ;
    ;
    _main = _main + 1332;
}
[INFO] Matched <IfStatement>:
if (___2_0_3_7_3_3_8_1___X___J___h_____ == 20373381) {
    Main = Main + 1;
    ;
    ;
    _main = _main + 1332;
}  
[INFO] Matched <Statement>:
if (___2_0_3_7_3_3_8_1___X___J___h_____ == 20373381) {
    Main = Main + 1;
    ;
    ;
    _main = _main + 1332;
}  
[INFO] Matched <BlockItem>:
if (___2_0_3_7_3_3_8_1___X___J___h_____ == 20373381) {
    Main = Main + 1;
    ;
    ;
    _main = _main + 1332;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _for___
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _for___
[INFO] Matched <LeftValue>: _for___
[INFO] Matched <PrimaryExpression>: _for___
[INFO] Matched <UnaryExpression>: _for___
[INFO] Matched <MultiplicativeExpression>: _for___
[INFO] Matched <AdditiveExpression>: _for___
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 200
[INFO] Matched <Number>: 200
[INFO] Matched <PrimaryExpression>: 200
[INFO] Matched <UnaryExpression>: 200
[INFO] Matched <MultiplicativeExpression>: 200
[INFO] Matched <AdditiveExpression>: 200
[INFO] Matched <RelationalExpression>: _for___ > 200
[INFO] Matched <EqualityExpression>: _for___ > 200
[INFO] Matched <LogicalAndExpression>: _for___ > 200
[INFO] Matched <LogicalOrExpression>: _for___ > 200
[INFO] Matched <Condition>: _for___ > 200
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: Main
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: Main
[INFO] Matched <LeftValue>: Main
[INFO] Matched <PrimaryExpression>: Main
[INFO] Matched <UnaryExpression>: Main
[INFO] Matched <MultiplicativeExpression>: Main
[INFO] Matched <AdditiveExpression>: Main
[INFO] Matched <Expression>: Main
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: Main
[INFO] Matched <LeftValue>: Main
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: Main
[INFO] Matched <LeftValue>: Main
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: Main
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: Main
[INFO] Matched <LeftValue>: Main
[INFO] Matched <PrimaryExpression>: Main
[INFO] Matched <UnaryExpression>: Main
[INFO] Matched <MultiplicativeExpression>: Main
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: Main + 1
[INFO] Matched <Expression>: Main + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: Main = Main + 1;
[INFO] Matched <Statement>: Main = Main + 1;
[INFO] Matched <IfStatement>:
if (_for___ > 200) Main = Main + 1;  
[INFO] Matched <Statement>:
if (_for___ > 200) Main = Main + 1;  
[INFO] Matched <BlockItem>:
if (_for___ > 200) Main = Main + 1;  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _Int
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _Int
[INFO] Matched <LeftValue>: _Int
[INFO] Matched <PrimaryExpression>: _Int
[INFO] Matched <UnaryExpression>: _Int
[INFO] Matched <MultiplicativeExpression>: _Int
[INFO] Matched <AdditiveExpression>: _Int
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 111
[INFO] Matched <Number>: 111
[INFO] Matched <PrimaryExpression>: 111
[INFO] Matched <UnaryExpression>: 111
[INFO] Matched <MultiplicativeExpression>: 111
[INFO] Matched <AdditiveExpression>: 111
[INFO] Matched <RelationalExpression>: _Int >= 111
[INFO] Matched <EqualityExpression>: _Int >= 111
[INFO] Matched <LogicalAndExpression>: _Int >= 111
[INFO] Matched <LogicalOrExpression>: _Int >= 111
[INFO] Matched <Condition>: _Int >= 111
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _2233
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _2233
[INFO] Matched <LeftValue>: _2233
[INFO] Matched <PrimaryExpression>: _2233
[INFO] Matched <UnaryExpression>: _2233
[INFO] Matched <MultiplicativeExpression>: _2233
[INFO] Matched <AdditiveExpression>: _2233
[INFO] Matched <RelationalExpression>: _2233
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2234
[INFO] Matched <Number>: 2234
[INFO] Matched <PrimaryExpression>: 2234
[INFO] Matched <UnaryExpression>: 2234
[INFO] Matched <MultiplicativeExpression>: 2234
[INFO] Matched <AdditiveExpression>: 2234
[INFO] Matched <RelationalExpression>: 2234
[INFO] Matched <EqualityExpression>: _2233 != 2234
[INFO] Matched <LogicalAndExpression>: _2233 != 2234
[INFO] Matched <LogicalOrExpression>: _2233 != 2234
[INFO] Matched <Condition>: _2233 != 2234
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: Main
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: Main
[INFO] Matched <LeftValue>: Main
[INFO] Matched <PrimaryExpression>: Main
[INFO] Matched <UnaryExpression>: Main
[INFO] Matched <MultiplicativeExpression>: Main
[INFO] Matched <AdditiveExpression>: Main
[INFO] Matched <Expression>: Main
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: Main
[INFO] Matched <LeftValue>: Main
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: Main
[INFO] Matched <LeftValue>: Main
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: Main
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: Main
[INFO] Matched <LeftValue>: Main
[INFO] Matched <PrimaryExpression>: Main
[INFO] Matched <UnaryExpression>: Main
[INFO] Matched <MultiplicativeExpression>: Main
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: Main + 1
[INFO] Matched <Expression>: Main + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: Main = Main + 1;
[INFO] Matched <Statement>: Main = Main + 1;
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: Main
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: Main
[INFO] Matched <LeftValue>: Main
[INFO] Matched <PrimaryExpression>: Main
[INFO] Matched <UnaryExpression>: Main
[INFO] Matched <MultiplicativeExpression>: Main
[INFO] Matched <AdditiveExpression>: Main
[INFO] Matched <Expression>: Main
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: Main
[INFO] Matched <LeftValue>: Main
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: Main
[INFO] Matched <LeftValue>: Main
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: Main
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: Main
[INFO] Matched <LeftValue>: Main
[INFO] Matched <PrimaryExpression>: Main
[INFO] Matched <UnaryExpression>: Main
[INFO] Matched <MultiplicativeExpression>: Main
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2729
[INFO] Matched <Number>: 2729
[INFO] Matched <PrimaryExpression>: 2729
[INFO] Matched <UnaryExpression>: 2729
[INFO] Matched <MultiplicativeExpression>: 2729
[INFO] Matched <AdditiveExpression>: Main + 2729
[INFO] Matched <Expression>: Main + 2729
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: Main = Main + 2729;
[INFO] Matched <Statement>: Main = Main + 2729;
[INFO] Matched <IfStatement>:
if (_2233 != 2234) Main = Main + 1; else Main = Main + 2729;
[INFO] Matched <Statement>:
if (_2233 != 2234) Main = Main + 1; else Main = Main + 2729;
[INFO] Matched <IfStatement>:
if (_Int >= 111) if (_2233 != 2234) Main = Main + 1; else Main = Main + 2729;  
[INFO] Matched <Statement>:
if (_Int >= 111) if (_2233 != 2234) Main = Main + 1; else Main = Main + 2729;  
[INFO] Matched <BlockItem>:
if (_Int >= 111) if (_2233 != 2234) Main = Main + 1; else Main = Main + 2729;  
[INFO] Consumed Token: int
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: j
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: j = 0
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: sum
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: sum = 0
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int j = 0, sum = 0;
[INFO] Matched <Declaration>: int j = 0, sum = 0;
[INFO] Matched <BlockItem>:
int j = 0, sum = 0;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <UnaryOperatedExpression>: !0
[INFO] Matched <UnaryExpression>: !0
[INFO] Matched <MultiplicativeExpression>: !0
[INFO] Matched <AdditiveExpression>: !0
[INFO] Matched <RelationalExpression>: !0
[INFO] Matched <EqualityExpression>: !0
[INFO] Matched <LogicalAndExpression>: !0
[INFO] Matched <LogicalOrExpression>: !0
[INFO] Matched <Condition>: !0
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: sum
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: sum
[INFO] Matched <LeftValue>: sum
[INFO] Matched <PrimaryExpression>: sum
[INFO] Matched <UnaryExpression>: sum
[INFO] Matched <MultiplicativeExpression>: sum
[INFO] Matched <AdditiveExpression>: sum
[INFO] Matched <Expression>: sum
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: sum
[INFO] Matched <LeftValue>: sum
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: sum
[INFO] Matched <LeftValue>: sum
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: sum
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: sum
[INFO] Matched <LeftValue>: sum
[INFO] Matched <PrimaryExpression>: sum
[INFO] Matched <UnaryExpression>: sum
[INFO] Matched <MultiplicativeExpression>: sum
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: aaa
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: aaa
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <Expression>: j
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: aaa[j]
[INFO] Matched <PrimaryExpression>: aaa[j]
[INFO] Matched <UnaryExpression>: aaa[j]
[INFO] Matched <MultiplicativeExpression>: aaa[j]
[INFO] Matched <AdditiveExpression>: sum + aaa[j]
[INFO] Matched <Expression>: sum + aaa[j]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: sum = sum + aaa[j];
[INFO] Matched <Statement>: sum = sum + aaa[j];
[INFO] Matched <BlockItem>:
sum = sum + aaa[j];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <Expression>: j
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: j + 1
[INFO] Matched <Expression>: j + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: j = j + 1;
[INFO] Matched <Statement>: j = j + 1;
[INFO] Matched <BlockItem>:
j = j + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _1
[INFO] Matched <LeftValue>: _1
[INFO] Matched <PrimaryExpression>: _1
[INFO] Matched <UnaryExpression>: _1
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: _1 / 2
[INFO] Matched <AdditiveExpression>: _1 / 2
[INFO] Matched <RelationalExpression>: j >= _1 / 2
[INFO] Matched <EqualityExpression>: j >= _1 / 2
[INFO] Matched <LogicalAndExpression>: j >= _1 / 2
[INFO] Matched <LogicalOrExpression>: j >= _1 / 2
[INFO] Matched <Condition>: j >= _1 / 2
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    break;
}
[INFO] Matched <Statement>:
{
    break;
}
[INFO] Matched <IfStatement>:
if (j >= _1 / 2) {
    break;
}  
[INFO] Matched <Statement>:
if (j >= _1 / 2) {
    break;
}  
[INFO] Matched <BlockItem>:
if (j >= _1 / 2) {
    break;
}  
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    sum = sum + aaa[j];
    j = j + 1;
    if (j >= _1 / 2) {
        break;
    }  
}
[INFO] Matched <Statement>:
{
    sum = sum + aaa[j];
    j = j + 1;
    if (j >= _1 / 2) {
        break;
    }  
}
[INFO] Matched <ForStatementSelection>:
for (; !0; ) {
    sum = sum + aaa[j];
    j = j + 1;
    if (j >= _1 / 2) {
        break;
    }  
}
[INFO] Matched <Statement>:
for (; !0; ) {
    sum = sum + aaa[j];
    j = j + 1;
    if (j >= _1 / 2) {
        break;
    }  
}
[INFO] Matched <BlockItem>:
for (; !0; ) {
    sum = sum + aaa[j];
    j = j + 1;
    if (j >= _1 / 2) {
        break;
    }  
}
[INFO] Consumed Token: int
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: k
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: k = 0
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int k = 0;
[INFO] Matched <Declaration>: int k = 0;
[INFO] Matched <BlockItem>:
int k = 0;
[INFO] Consumed Token: int
[INFO] Consumed Token: array
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: array
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: array
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: array
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 12
[INFO] Matched <Number>: 12
[INFO] Matched <PrimaryExpression>: 12
[INFO] Matched <UnaryExpression>: 12
[INFO] Matched <MultiplicativeExpression>: 12
[INFO] Matched <AdditiveExpression>: 12
[INFO] Matched <ConstExpression>: 12
[INFO] Consumed Token: ]
[INFO] Matched <VarDefinition>: array[12]
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int array[12];
[INFO] Matched <Declaration>: int array[12];
[INFO] Matched <BlockItem>:
int array[12];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <RelationalExpression>: 1 <= 2
[INFO] Matched <EqualityExpression>: 1 <= 2
[INFO] Matched <LogicalAndExpression>: 1 <= 2
[INFO] Matched <LogicalOrExpression>: 1 <= 2
[INFO] Matched <Condition>: 1 <= 2
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Matched <PrimaryExpression>: k
[INFO] Matched <UnaryExpression>: k
[INFO] Matched <MultiplicativeExpression>: k
[INFO] Matched <AdditiveExpression>: k
[INFO] Matched <Expression>: k
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: array[k]
[INFO] Matched <PrimaryExpression>: array[k]
[INFO] Matched <UnaryExpression>: array[k]
[INFO] Matched <MultiplicativeExpression>: array[k]
[INFO] Matched <AdditiveExpression>: array[k]
[INFO] Matched <Expression>: array[k]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Matched <PrimaryExpression>: k
[INFO] Matched <UnaryExpression>: k
[INFO] Matched <MultiplicativeExpression>: k
[INFO] Matched <AdditiveExpression>: k
[INFO] Matched <Expression>: k
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: array[k]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Matched <PrimaryExpression>: k
[INFO] Matched <UnaryExpression>: k
[INFO] Matched <MultiplicativeExpression>: k
[INFO] Matched <AdditiveExpression>: k
[INFO] Matched <Expression>: k
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: array[k]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: array[k] = 0;
[INFO] Matched <Statement>: array[k] = 0;
[INFO] Matched <BlockItem>:
array[k] = 0;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Matched <PrimaryExpression>: k
[INFO] Matched <UnaryExpression>: k
[INFO] Matched <MultiplicativeExpression>: k
[INFO] Matched <AdditiveExpression>: k
[INFO] Matched <RelationalExpression>: k
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <RelationalExpression>: 5
[INFO] Matched <EqualityExpression>: k == 5
[INFO] Matched <LogicalAndExpression>: k == 5
[INFO] Matched <LogicalOrExpression>: k == 5
[INFO] Matched <Condition>: k == 5
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Matched <PrimaryExpression>: k
[INFO] Matched <UnaryExpression>: k
[INFO] Matched <MultiplicativeExpression>: k
[INFO] Matched <AdditiveExpression>: k
[INFO] Matched <Expression>: k
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Matched <PrimaryExpression>: k
[INFO] Matched <UnaryExpression>: k
[INFO] Matched <MultiplicativeExpression>: k
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: k + 1
[INFO] Matched <Expression>: k + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: k = k + 1;
[INFO] Matched <Statement>: k = k + 1;
[INFO] Matched <BlockItem>:
k = k + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ContinueStatement>.
[INFO] Consumed Token: continue
[INFO] Consumed Token: ;
[INFO] Matched <ContinueStatement>: continue;
[INFO] Matched <Statement>: continue;
[INFO] Matched <BlockItem>:
continue;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    k = k + 1;
    continue;
}
[INFO] Matched <Statement>:
{
    k = k + 1;
    continue;
}
[INFO] Matched <IfStatement>:
if (k == 5) {
    k = k + 1;
    continue;
}  
[INFO] Matched <Statement>:
if (k == 5) {
    k = k + 1;
    continue;
}  
[INFO] Matched <BlockItem>:
if (k == 5) {
    k = k + 1;
    continue;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Matched <PrimaryExpression>: k
[INFO] Matched <UnaryExpression>: k
[INFO] Matched <MultiplicativeExpression>: k
[INFO] Matched <AdditiveExpression>: k
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <RelationalExpression>: k > 10
[INFO] Matched <EqualityExpression>: k > 10
[INFO] Matched <LogicalAndExpression>: k > 10
[INFO] Matched <LogicalOrExpression>: k > 10
[INFO] Matched <Condition>: k > 10
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    break;
}
[INFO] Matched <Statement>:
{
    break;
}
[INFO] Matched <IfStatement>:
if (k > 10) {
    break;
}  
[INFO] Matched <Statement>:
if (k > 10) {
    break;
}  
[INFO] Matched <BlockItem>:
if (k > 10) {
    break;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Matched <PrimaryExpression>: k
[INFO] Matched <UnaryExpression>: k
[INFO] Matched <MultiplicativeExpression>: k
[INFO] Matched <AdditiveExpression>: k
[INFO] Matched <Expression>: k
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: array[k]
[INFO] Matched <PrimaryExpression>: array[k]
[INFO] Matched <UnaryExpression>: array[k]
[INFO] Matched <MultiplicativeExpression>: array[k]
[INFO] Matched <AdditiveExpression>: array[k]
[INFO] Matched <Expression>: array[k]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Matched <PrimaryExpression>: k
[INFO] Matched <UnaryExpression>: k
[INFO] Matched <MultiplicativeExpression>: k
[INFO] Matched <AdditiveExpression>: k
[INFO] Matched <Expression>: k
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: array[k]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Matched <PrimaryExpression>: k
[INFO] Matched <UnaryExpression>: k
[INFO] Matched <MultiplicativeExpression>: k
[INFO] Matched <AdditiveExpression>: k
[INFO] Matched <Expression>: k
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: array[k]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Matched <PrimaryExpression>: k
[INFO] Matched <UnaryExpression>: k
[INFO] Matched <MultiplicativeExpression>: k
[INFO] Matched <AdditiveExpression>: k
[INFO] Matched <Expression>: k
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: array[k] = k;
[INFO] Matched <Statement>: array[k] = k;
[INFO] Matched <BlockItem>:
array[k] = k;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Matched <PrimaryExpression>: k
[INFO] Matched <UnaryExpression>: k
[INFO] Matched <MultiplicativeExpression>: k
[INFO] Matched <AdditiveExpression>: k
[INFO] Matched <Expression>: k
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Matched <PrimaryExpression>: k
[INFO] Matched <UnaryExpression>: k
[INFO] Matched <MultiplicativeExpression>: k
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: k + 1
[INFO] Matched <Expression>: k + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: k = k + 1;
[INFO] Matched <Statement>: k = k + 1;
[INFO] Matched <BlockItem>:
k = k + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: sum
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: sum
[INFO] Matched <LeftValue>: sum
[INFO] Matched <PrimaryExpression>: sum
[INFO] Matched <UnaryExpression>: sum
[INFO] Matched <MultiplicativeExpression>: sum
[INFO] Matched <AdditiveExpression>: sum
[INFO] Matched <Expression>: sum
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: sum
[INFO] Matched <LeftValue>: sum
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: sum
[INFO] Matched <LeftValue>: sum
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: sum
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: sum
[INFO] Matched <LeftValue>: sum
[INFO] Matched <PrimaryExpression>: sum
[INFO] Matched <UnaryExpression>: sum
[INFO] Matched <MultiplicativeExpression>: sum
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Matched <PrimaryExpression>: k
[INFO] Matched <UnaryExpression>: k
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: k
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: k
[INFO] Matched <LeftValue>: k
[INFO] Matched <PrimaryExpression>: k
[INFO] Matched <UnaryExpression>: k
[INFO] Matched <MultiplicativeExpression>: k * k
[INFO] Matched <AdditiveExpression>: sum + k * k
[INFO] Matched <Expression>: sum + k * k
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: sum = sum + k * k;
[INFO] Matched <Statement>: sum = sum + k * k;
[INFO] Matched <BlockItem>:
sum = sum + k * k;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: Main
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: Main
[INFO] Matched <LeftValue>: Main
[INFO] Matched <PrimaryExpression>: Main
[INFO] Matched <UnaryExpression>: Main
[INFO] Matched <MultiplicativeExpression>: Main
[INFO] Matched <AdditiveExpression>: Main
[INFO] Matched <Expression>: Main
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: Main
[INFO] Matched <LeftValue>: Main
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: Main
[INFO] Matched <LeftValue>: Main
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: Main
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: Main
[INFO] Matched <LeftValue>: Main
[INFO] Matched <PrimaryExpression>: Main
[INFO] Matched <UnaryExpression>: Main
[INFO] Matched <MultiplicativeExpression>: Main
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: Main + 1
[INFO] Matched <Expression>: Main + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: Main = Main + 1;
[INFO] Matched <Statement>: Main = Main + 1;
[INFO] Matched <BlockItem>:
Main = Main + 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    array[k] = 0;
    if (k == 5) {
        k = k + 1;
        continue;
    }  
    if (k > 10) {
        break;
    }  
    array[k] = k;
    k = k + 1;
    sum = sum + k * k;
    Main = Main + 1;
}
[INFO] Matched <Statement>:
{
    array[k] = 0;
    if (k == 5) {
        k = k + 1;
        continue;
    }  
    if (k > 10) {
        break;
    }  
    array[k] = k;
    k = k + 1;
    sum = sum + k * k;
    Main = Main + 1;
}
[INFO] Matched <ForStatementSelection>:
for (; 1 <= 2; ) {
    array[k] = 0;
    if (k == 5) {
        k = k + 1;
        continue;
    }  
    if (k > 10) {
        break;
    }  
    array[k] = k;
    k = k + 1;
    sum = sum + k * k;
    Main = Main + 1;
}
[INFO] Matched <Statement>:
for (; 1 <= 2; ) {
    array[k] = 0;
    if (k == 5) {
        k = k + 1;
        continue;
    }  
    if (k > 10) {
        break;
    }  
    array[k] = k;
    k = k + 1;
    sum = sum + k * k;
    Main = Main + 1;
}
[INFO] Matched <BlockItem>:
for (; 1 <= 2; ) {
    array[k] = 0;
    if (k == 5) {
        k = k + 1;
        continue;
    }  
    if (k > 10) {
        break;
    }  
    array[k] = k;
    k = k + 1;
    sum = sum + k * k;
    Main = Main + 1;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: temp
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: temp
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: temp
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: temp
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: temp = 0
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int temp = 0;
[INFO] Matched <Declaration>: int temp = 0;
[INFO] Matched <BlockItem>:
int temp = 0;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _1
[INFO] Matched <LeftValue>: _1
[INFO] Matched <PrimaryExpression>: _1
[INFO] Matched <UnaryExpression>: _1
[INFO] Matched <MultiplicativeExpression>: _1
[INFO] Matched <AdditiveExpression>: _1
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <RelationalExpression>: _1 < 5
[INFO] Matched <EqualityExpression>: _1 < 5
[INFO] Matched <LogicalAndExpression>: _1 < 5
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: aaa
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: aaa
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: aaa[0]
[INFO] Matched <PrimaryExpression>: aaa[0]
[INFO] Matched <UnaryExpression>: aaa[0]
[INFO] Matched <MultiplicativeExpression>: aaa[0]
[INFO] Matched <AdditiveExpression>: aaa[0]
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <RelationalExpression>: aaa[0] < 10
[INFO] Matched <EqualityExpression>: aaa[0] < 10
[INFO] Matched <LogicalAndExpression>: aaa[0] < 10
[INFO] Matched <LogicalOrExpression>: _1 < 5 || aaa[0] < 10
[INFO] Matched <Condition>: _1 < 5 || aaa[0] < 10
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: temp
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: temp
[INFO] Matched <LeftValue>: temp
[INFO] Matched <PrimaryExpression>: temp
[INFO] Matched <UnaryExpression>: temp
[INFO] Matched <MultiplicativeExpression>: temp
[INFO] Matched <AdditiveExpression>: temp
[INFO] Matched <Expression>: temp
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: temp
[INFO] Matched <LeftValue>: temp
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: temp
[INFO] Matched <LeftValue>: temp
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: temp
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: temp
[INFO] Matched <LeftValue>: temp
[INFO] Matched <PrimaryExpression>: temp
[INFO] Matched <UnaryExpression>: temp
[INFO] Matched <MultiplicativeExpression>: temp
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: temp + 1
[INFO] Matched <Expression>: temp + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: temp = temp + 1;
[INFO] Matched <Statement>: temp = temp + 1;
[INFO] Matched <BlockItem>:
temp = temp + 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    temp = temp + 1;
}
[INFO] Matched <Statement>:
{
    temp = temp + 1;
}
[INFO] Matched <IfStatement>:
if (_1 < 5 || aaa[0] < 10) {
    temp = temp + 1;
}  
[INFO] Matched <Statement>:
if (_1 < 5 || aaa[0] < 10) {
    temp = temp + 1;
}  
[INFO] Matched <BlockItem>:
if (_1 < 5 || aaa[0] < 10) {
    temp = temp + 1;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _2
[INFO] Matched <LeftValue>: _2
[INFO] Matched <PrimaryExpression>: _2
[INFO] Matched <UnaryExpression>: _2
[INFO] Matched <MultiplicativeExpression>: _2
[INFO] Matched <AdditiveExpression>: _2
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: _2 < 0
[INFO] Matched <EqualityExpression>: _2 < 0
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: aaa
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: aaa
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: aaa[0]
[INFO] Matched <PrimaryExpression>: aaa[0]
[INFO] Matched <UnaryExpression>: aaa[0]
[INFO] Matched <MultiplicativeExpression>: aaa[0]
[INFO] Matched <AdditiveExpression>: aaa[0]
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <RelationalExpression>: aaa[0] > 10
[INFO] Matched <EqualityExpression>: aaa[0] > 10
[INFO] Matched <LogicalAndExpression>: _2 < 0 && aaa[0] > 10
[INFO] Matched <LogicalOrExpression>: _2 < 0 && aaa[0] > 10
[INFO] Matched <Condition>: _2 < 0 && aaa[0] > 10
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: temp
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: temp
[INFO] Matched <LeftValue>: temp
[INFO] Matched <PrimaryExpression>: temp
[INFO] Matched <UnaryExpression>: temp
[INFO] Matched <MultiplicativeExpression>: temp
[INFO] Matched <AdditiveExpression>: temp
[INFO] Matched <Expression>: temp
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: temp
[INFO] Matched <LeftValue>: temp
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: temp
[INFO] Matched <LeftValue>: temp
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: temp
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: temp
[INFO] Matched <LeftValue>: temp
[INFO] Matched <PrimaryExpression>: temp
[INFO] Matched <UnaryExpression>: temp
[INFO] Matched <MultiplicativeExpression>: temp
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: temp + 2
[INFO] Matched <Expression>: temp + 2
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: temp = temp + 2;
[INFO] Matched <Statement>: temp = temp + 2;
[INFO] Matched <BlockItem>:
temp = temp + 2;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    temp = temp + 2;
}
[INFO] Matched <Statement>:
{
    temp = temp + 2;
}
[INFO] Matched <IfStatement>:
if (_2 < 0 && aaa[0] > 10) {
    temp = temp + 2;
}  
[INFO] Matched <Statement>:
if (_2 < 0 && aaa[0] > 10) {
    temp = temp + 2;
}  
[INFO] Matched <BlockItem>:
if (_2 < 0 && aaa[0] > 10) {
    temp = temp + 2;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: dijhw
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: dijhw
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: dijhw[0][0]
[INFO] Matched <PrimaryExpression>: dijhw[0][0]
[INFO] Matched <UnaryExpression>: dijhw[0][0]
[INFO] Matched <MultiplicativeExpression>: dijhw[0][0]
[INFO] Matched <AdditiveExpression>: dijhw[0][0]
[INFO] Matched <Expression>: dijhw[0][0]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: dijhw
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: dijhw[0][0]
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: dijhw[0][0] = getint();
[INFO] Matched <Statement>: dijhw[0][0] = getint();
[INFO] Matched <BlockItem>:
dijhw[0][0] = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: dijhw
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: dijhw
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: dijhw[1][0]
[INFO] Matched <PrimaryExpression>: dijhw[1][0]
[INFO] Matched <UnaryExpression>: dijhw[1][0]
[INFO] Matched <MultiplicativeExpression>: dijhw[1][0]
[INFO] Matched <AdditiveExpression>: dijhw[1][0]
[INFO] Matched <Expression>: dijhw[1][0]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: dijhw
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: dijhw[1][0]
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: dijhw[1][0] = getint();
[INFO] Matched <Statement>: dijhw[1][0] = getint();
[INFO] Matched <BlockItem>:
dijhw[1][0] = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: dijhw
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: dijhw
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: dijhw[2][0]
[INFO] Matched <PrimaryExpression>: dijhw[2][0]
[INFO] Matched <UnaryExpression>: dijhw[2][0]
[INFO] Matched <MultiplicativeExpression>: dijhw[2][0]
[INFO] Matched <AdditiveExpression>: dijhw[2][0]
[INFO] Matched <Expression>: dijhw[2][0]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: dijhw
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: dijhw[2][0]
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: dijhw[2][0] = getint();
[INFO] Matched <Statement>: dijhw[2][0] = getint();
[INFO] Matched <BlockItem>:
dijhw[2][0] = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: cdwuh
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cdwuh
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cdwuh[0]
[INFO] Matched <PrimaryExpression>: cdwuh[0]
[INFO] Matched <UnaryExpression>: cdwuh[0]
[INFO] Matched <MultiplicativeExpression>: cdwuh[0]
[INFO] Matched <AdditiveExpression>: cdwuh[0]
[INFO] Matched <Expression>: cdwuh[0]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cdwuh
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cdwuh[0]
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: cdwuh[0] = getint();
[INFO] Matched <Statement>: cdwuh[0] = getint();
[INFO] Matched <BlockItem>:
cdwuh[0] = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: cdwuh
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cdwuh
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cdwuh[1]
[INFO] Matched <PrimaryExpression>: cdwuh[1]
[INFO] Matched <UnaryExpression>: cdwuh[1]
[INFO] Matched <MultiplicativeExpression>: cdwuh[1]
[INFO] Matched <AdditiveExpression>: cdwuh[1]
[INFO] Matched <Expression>: cdwuh[1]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cdwuh
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cdwuh[1]
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: cdwuh[1] = getint();
[INFO] Matched <Statement>: cdwuh[1] = getint();
[INFO] Matched <BlockItem>:
cdwuh[1] = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: wuei
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: wuei
[INFO] Matched <LeftValue>: wuei
[INFO] Matched <PrimaryExpression>: wuei
[INFO] Matched <UnaryExpression>: wuei
[INFO] Matched <MultiplicativeExpression>: wuei
[INFO] Matched <AdditiveExpression>: wuei
[INFO] Matched <Expression>: wuei
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: wuei
[INFO] Matched <LeftValue>: wuei
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: wuei = getint();
[INFO] Matched <Statement>: wuei = getint();
[INFO] Matched <BlockItem>:
wuei = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: wuei
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: wuei
[INFO] Matched <LeftValue>: wuei
[INFO] Matched <PrimaryExpression>: wuei
[INFO] Matched <UnaryExpression>: wuei
[INFO] Matched <MultiplicativeExpression>: wuei
[INFO] Matched <AdditiveExpression>: wuei
[INFO] Matched <Expression>: wuei
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: wuei
[INFO] Matched <LeftValue>: wuei
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: wuei
[INFO] Matched <LeftValue>: wuei
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: wuei
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: wuei
[INFO] Matched <LeftValue>: wuei
[INFO] Matched <PrimaryExpression>: wuei
[INFO] Matched <UnaryExpression>: wuei
[INFO] Matched <MultiplicativeExpression>: wuei
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: cdwuh
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cdwuh
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cdwuh[0]
[INFO] Matched <PrimaryExpression>: cdwuh[0]
[INFO] Matched <UnaryExpression>: cdwuh[0]
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: cdwuh
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cdwuh
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cdwuh[1]
[INFO] Matched <PrimaryExpression>: cdwuh[1]
[INFO] Matched <UnaryExpression>: cdwuh[1]
[INFO] Matched <MultiplicativeExpression>: cdwuh[0] * cdwuh[1]
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: dijhw
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: dijhw
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: dijhw[0][1]
[INFO] Matched <PrimaryExpression>: dijhw[0][1]
[INFO] Matched <UnaryExpression>: dijhw[0][1]
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 2 * 1
[INFO] Matched <AdditiveExpression>: 2 * 1
[INFO] Matched <Expression>: 2 * 1
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (2 * 1)
[INFO] Matched <PrimaryExpression>: (2 * 1)
[INFO] Matched <UnaryExpression>: (2 * 1)
[INFO] Matched <MultiplicativeExpression>: dijhw[0][1] / (2 * 1)
[INFO] Matched <AdditiveExpression>: wuei + cdwuh[0] * cdwuh[1] + dijhw[0][1] / (2 * 1)
[INFO] Matched <Expression>: wuei + cdwuh[0] * cdwuh[1] + dijhw[0][1] / (2 * 1)
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: wuei = wuei + cdwuh[0] * cdwuh[1] + dijhw[0][1] / (2 * 1);
[INFO] Matched <Statement>: wuei = wuei + cdwuh[0] * cdwuh[1] + dijhw[0][1] / (2 * 1);
[INFO] Matched <BlockItem>:
wuei = wuei + cdwuh[0] * cdwuh[1] + dijhw[0][1] / (2 * 1);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: dijhw
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: dijhw
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: dijhw[2][1]
[INFO] Matched <PrimaryExpression>: dijhw[2][1]
[INFO] Matched <UnaryExpression>: dijhw[2][1]
[INFO] Matched <MultiplicativeExpression>: dijhw[2][1]
[INFO] Matched <AdditiveExpression>: dijhw[2][1]
[INFO] Matched <Expression>: dijhw[2][1]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: dijhw
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: dijhw[2][1]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: dijhw
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: dijhw[2][1]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: dijhw
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: dijhw
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: dijhw[2][0]
[INFO] Matched <PrimaryExpression>: dijhw[2][0]
[INFO] Matched <UnaryExpression>: dijhw[2][0]
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: dijhw
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: dijhw
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: dijhw[1][0]
[INFO] Matched <PrimaryExpression>: dijhw[1][0]
[INFO] Matched <UnaryExpression>: dijhw[1][0]
[INFO] Matched <MultiplicativeExpression>: dijhw[2][0] * dijhw[1][0]
[INFO] Matched <AdditiveExpression>: dijhw[2][0] * dijhw[1][0]
[INFO] Matched <Expression>: dijhw[2][0] * dijhw[1][0]
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: dijhw[2][1] = dijhw[2][0] * dijhw[1][0];
[INFO] Matched <Statement>: dijhw[2][1] = dijhw[2][0] * dijhw[1][0];
[INFO] Matched <BlockItem>:
dijhw[2][1] = dijhw[2][0] * dijhw[1][0];
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: jdfo_
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: jdfo_
[INFO] Matched <LeftValue>: jdfo_
[INFO] Matched <PrimaryExpression>: jdfo_
[INFO] Matched <UnaryExpression>: jdfo_
[INFO] Matched <MultiplicativeExpression>: jdfo_
[INFO] Matched <AdditiveExpression>: jdfo_
[INFO] Matched <Expression>: jdfo_
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: jdfo_
[INFO] Matched <LeftValue>: jdfo_
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: jdfo_
[INFO] Matched <LeftValue>: jdfo_
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: sum
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: sum
[INFO] Matched <LeftValue>: sum
[INFO] Matched <PrimaryExpression>: sum
[INFO] Matched <UnaryExpression>: sum
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: sum
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: sum
[INFO] Matched <LeftValue>: sum
[INFO] Matched <PrimaryExpression>: sum
[INFO] Matched <UnaryExpression>: sum
[INFO] Matched <MultiplicativeExpression>: sum * sum
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _add
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: _add
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: aaaaa
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: aaaaa
[INFO] Matched <LeftValue>: aaaaa
[INFO] Matched <PrimaryExpression>: aaaaa
[INFO] Matched <UnaryExpression>: aaaaa
[INFO] Matched <MultiplicativeExpression>: aaaaa
[INFO] Matched <AdditiveExpression>: aaaaa
[INFO] Matched <Expression>: aaaaa
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: bbbbb
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: bbbbb
[INFO] Matched <LeftValue>: bbbbb
[INFO] Matched <PrimaryExpression>: bbbbb
[INFO] Matched <UnaryExpression>: bbbbb
[INFO] Matched <MultiplicativeExpression>: bbbbb
[INFO] Matched <AdditiveExpression>: bbbbb
[INFO] Matched <Expression>: bbbbb
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <FuncArgList>: aaaaa, bbbbb, 3
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: _add(aaaaa, bbbbb, 3)
[INFO] Matched <UnaryExpression>: _add(aaaaa, bbbbb, 3)
[INFO] Matched <MultiplicativeExpression>: _add(aaaaa, bbbbb, 3)
[INFO] Matched <AdditiveExpression>: sum * sum + _add(aaaaa, bbbbb, 3)
[INFO] Matched <Expression>: sum * sum + _add(aaaaa, bbbbb, 3)
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: jdfo_ = sum * sum + _add(aaaaa, bbbbb, 3);
[INFO] Matched <Statement>: jdfo_ = sum * sum + _add(aaaaa, bbbbb, 3);
[INFO] Matched <BlockItem>:
jdfo_ = sum * sum + _add(aaaaa, bbbbb, 3);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: sum
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: sum
[INFO] Matched <LeftValue>: sum
[INFO] Matched <PrimaryExpression>: sum
[INFO] Matched <UnaryExpression>: sum
[INFO] Matched <MultiplicativeExpression>: sum
[INFO] Matched <AdditiveExpression>: sum
[INFO] Matched <Expression>: sum
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: sum
[INFO] Matched <LeftValue>: sum
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: sum
[INFO] Matched <LeftValue>: sum
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: sum
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: sum
[INFO] Matched <LeftValue>: sum
[INFO] Matched <PrimaryExpression>: sum
[INFO] Matched <UnaryExpression>: sum
[INFO] Matched <MultiplicativeExpression>: sum
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _get_id
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: _get_id
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: _get_id()
[INFO] Matched <UnaryExpression>: _get_id()
[INFO] Matched <MultiplicativeExpression>: _get_id()
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _add_fake
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: _add_fake
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 123243
[INFO] Matched <Number>: 123243
[INFO] Matched <PrimaryExpression>: 123243
[INFO] Matched <UnaryExpression>: 123243
[INFO] Matched <MultiplicativeExpression>: 123243
[INFO] Matched <AdditiveExpression>: 123243
[INFO] Matched <Expression>: 123243
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Matched <LeftValue>: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Matched <PrimaryExpression>: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Matched <UnaryExpression>: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Matched <MultiplicativeExpression>: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Matched <AdditiveExpression>: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Matched <Expression>: ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Matched <FuncArgList>: 123243, ___2_0_3_7_3_3_8_1___X___J___h_____
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: _add_fake(123243, ___2_0_3_7_3_3_8_1___X___J___h_____)
[INFO] Matched <UnaryExpression>: _add_fake(123243, ___2_0_3_7_3_3_8_1___X___J___h_____)
[INFO] Matched <MultiplicativeExpression>: _add_fake(123243, ___2_0_3_7_3_3_8_1___X___J___h_____)
[INFO] Matched <AdditiveExpression>: sum + _get_id() + _add_fake(123243, ___2_0_3_7_3_3_8_1___X___J___h_____)
[INFO] Matched <Expression>: sum + _get_id() + _add_fake(123243, ___2_0_3_7_3_3_8_1___X___J___h_____)
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: sum = sum + _get_id() + _add_fake(123243, ___2_0_3_7_3_3_8_1___X___J___h_____);
[INFO] Matched <Statement>: sum = sum + _get_id() + _add_fake(123243, ___2_0_3_7_3_3_8_1___X___J___h_____);
[INFO] Matched <BlockItem>:
sum = sum + _get_id() + _add_fake(123243, ___2_0_3_7_3_3_8_1___X___J___h_____);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ___
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: ___
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: ___()
[INFO] Matched <UnaryExpression>: ___()
[INFO] Matched <MultiplicativeExpression>: ___()
[INFO] Matched <AdditiveExpression>: ___()
[INFO] Matched <Expression>: ___()
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ___();
[INFO] Matched <Statement>: ___();
[INFO] Matched <BlockItem>:
___();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _Main
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: _Main
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _3u22
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _3u22
[INFO] Matched <LeftValue>: _3u22
[INFO] Matched <PrimaryExpression>: _3u22
[INFO] Matched <UnaryExpression>: _3u22
[INFO] Matched <MultiplicativeExpression>: _3u22
[INFO] Matched <AdditiveExpression>: _3u22
[INFO] Matched <Expression>: _3u22
[INFO] Matched <FuncArgList>: _3u22
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: _Main(_3u22)
[INFO] Matched <UnaryExpression>: _Main(_3u22)
[INFO] Matched <MultiplicativeExpression>: _Main(_3u22)
[INFO] Matched <AdditiveExpression>: _Main(_3u22)
[INFO] Matched <Expression>: _Main(_3u22)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: _Main(_3u22);
[INFO] Matched <Statement>: _Main(_3u22);
[INFO] Matched <BlockItem>:
_Main(_3u22);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: __
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _23879
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _23879
[INFO] Matched <LeftValue>: _23879
[INFO] Matched <PrimaryExpression>: _23879
[INFO] Matched <UnaryExpression>: _23879
[INFO] Matched <MultiplicativeExpression>: _23879
[INFO] Matched <AdditiveExpression>: _23879
[INFO] Matched <Expression>: _23879
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3432
[INFO] Matched <Number>: 3432
[INFO] Matched <PrimaryExpression>: 3432
[INFO] Matched <UnaryExpression>: 3432
[INFO] Matched <MultiplicativeExpression>: 3432
[INFO] Matched <AdditiveExpression>: 3432
[INFO] Matched <Expression>: 3432
[INFO] Matched <FuncArgList>: _23879, 3432
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: __(_23879, 3432)
[INFO] Matched <UnaryExpression>: __(_23879, 3432)
[INFO] Matched <MultiplicativeExpression>: __(_23879, 3432)
[INFO] Matched <AdditiveExpression>: __(_23879, 3432)
[INFO] Matched <Expression>: __(_23879, 3432)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: __(_23879, 3432);
[INFO] Matched <Statement>: __(_23879, 3432);
[INFO] Matched <BlockItem>:
__(_23879, 3432);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "temp: %d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: temp
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: temp
[INFO] Matched <LeftValue>: temp
[INFO] Matched <PrimaryExpression>: temp
[INFO] Matched <UnaryExpression>: temp
[INFO] Matched <MultiplicativeExpression>: temp
[INFO] Matched <AdditiveExpression>: temp
[INFO] Matched <Expression>: temp
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("temp: %d\n", temp);
[INFO] Matched <Statement>: printf("temp: %d\n", temp);
[INFO] Matched <BlockItem>:
printf("temp: %d\n", temp);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __my_Ha_s__h
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: __my_Ha_s__h
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: array
[INFO] Matched <LeftValue>: array
[INFO] Matched <PrimaryExpression>: array
[INFO] Matched <UnaryExpression>: array
[INFO] Matched <MultiplicativeExpression>: array
[INFO] Matched <AdditiveExpression>: array
[INFO] Matched <Expression>: array
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 12
[INFO] Matched <Number>: 12
[INFO] Matched <PrimaryExpression>: 12
[INFO] Matched <UnaryExpression>: 12
[INFO] Matched <MultiplicativeExpression>: 12
[INFO] Matched <AdditiveExpression>: 12
[INFO] Matched <Expression>: 12
[INFO] Matched <FuncArgList>: array, 12
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: __my_Ha_s__h(array, 12)
[INFO] Matched <UnaryExpression>: __my_Ha_s__h(array, 12)
[INFO] Matched <MultiplicativeExpression>: __my_Ha_s__h(array, 12)
[INFO] Matched <AdditiveExpression>: __my_Ha_s__h(array, 12)
[INFO] Matched <Expression>: __my_Ha_s__h(array, 12)
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: sum
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: sum
[INFO] Matched <LeftValue>: sum
[INFO] Matched <PrimaryExpression>: sum
[INFO] Matched <UnaryExpression>: sum
[INFO] Matched <MultiplicativeExpression>: sum
[INFO] Matched <AdditiveExpression>: sum
[INFO] Matched <Expression>: sum
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _3
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _3
[INFO] Matched <LeftValue>: _3
[INFO] Matched <PrimaryExpression>: _3
[INFO] Matched <UnaryExpression>: _3
[INFO] Matched <MultiplicativeExpression>: _3
[INFO] Matched <AdditiveExpression>: _3
[INFO] Matched <Expression>: _3
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _2
[INFO] Matched <LeftValue>: _2
[INFO] Matched <PrimaryExpression>: _2
[INFO] Matched <UnaryExpression>: _2
[INFO] Matched <MultiplicativeExpression>: _2
[INFO] Matched <AdditiveExpression>: _2
[INFO] Matched <Expression>: _2
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _10
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _10
[INFO] Matched <LeftValue>: _10
[INFO] Matched <PrimaryExpression>: _10
[INFO] Matched <UnaryExpression>: _10
[INFO] Matched <MultiplicativeExpression>: _10
[INFO] Matched <AdditiveExpression>: _10
[INFO] Matched <Expression>: _10
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: aaa
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: aaa
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: aaa[0]
[INFO] Matched <PrimaryExpression>: aaa[0]
[INFO] Matched <UnaryExpression>: aaa[0]
[INFO] Matched <MultiplicativeExpression>: aaa[0]
[INFO] Matched <AdditiveExpression>: aaa[0]
[INFO] Matched <Expression>: aaa[0]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: aaa
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: aaa
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: aaa[1]
[INFO] Matched <PrimaryExpression>: aaa[1]
[INFO] Matched <UnaryExpression>: aaa[1]
[INFO] Matched <MultiplicativeExpression>: aaa[1]
[INFO] Matched <AdditiveExpression>: aaa[1]
[INFO] Matched <Expression>: aaa[1]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: A
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: A
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: A[0][0]
[INFO] Matched <PrimaryExpression>: A[0][0]
[INFO] Matched <UnaryExpression>: A[0][0]
[INFO] Matched <MultiplicativeExpression>: A[0][0]
[INFO] Matched <AdditiveExpression>: A[0][0]
[INFO] Matched <Expression>: A[0][0]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: A
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: A
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: A[0][1]
[INFO] Matched <PrimaryExpression>: A[0][1]
[INFO] Matched <UnaryExpression>: A[0][1]
[INFO] Matched <MultiplicativeExpression>: A[0][1]
[INFO] Matched <AdditiveExpression>: A[0][1]
[INFO] Matched <Expression>: A[0][1]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: A
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: A
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: A[0][2]
[INFO] Matched <PrimaryExpression>: A[0][2]
[INFO] Matched <UnaryExpression>: A[0][2]
[INFO] Matched <MultiplicativeExpression>: A[0][2]
[INFO] Matched <AdditiveExpression>: A[0][2]
[INFO] Matched <Expression>: A[0][2]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: A
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: A
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: A[1][0]
[INFO] Matched <PrimaryExpression>: A[1][0]
[INFO] Matched <UnaryExpression>: A[1][0]
[INFO] Matched <MultiplicativeExpression>: A[1][0]
[INFO] Matched <AdditiveExpression>: A[1][0]
[INFO] Matched <Expression>: A[1][0]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: A
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: A
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: A[1][1]
[INFO] Matched <PrimaryExpression>: A[1][1]
[INFO] Matched <UnaryExpression>: A[1][1]
[INFO] Matched <MultiplicativeExpression>: A[1][1]
[INFO] Matched <AdditiveExpression>: A[1][1]
[INFO] Matched <Expression>: A[1][1]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: A
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: A
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: A[1][2]
[INFO] Matched <PrimaryExpression>: A[1][2]
[INFO] Matched <UnaryExpression>: A[1][2]
[INFO] Matched <MultiplicativeExpression>: A[1][2]
[INFO] Matched <AdditiveExpression>: A[1][2]
[INFO] Matched <Expression>: A[1][2]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: A
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: A
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: A[2][0]
[INFO] Matched <PrimaryExpression>: A[2][0]
[INFO] Matched <UnaryExpression>: A[2][0]
[INFO] Matched <MultiplicativeExpression>: A[2][0]
[INFO] Matched <AdditiveExpression>: A[2][0]
[INFO] Matched <Expression>: A[2][0]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: A
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: A
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: A[2][1]
[INFO] Matched <PrimaryExpression>: A[2][1]
[INFO] Matched <UnaryExpression>: A[2][1]
[INFO] Matched <MultiplicativeExpression>: A[2][1]
[INFO] Matched <AdditiveExpression>: A[2][1]
[INFO] Matched <Expression>: A[2][1]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: A
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: A
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: A[2][2]
[INFO] Matched <PrimaryExpression>: A[2][2]
[INFO] Matched <UnaryExpression>: A[2][2]
[INFO] Matched <MultiplicativeExpression>: A[2][2]
[INFO] Matched <AdditiveExpression>: A[2][2]
[INFO] Matched <Expression>: A[2][2]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: A
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: A
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: A[3][0]
[INFO] Matched <PrimaryExpression>: A[3][0]
[INFO] Matched <UnaryExpression>: A[3][0]
[INFO] Matched <MultiplicativeExpression>: A[3][0]
[INFO] Matched <AdditiveExpression>: A[3][0]
[INFO] Matched <Expression>: A[3][0]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: A
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: A
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: A[3][1]
[INFO] Matched <PrimaryExpression>: A[3][1]
[INFO] Matched <UnaryExpression>: A[3][1]
[INFO] Matched <MultiplicativeExpression>: A[3][1]
[INFO] Matched <AdditiveExpression>: A[3][1]
[INFO] Matched <Expression>: A[3][1]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: A
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: A
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: A[3][2]
[INFO] Matched <PrimaryExpression>: A[3][2]
[INFO] Matched <UnaryExpression>: A[3][2]
[INFO] Matched <MultiplicativeExpression>: A[3][2]
[INFO] Matched <AdditiveExpression>: A[3][2]
[INFO] Matched <Expression>: A[3][2]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _3cg
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _3cg
[INFO] Matched <LeftValue>: _3cg
[INFO] Matched <PrimaryExpression>: _3cg
[INFO] Matched <UnaryExpression>: _3cg
[INFO] Matched <MultiplicativeExpression>: _3cg
[INFO] Matched <AdditiveExpression>: _3cg
[INFO] Matched <Expression>: _3cg
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: hdc33ec_dyu
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: hdc33ec_dyu
[INFO] Matched <LeftValue>: hdc33ec_dyu
[INFO] Matched <PrimaryExpression>: hdc33ec_dyu
[INFO] Matched <UnaryExpression>: hdc33ec_dyu
[INFO] Matched <MultiplicativeExpression>: hdc33ec_dyu
[INFO] Matched <AdditiveExpression>: hdc33ec_dyu
[INFO] Matched <Expression>: hdc33ec_dyu
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: cdh3yi_23
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cdh3yi_23
[INFO] Matched <LeftValue>: cdh3yi_23
[INFO] Matched <PrimaryExpression>: cdh3yi_23
[INFO] Matched <UnaryExpression>: cdh3yi_23
[INFO] Matched <MultiplicativeExpression>: cdh3yi_23
[INFO] Matched <AdditiveExpression>: cdh3yi_23
[INFO] Matched <Expression>: cdh3yi_23
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: duhih2_23c
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: duhih2_23c
[INFO] Matched <LeftValue>: duhih2_23c
[INFO] Matched <PrimaryExpression>: duhih2_23c
[INFO] Matched <UnaryExpression>: duhih2_23c
[INFO] Matched <MultiplicativeExpression>: duhih2_23c
[INFO] Matched <AdditiveExpression>: duhih2_23c
[INFO] Matched <Expression>: duhih2_23c
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: dijhw
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: dijhw
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: dijhw[0][0]
[INFO] Matched <PrimaryExpression>: dijhw[0][0]
[INFO] Matched <UnaryExpression>: dijhw[0][0]
[INFO] Matched <MultiplicativeExpression>: dijhw[0][0]
[INFO] Matched <AdditiveExpression>: dijhw[0][0]
[INFO] Matched <Expression>: dijhw[0][0]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: dijhw
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: dijhw
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: dijhw[0][1]
[INFO] Matched <PrimaryExpression>: dijhw[0][1]
[INFO] Matched <UnaryExpression>: dijhw[0][1]
[INFO] Matched <MultiplicativeExpression>: dijhw[0][1]
[INFO] Matched <AdditiveExpression>: dijhw[0][1]
[INFO] Matched <Expression>: dijhw[0][1]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: dijhw
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: dijhw
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: dijhw[1][0]
[INFO] Matched <PrimaryExpression>: dijhw[1][0]
[INFO] Matched <UnaryExpression>: dijhw[1][0]
[INFO] Matched <MultiplicativeExpression>: dijhw[1][0]
[INFO] Matched <AdditiveExpression>: dijhw[1][0]
[INFO] Matched <Expression>: dijhw[1][0]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: dijhw
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: dijhw
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: dijhw[1][1]
[INFO] Matched <PrimaryExpression>: dijhw[1][1]
[INFO] Matched <UnaryExpression>: dijhw[1][1]
[INFO] Matched <MultiplicativeExpression>: dijhw[1][1]
[INFO] Matched <AdditiveExpression>: dijhw[1][1]
[INFO] Matched <Expression>: dijhw[1][1]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: dijhw
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: dijhw
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: dijhw[2][0]
[INFO] Matched <PrimaryExpression>: dijhw[2][0]
[INFO] Matched <UnaryExpression>: dijhw[2][0]
[INFO] Matched <MultiplicativeExpression>: dijhw[2][0]
[INFO] Matched <AdditiveExpression>: dijhw[2][0]
[INFO] Matched <Expression>: dijhw[2][0]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: dijhw
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: dijhw
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: dijhw[2][1]
[INFO] Matched <PrimaryExpression>: dijhw[2][1]
[INFO] Matched <UnaryExpression>: dijhw[2][1]
[INFO] Matched <MultiplicativeExpression>: dijhw[2][1]
[INFO] Matched <AdditiveExpression>: dijhw[2][1]
[INFO] Matched <Expression>: dijhw[2][1]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: cdwuh
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cdwuh
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cdwuh[0]
[INFO] Matched <PrimaryExpression>: cdwuh[0]
[INFO] Matched <UnaryExpression>: cdwuh[0]
[INFO] Matched <MultiplicativeExpression>: cdwuh[0]
[INFO] Matched <AdditiveExpression>: cdwuh[0]
[INFO] Matched <Expression>: cdwuh[0]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: cdwuh
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cdwuh
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: cdwuh[1]
[INFO] Matched <PrimaryExpression>: cdwuh[1]
[INFO] Matched <UnaryExpression>: cdwuh[1]
[INFO] Matched <MultiplicativeExpression>: cdwuh[1]
[INFO] Matched <AdditiveExpression>: cdwuh[1]
[INFO] Matched <Expression>: cdwuh[1]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: wuei
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: wuei
[INFO] Matched <LeftValue>: wuei
[INFO] Matched <PrimaryExpression>: wuei
[INFO] Matched <UnaryExpression>: wuei
[INFO] Matched <MultiplicativeExpression>: wuei
[INFO] Matched <AdditiveExpression>: wuei
[INFO] Matched <Expression>: wuei
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: jdfo_
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: jdfo_
[INFO] Matched <LeftValue>: jdfo_
[INFO] Matched <PrimaryExpression>: jdfo_
[INFO] Matched <UnaryExpression>: jdfo_
[INFO] Matched <MultiplicativeExpression>: jdfo_
[INFO] Matched <AdditiveExpression>: jdfo_
[INFO] Matched <Expression>: jdfo_
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _M__a_G_I___c
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: _M__a_G_I___c
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __my_Ha_s__h
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: __my_Ha_s__h
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: cdwuh
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: cdwuh
[INFO] Matched <LeftValue>: cdwuh
[INFO] Matched <PrimaryExpression>: cdwuh
[INFO] Matched <UnaryExpression>: cdwuh
[INFO] Matched <MultiplicativeExpression>: cdwuh
[INFO] Matched <AdditiveExpression>: cdwuh
[INFO] Matched <Expression>: cdwuh
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <FuncArgList>: cdwuh, 2
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: __my_Ha_s__h(cdwuh, 2)
[INFO] Matched <UnaryExpression>: __my_Ha_s__h(cdwuh, 2)
[INFO] Matched <MultiplicativeExpression>: __my_Ha_s__h(cdwuh, 2)
[INFO] Matched <AdditiveExpression>: __my_Ha_s__h(cdwuh, 2)
[INFO] Matched <Expression>: __my_Ha_s__h(cdwuh, 2)
[INFO] Matched <FuncArgList>: __my_Ha_s__h(cdwuh, 2)
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: _M__a_G_I___c(__my_Ha_s__h(cdwuh, 2))
[INFO] Matched <UnaryExpression>: _M__a_G_I___c(__my_Ha_s__h(cdwuh, 2))
[INFO] Matched <MultiplicativeExpression>: _M__a_G_I___c(__my_Ha_s__h(cdwuh, 2))
[INFO] Matched <AdditiveExpression>: _M__a_G_I___c(__my_Ha_s__h(cdwuh, 2))
[INFO] Matched <Expression>: _M__a_G_I___c(__my_Ha_s__h(cdwuh, 2))
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __my_Ha_s__h
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: __my_Ha_s__h
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _3u22
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _3u22
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: _3u22[0]
[INFO] Matched <PrimaryExpression>: _3u22[0]
[INFO] Matched <UnaryExpression>: _3u22[0]
[INFO] Matched <MultiplicativeExpression>: _3u22[0]
[INFO] Matched <AdditiveExpression>: _3u22[0]
[INFO] Matched <Expression>: _3u22[0]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <FuncArgList>: _3u22[0], 2
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: __my_Ha_s__h(_3u22[0], 2)
[INFO] Matched <UnaryExpression>: __my_Ha_s__h(_3u22[0], 2)
[INFO] Matched <MultiplicativeExpression>: __my_Ha_s__h(_3u22[0], 2)
[INFO] Matched <AdditiveExpression>: __my_Ha_s__h(_3u22[0], 2)
[INFO] Matched <Expression>: __my_Ha_s__h(_3u22[0], 2)
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _main
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _main
[INFO] Matched <LeftValue>: _main
[INFO] Matched <PrimaryExpression>: _main
[INFO] Matched <UnaryExpression>: _main
[INFO] Matched <MultiplicativeExpression>: _main
[INFO] Matched <AdditiveExpression>: _main
[INFO] Matched <Expression>: _main
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: _0
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: _0
[INFO] Matched <LeftValue>: _0
[INFO] Matched <PrimaryExpression>: _0
[INFO] Matched <UnaryExpression>: _0
[INFO] Matched <MultiplicativeExpression>: _0
[INFO] Matched <AdditiveExpression>: _0
[INFO] Matched <Expression>: _0
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a10086__
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a10086__
[INFO] Matched <LeftValue>: a10086__
[INFO] Matched <PrimaryExpression>: a10086__
[INFO] Matched <UnaryExpression>: a10086__
[INFO] Matched <MultiplicativeExpression>: a10086__
[INFO] Matched <AdditiveExpression>: a10086__
[INFO] Matched <Expression>: a10086__
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: __array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: __array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: __array[0][2]
[INFO] Matched <PrimaryExpression>: __array[0][2]
[INFO] Matched <UnaryExpression>: __array[0][2]
[INFO] Matched <MultiplicativeExpression>: __array[0][2]
[INFO] Matched <AdditiveExpression>: __array[0][2]
[INFO] Matched <Expression>: __array[0][2]
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n", __my_Ha_s__h(array, 12), sum, 1, _3, _2, _10, aaa[0], aaa[1], A[0][0], A[0][1], A[0][2], A[1][0], A[1][1], A[1][2], A[2][0], A[2][1], A[2][2], A[3][0], A[3][1], A[3][2], _3cg, hdc33ec_dyu, cdh3yi_23, duhih2_23c, dijhw[0][0], dijhw[0][1], dijhw[1][0], dijhw[1][1], dijhw[2][0], dijhw[2][1], cdwuh[0], cdwuh[1], wuei, jdfo_, _M__a_G_I___c(__my_Ha_s__h(cdwuh, 2)), __my_Ha_s__h(_3u22[0], 2), _main, _0, a10086__, __array[0][2]);
[INFO] Matched <Statement>: printf("%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n", __my_Ha_s__h(array, 12), sum, 1, _3, _2, _10, aaa[0], aaa[1], A[0][0], A[0][1], A[0][2], A[1][0], A[1][1], A[1][2], A[2][0], A[2][1], A[2][2], A[3][0], A[3][1], A[3][2], _3cg, hdc33ec_dyu, cdh3yi_23, duhih2_23c, dijhw[0][0], dijhw[0][1], dijhw[1][0], dijhw[1][1], dijhw[2][0], dijhw[2][1], cdwuh[0], cdwuh[1], wuei, jdfo_, _M__a_G_I___c(__my_Ha_s__h(cdwuh, 2)), __my_Ha_s__h(_3u22[0], 2), _main, _0, a10086__, __array[0][2]);
[INFO] Matched <BlockItem>:
printf("%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n", __my_Ha_s__h(array, 12), sum, 1, _3, _2, _10, aaa[0], aaa[1], A[0][0], A[0][1], A[0][2], A[1][0], A[1][1], A[1][2], A[2][0], A[2][1], A[2][2], A[3][0], A[3][1], A[3][2], _3cg, hdc33ec_dyu, cdh3yi_23, duhih2_23c, dijhw[0][0], dijhw[0][1], dijhw[1][0], dijhw[1][1], dijhw[2][0], dijhw[2][1], cdwuh[0], cdwuh[1], wuei, jdfo_, _M__a_G_I___c(__my_Ha_s__h(cdwuh, 2)), __my_Ha_s__h(_3u22[0], 2), _main, _0, a10086__, __array[0][2]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ____
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: ____
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: Main
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: Main
[INFO] Matched <LeftValue>: Main
[INFO] Matched <PrimaryExpression>: Main
[INFO] Matched <UnaryExpression>: Main
[INFO] Matched <MultiplicativeExpression>: Main
[INFO] Matched <AdditiveExpression>: Main
[INFO] Matched <Expression>: Main
[INFO] Matched <FuncArgList>: Main
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: ____(Main)
[INFO] Matched <UnaryExpression>: ____(Main)
[INFO] Matched <MultiplicativeExpression>: ____(Main)
[INFO] Matched <AdditiveExpression>: ____(Main)
[INFO] Matched <Expression>: ____(Main)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ____(Main);
[INFO] Matched <Statement>: ____(Main);
[INFO] Matched <BlockItem>:
____(Main);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    {
        {
            {
                {}
            }
        }
    }
    int ___2_0_3_7_3_3_8_1___X___J___h_____, _for___, _Int, _2233, a10086__;
    const int __array[-1 * 2 + 3 * 4 / 6 + 13 - 11][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}};
    const int aaaaa = 10, bbbbb = 20;
    int _0 = 10;
    int _main = 0, Main = 1;
    ___2_0_3_7_3_3_8_1___X___J___h_____ = getint();
    _for___ = getint();
    _Int = getint();
    _2233 = getint();
    a10086__ = getint();
    if (___2_0_3_7_3_3_8_1___X___J___h_____ == 20373381) {
        Main = Main + 1;
        ;
        ;
        _main = _main + 1332;
    }  
    if (_for___ > 200) Main = Main + 1;  
    if (_Int >= 111) if (_2233 != 2234) Main = Main + 1; else Main = Main + 2729;  
    int j = 0, sum = 0;
    for (; !0; ) {
        sum = sum + aaa[j];
        j = j + 1;
        if (j >= _1 / 2) {
            break;
        }  
    }
    int k = 0;
    int array[12];
    for (; 1 <= 2; ) {
        array[k] = 0;
        if (k == 5) {
            k = k + 1;
            continue;
        }  
        if (k > 10) {
            break;
        }  
        array[k] = k;
        k = k + 1;
        sum = sum + k * k;
        Main = Main + 1;
    }
    int temp = 0;
    if (_1 < 5 || aaa[0] < 10) {
        temp = temp + 1;
    }  
    if (_2 < 0 && aaa[0] > 10) {
        temp = temp + 2;
    }  
    dijhw[0][0] = getint();
    dijhw[1][0] = getint();
    dijhw[2][0] = getint();
    cdwuh[0] = getint();
    cdwuh[1] = getint();
    wuei = getint();
    wuei = wuei + cdwuh[0] * cdwuh[1] + dijhw[0][1] / (2 * 1);
    dijhw[2][1] = dijhw[2][0] * dijhw[1][0];
    jdfo_ = sum * sum + _add(aaaaa, bbbbb, 3);
    sum = sum + _get_id() + _add_fake(123243, ___2_0_3_7_3_3_8_1___X___J___h_____);
    ___();
    _Main(_3u22);
    __(_23879, 3432);
    printf("temp: %d\n", temp);
    printf("%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n", __my_Ha_s__h(array, 12), sum, 1, _3, _2, _10, aaa[0], aaa[1], A[0][0], A[0][1], A[0][2], A[1][0], A[1][1], A[1][2], A[2][0], A[2][1], A[2][2], A[3][0], A[3][1], A[3][2], _3cg, hdc33ec_dyu, cdh3yi_23, duhih2_23c, dijhw[0][0], dijhw[0][1], dijhw[1][0], dijhw[1][1], dijhw[2][0], dijhw[2][1], cdwuh[0], cdwuh[1], wuei, jdfo_, _M__a_G_I___c(__my_Ha_s__h(cdwuh, 2)), __my_Ha_s__h(_3u22[0], 2), _main, _0, a10086__, __array[0][2]);
    ____(Main);
    return 0;
}
[INFO] Matched <MainFuncDefinition>:
int main() {
    {
        {
            {
                {}
            }
        }
    }
    int ___2_0_3_7_3_3_8_1___X___J___h_____, _for___, _Int, _2233, a10086__;
    const int __array[-1 * 2 + 3 * 4 / 6 + 13 - 11][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}};
    const int aaaaa = 10, bbbbb = 20;
    int _0 = 10;
    int _main = 0, Main = 1;
    ___2_0_3_7_3_3_8_1___X___J___h_____ = getint();
    _for___ = getint();
    _Int = getint();
    _2233 = getint();
    a10086__ = getint();
    if (___2_0_3_7_3_3_8_1___X___J___h_____ == 20373381) {
        Main = Main + 1;
        ;
        ;
        _main = _main + 1332;
    }  
    if (_for___ > 200) Main = Main + 1;  
    if (_Int >= 111) if (_2233 != 2234) Main = Main + 1; else Main = Main + 2729;  
    int j = 0, sum = 0;
    for (; !0; ) {
        sum = sum + aaa[j];
        j = j + 1;
        if (j >= _1 / 2) {
            break;
        }  
    }
    int k = 0;
    int array[12];
    for (; 1 <= 2; ) {
        array[k] = 0;
        if (k == 5) {
            k = k + 1;
            continue;
        }  
        if (k > 10) {
            break;
        }  
        array[k] = k;
        k = k + 1;
        sum = sum + k * k;
        Main = Main + 1;
    }
    int temp = 0;
    if (_1 < 5 || aaa[0] < 10) {
        temp = temp + 1;
    }  
    if (_2 < 0 && aaa[0] > 10) {
        temp = temp + 2;
    }  
    dijhw[0][0] = getint();
    dijhw[1][0] = getint();
    dijhw[2][0] = getint();
    cdwuh[0] = getint();
    cdwuh[1] = getint();
    wuei = getint();
    wuei = wuei + cdwuh[0] * cdwuh[1] + dijhw[0][1] / (2 * 1);
    dijhw[2][1] = dijhw[2][0] * dijhw[1][0];
    jdfo_ = sum * sum + _add(aaaaa, bbbbb, 3);
    sum = sum + _get_id() + _add_fake(123243, ___2_0_3_7_3_3_8_1___X___J___h_____);
    ___();
    _Main(_3u22);
    __(_23879, 3432);
    printf("temp: %d\n", temp);
    printf("%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n", __my_Ha_s__h(array, 12), sum, 1, _3, _2, _10, aaa[0], aaa[1], A[0][0], A[0][1], A[0][2], A[1][0], A[1][1], A[1][2], A[2][0], A[2][1], A[2][2], A[3][0], A[3][1], A[3][2], _3cg, hdc33ec_dyu, cdh3yi_23, duhih2_23c, dijhw[0][0], dijhw[0][1], dijhw[1][0], dijhw[1][1], dijhw[2][0], dijhw[2][1], cdwuh[0], cdwuh[1], wuei, jdfo_, _M__a_G_I___c(__my_Ha_s__h(cdwuh, 2)), __my_Ha_s__h(_3u22[0], 2), _main, _0, a10086__, __array[0][2]);
    ____(Main);
    return 0;
}
[INFO] Matched <CompileUnit>:
const int _1 = 4, _3 = _1 * _1 * _1, _____ = 376789 % 326 + 23167 - +3427 * 276 / 13;
const int _2 = _1 + 10 * (_1 / 2);
const int _10 = -10 + 123 * (3 / 2 + (666 + _1) % 233) / (21 + 3) + (+(-(+(-(+((0)))))));
const int aaa[4 / 2] = {10086, _1 * _1};
const int A[4][3] = {{0 * (233 + 3) + 212132, _1 + 2 * _1 + _3, 1234 / _1}, {-3 + 2 + 657 / 24, _2 + 57024, _10 * _2 / 2 * 4 * _3}, {8792, -289 * 2378 - 89, 908}, {_10, 2 * (2768 % 13 + 56), (0) + (10086) + -2 + +20}};
int _3cg = _10 * 2364 + 324567 / (-34) * -213 % 10009921, hdc33ec_dyu = -278 * 2318 / 10009921 + +234 - 831;
int cdh3yi_23, duhih2_23c = 1983, _23879[4] = {2323, +9382 * 23 / 23 - 128, (-0), 390042 - 204 * 8137};
int dijhw[3][2], cdwuh[2], wuei, _3u22[2][2] = {{287, _____ * 2}, {287, 2786 - -8719}};
int jdfo_;

int __my_Ha_s__h(int _[], int len) {
    int __, I;
    __ = len;
    I = 0;
    for (; I < len; ) {
        __ = __ + 98326464;
        __ = __ * 20373381;
        __ = __ + 23667832;
        __ = __ / 133;
        __ = __ + 1347887899;
        __ = __ % 99998099;
        __ = (__ * 123671861 - 236234) * ((__ + 135632)) / 7;
        I = I + (-0 + 2 - (1234 / 888));
    }
    return __;
}

void ___() {
    printf("   !!! ()*+,-./:;<>=@?^_`{}|~[]  called func: ___\n");
}

void ____(int _arg) {
    printf("//called func: ____, _arg = %d\n", _arg * 2 * 3 / 6);
}

void __(int _arr_Ay[], int useless) {
    printf("called func: __, array[0] = %d\n\n\n", _arr_Ay[0]);
    return;
}

void _Main(int _arr_Ay[][2]) {
    printf("called func: Main, array[0][0] = %d, array[0][1] = %d\n\n", _arr_Ay[0][0], _arr_Ay[0][1]);
}

int _add_fake(int a, int b) {
    if (a + b >= 100 + 10086) {
        return a + (203 * b) / 201;
    } else if (a + b - 10086 < 12345678) {
        return (1003 * a / 1009) + 2022 * b / 2019;
    } else {
        return a + b - 233;
    }
    return -10086;
}

int _add(int a, int b, int c) {
    return a + b + c;
}

int _get_id() {
    int _2_wj5qhidw_;
    _2_wj5qhidw_ = 76;
    {
        ;
        123;
        printf("%d\n", _2_wj5qhidw_);
        _2_wj5qhidw_ = 10086;
        printf("%d\n", _2_wj5qhidw_);
        int _2_wj5qhidw_ = +-+10;
        printf("%d\n", _2_wj5qhidw_);
    }
    return 20373381;
}

int _M__a_G_I___c(int num) {
    return ((((num + -763835168) % 1996325548) * 1881457024) / 11) * 540488577;
}

int main() {
    {
        {
            {
                {}
            }
        }
    }
    int ___2_0_3_7_3_3_8_1___X___J___h_____, _for___, _Int, _2233, a10086__;
    const int __array[-1 * 2 + 3 * 4 / 6 + 13 - 11][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}};
    const int aaaaa = 10, bbbbb = 20;
    int _0 = 10;
    int _main = 0, Main = 1;
    ___2_0_3_7_3_3_8_1___X___J___h_____ = getint();
    _for___ = getint();
    _Int = getint();
    _2233 = getint();
    a10086__ = getint();
    if (___2_0_3_7_3_3_8_1___X___J___h_____ == 20373381) {
        Main = Main + 1;
        ;
        ;
        _main = _main + 1332;
    }  
    if (_for___ > 200) Main = Main + 1;  
    if (_Int >= 111) if (_2233 != 2234) Main = Main + 1; else Main = Main + 2729;  
    int j = 0, sum = 0;
    for (; !0; ) {
        sum = sum + aaa[j];
        j = j + 1;
        if (j >= _1 / 2) {
            break;
        }  
    }
    int k = 0;
    int array[12];
    for (; 1 <= 2; ) {
        array[k] = 0;
        if (k == 5) {
            k = k + 1;
            continue;
        }  
        if (k > 10) {
            break;
        }  
        array[k] = k;
        k = k + 1;
        sum = sum + k * k;
        Main = Main + 1;
    }
    int temp = 0;
    if (_1 < 5 || aaa[0] < 10) {
        temp = temp + 1;
    }  
    if (_2 < 0 && aaa[0] > 10) {
        temp = temp + 2;
    }  
    dijhw[0][0] = getint();
    dijhw[1][0] = getint();
    dijhw[2][0] = getint();
    cdwuh[0] = getint();
    cdwuh[1] = getint();
    wuei = getint();
    wuei = wuei + cdwuh[0] * cdwuh[1] + dijhw[0][1] / (2 * 1);
    dijhw[2][1] = dijhw[2][0] * dijhw[1][0];
    jdfo_ = sum * sum + _add(aaaaa, bbbbb, 3);
    sum = sum + _get_id() + _add_fake(123243, ___2_0_3_7_3_3_8_1___X___J___h_____);
    ___();
    _Main(_3u22);
    __(_23879, 3432);
    printf("temp: %d\n", temp);
    printf("%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n%d %d %d %d %d %d %d %d %d %d\n", __my_Ha_s__h(array, 12), sum, 1, _3, _2, _10, aaa[0], aaa[1], A[0][0], A[0][1], A[0][2], A[1][0], A[1][1], A[1][2], A[2][0], A[2][1], A[2][2], A[3][0], A[3][1], A[3][2], _3cg, hdc33ec_dyu, cdh3yi_23, duhih2_23c, dijhw[0][0], dijhw[0][1], dijhw[1][0], dijhw[1][1], dijhw[2][0], dijhw[2][1], cdwuh[0], cdwuh[1], wuei, jdfo_, _M__a_G_I___c(__my_Ha_s__h(cdwuh, 2)), __my_Ha_s__h(_3u22[0], 2), _main, _0, a10086__, __array[0][2]);
    ____(Main);
    return 0;
}
[INFO] Test 13
[INFO] Matching <CompileUnit>
[INFO] Consumed Token: int
[INFO] Consumed Token: u
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: u
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: u
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3 % 3
[INFO] Matched <AdditiveExpression>: 3 % 3
[INFO] Matched <Expression>: 3 % 3
[INFO] Matched <ScalarVarInitValue>: 3 % 3
[INFO] Matched <VarInitValue>: 3 % 3
[INFO] Matched <VarDefinition>: u = 3 % 3
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: v
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: 6
[INFO] Matched <Expression>: 6
[INFO] Matched <ScalarVarInitValue>: 6
[INFO] Matched <VarInitValue>: 6
[INFO] Matched <VarDefinition>: v = 6
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: s
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 9
[INFO] Matched <Number>: 9
[INFO] Matched <PrimaryExpression>: 9
[INFO] Matched <UnaryExpression>: 9
[INFO] Matched <MultiplicativeExpression>: 9
[INFO] Matched <AdditiveExpression>: 9
[INFO] Matched <Expression>: 9
[INFO] Matched <ScalarVarInitValue>: 9
[INFO] Matched <VarInitValue>: 9
[INFO] Matched <VarDefinition>: s = 9
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int u = 3 % 3, v = 6, s = 9;
[INFO] Matched <Declaration>: int u = 3 % 3, v = 6, s = 9;
[INFO] Consumed Token: int
[INFO] Consumed Token: dim_2
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: dim_2
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: dim_2
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Matched <VarDefinition>: dim_2[3][3]
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int dim_2[3][3];
[INFO] Matched <Declaration>: int dim_2[3][3];
[INFO] Consumed Token: int
[INFO] Consumed Token: array
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: array
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: array
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2}
[INFO] Matched <VarInitValue>: {1, 2}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <Expression>: 4
[INFO] Matched <ScalarVarInitValue>: 4
[INFO] Matched <VarInitValue>: 4
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {2, 4}
[INFO] Matched <VarInitValue>: {2, 4}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{1, 2}, {2, 4}}
[INFO] Matched <VarInitValue>: {{1, 2}, {2, 4}}
[INFO] Matched <VarDefinition>: array[2][2] = {{1, 2}, {2, 4}}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int array[2][2] = {{1, 2}, {2, 4}};
[INFO] Matched <Declaration>: int array[2][2] = {{1, 2}, {2, 4}};
[INFO] Consumed Token: int
[INFO] Consumed Token: add_three
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: add_three
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: add_three
[INFO] Matched <VarDefinition>: add_three
[INFO] Failed to match <VarDeclaration>.
[INFO] Lexer rolling back...
[INFO] Failed to match <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: add_three
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: add_three
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: arr
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int arr[]
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: b
[INFO] Matched <FuncParamList>: int a, int arr[], int b
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: arr
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arr
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arr[0]
[INFO] Matched <PrimaryExpression>: arr[0]
[INFO] Matched <UnaryExpression>: arr[0]
[INFO] Matched <MultiplicativeExpression>: arr[0]
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: a + arr[0] + b
[INFO] Matched <Expression>: a + arr[0] + b
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return a + arr[0] + b;
[INFO] Matched <Statement>: return a + arr[0] + b;
[INFO] Matched <BlockItem>:
return a + arr[0] + b;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return a + arr[0] + b;
}
[INFO] Matched <FuncDefinition>:
int add_three(int a, int arr[], int b) {
    return a + arr[0] + b;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: add1
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: add1
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: b
[INFO] Matched <FuncParamList>: int a, int b
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: ans
[INFO] Matched <VarDefinition>: ans
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int ans;
[INFO] Matched <Declaration>: int ans;
[INFO] Matched <BlockItem>:
int ans;
[INFO] Matching <BlockItem>.
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: AAA
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Matched <ScalarConstInitValue>: 3
[INFO] Matched <ConstInitValue>: 3
[INFO] Matched <ConstDefinition>.AAA = 3
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: BBB_
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Matched <ScalarConstInitValue>: 3
[INFO] Matched <ConstInitValue>: 3
[INFO] Matched <ConstDefinition>.BBB_ = 3
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: CCC
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 9
[INFO] Matched <Number>: 9
[INFO] Matched <PrimaryExpression>: 9
[INFO] Matched <UnaryExpression>: 9
[INFO] Matched <MultiplicativeExpression>: 9
[INFO] Matched <AdditiveExpression>: 9
[INFO] Matched <ConstExpression>: 9
[INFO] Matched <ScalarConstInitValue>: 9
[INFO] Matched <ConstInitValue>: 9
[INFO] Matched <ConstDefinition>.CCC = 9
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int AAA = 3, BBB_ = 3, CCC = 9;
[INFO] Matched <Declaration>: const int AAA = 3, BBB_ = 3, CCC = 9;
[INFO] Matched <BlockItem>:
const int AAA = 3, BBB_ = 3, CCC = 9;
[INFO] Matching <BlockItem>.
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: a1
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 12
[INFO] Matched <Number>: 12
[INFO] Matched <PrimaryExpression>: 12
[INFO] Matched <UnaryExpression>: 12
[INFO] Matched <MultiplicativeExpression>: 12
[INFO] Matched <AdditiveExpression>: 12
[INFO] Matched <ConstExpression>: 12
[INFO] Matched <ScalarConstInitValue>: 12
[INFO] Matched <ConstInitValue>: 12
[INFO] Matched <ConstDefinition>.a1 = 12
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: a2
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 22
[INFO] Matched <Number>: 22
[INFO] Matched <PrimaryExpression>: 22
[INFO] Matched <UnaryExpression>: 22
[INFO] Matched <MultiplicativeExpression>: 22
[INFO] Matched <AdditiveExpression>: 22
[INFO] Matched <ConstExpression>: 22
[INFO] Matched <ScalarConstInitValue>: 22
[INFO] Matched <ConstInitValue>: 22
[INFO] Matched <ConstDefinition>.a2 = 22
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int a1 = 12, a2 = 22;
[INFO] Matched <Declaration>: const int a1 = 12, a2 = 22;
[INFO] Matched <BlockItem>:
const int a1 = 12, a2 = 22;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Matched <PrimaryExpression>: ans
[INFO] Matched <UnaryExpression>: ans
[INFO] Matched <MultiplicativeExpression>: ans
[INFO] Matched <AdditiveExpression>: ans
[INFO] Matched <Expression>: ans
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: a + b
[INFO] Matched <Expression>: a + b
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: ans = a + b;
[INFO] Matched <Statement>: ans = a + b;
[INFO] Matched <BlockItem>:
ans = a + b;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "a = %d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("a = %d\n", a);
[INFO] Matched <Statement>: printf("a = %d\n", a);
[INFO] Matched <BlockItem>:
printf("a = %d\n", a);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "b = %d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <Expression>: b
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("b = %d\n", b);
[INFO] Matched <Statement>: printf("b = %d\n", b);
[INFO] Matched <BlockItem>:
printf("b = %d\n", b);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ans
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ans
[INFO] Matched <LeftValue>: ans
[INFO] Matched <PrimaryExpression>: ans
[INFO] Matched <UnaryExpression>: ans
[INFO] Matched <MultiplicativeExpression>: ans
[INFO] Matched <AdditiveExpression>: ans
[INFO] Matched <Expression>: ans
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return ans;
[INFO] Matched <Statement>: return ans;
[INFO] Matched <BlockItem>:
return ans;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int ans;
    const int AAA = 3, BBB_ = 3, CCC = 9;
    const int a1 = 12, a2 = 22;
    ans = a + b;
    printf("a = %d\n", a);
    printf("b = %d\n", b);
    return ans;
}
[INFO] Matched <FuncDefinition>:
int add1(int a, int b) {
    int ans;
    const int AAA = 3, BBB_ = 3, CCC = 9;
    const int a1 = 12, a2 = 22;
    ans = a + b;
    printf("a = %d\n", a);
    printf("b = %d\n", b);
    return ans;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: addmmm
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: addmmm
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: b
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: c
[INFO] Matched <FuncParamList>: int a, int b, int c
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Matched <LeftValue>: c
[INFO] Matched <PrimaryExpression>: c
[INFO] Matched <UnaryExpression>: c
[INFO] Matched <MultiplicativeExpression>: c
[INFO] Matched <AdditiveExpression>: a + b + c
[INFO] Matched <Expression>: a + b + c
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return a + b + c;
[INFO] Matched <Statement>: return a + b + c;
[INFO] Matched <BlockItem>:
return a + b + c;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return a + b + c;
}
[INFO] Matched <FuncDefinition>:
int addmmm(int a, int b, int c) {
    return a + b + c;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: add
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: add
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Failed to match <BasicType>.
[INFO] Failed to match <FuncParam>.
[INFO] Failed to match <FuncParamList>.
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 99
[INFO] Matched <Number>: 99
[INFO] Matched <PrimaryExpression>: 99
[INFO] Matched <UnaryExpression>: 99
[INFO] Matched <MultiplicativeExpression>: 99
[INFO] Matched <AdditiveExpression>: 99
[INFO] Matched <Expression>: 99
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 99;
[INFO] Matched <Statement>: return 99;
[INFO] Matched <BlockItem>:
return 99;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return 99;
}
[INFO] Matched <FuncDefinition>:
int add() {
    return 99;
}
[INFO] Consumed Token: void
[INFO] Consumed Token: printarrrr
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: printarrrr
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: arr
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int arr[][2]
[INFO] Matched <FuncParamList>: int arr[][2]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "first: %d"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: arr
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arr
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arr[0][0]
[INFO] Matched <PrimaryExpression>: arr[0][0]
[INFO] Matched <UnaryExpression>: arr[0][0]
[INFO] Matched <MultiplicativeExpression>: arr[0][0]
[INFO] Matched <AdditiveExpression>: arr[0][0]
[INFO] Matched <Expression>: arr[0][0]
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("first: %d", arr[0][0]);
[INFO] Matched <Statement>: printf("first: %d", arr[0][0]);
[INFO] Matched <BlockItem>:
printf("first: %d", arr[0][0]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("first: %d", arr[0][0]);
    return;
}
[INFO] Matched <FuncDefinition>:
void printarrrr(int arr[][2]) {
    printf("first: %d", arr[0][0]);
    return;
}
[INFO] Consumed Token: void
[INFO] Consumed Token: printarr
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: printarr
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: arr
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int arr[]
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: arr2
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int arr2[]
[INFO] Matched <FuncParamList>: int arr[], int arr2[]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "first : %d"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: arr
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: arr
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: arr[0]
[INFO] Matched <PrimaryExpression>: arr[0]
[INFO] Matched <UnaryExpression>: arr[0]
[INFO] Matched <MultiplicativeExpression>: arr[0]
[INFO] Matched <AdditiveExpression>: arr[0]
[INFO] Matched <Expression>: arr[0]
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("first : %d", arr[0]);
[INFO] Matched <Statement>: printf("first : %d", arr[0]);
[INFO] Matched <BlockItem>:
printf("first : %d", arr[0]);
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("first : %d", arr[0]);
}
[INFO] Matched <FuncDefinition>:
void printarr(int arr[], int arr2[]) {
    printf("first : %d", arr[0]);
}
[INFO] Consumed Token: int
[INFO] Lexer rolling back...
[INFO] Matching <MainFuncDefinition>.
[INFO] Consumed Token: int
[INFO] Consumed Token: main
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 7
[INFO] Matched <Number>: 7
[INFO] Matched <PrimaryExpression>: 7
[INFO] Matched <UnaryExpression>: 7
[INFO] Matched <MultiplicativeExpression>: 7
[INFO] Matched <AdditiveExpression>: 7
[INFO] Matched <ConstExpression>: 7
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <Expression>: 4
[INFO] Matched <ScalarVarInitValue>: 4
[INFO] Matched <VarInitValue>: 4
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <Expression>: 5
[INFO] Matched <ScalarVarInitValue>: 5
[INFO] Matched <VarInitValue>: 5
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 7
[INFO] Matched <Number>: 7
[INFO] Matched <PrimaryExpression>: 7
[INFO] Matched <UnaryExpression>: 7
[INFO] Matched <MultiplicativeExpression>: 7
[INFO] Matched <AdditiveExpression>: 7
[INFO] Matched <Expression>: 7
[INFO] Matched <ScalarVarInitValue>: 7
[INFO] Matched <VarInitValue>: 7
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 8
[INFO] Matched <Number>: 8
[INFO] Matched <PrimaryExpression>: 8
[INFO] Matched <UnaryExpression>: 8
[INFO] Matched <MultiplicativeExpression>: 8
[INFO] Matched <AdditiveExpression>: 8
[INFO] Matched <Expression>: 8
[INFO] Matched <ScalarVarInitValue>: 8
[INFO] Matched <VarInitValue>: 8
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2, 3, 4, 5, 7, 8}
[INFO] Matched <VarInitValue>: {1, 2, 3, 4, 5, 7, 8}
[INFO] Matched <VarDefinition>: var_array[7] = {1, 2, 3, 4, 5, 7, 8}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int var_array[7] = {1, 2, 3, 4, 5, 7, 8};
[INFO] Matched <Declaration>: int var_array[7] = {1, 2, 3, 4, 5, 7, 8};
[INFO] Matched <BlockItem>:
int var_array[7] = {1, 2, 3, 4, 5, 7, 8};
[INFO] Matching <BlockItem>.
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: c_array
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1 + 1
[INFO] Matched <ConstExpression>: 1 + 1
[INFO] Matched <ScalarConstInitValue>: 1 + 1
[INFO] Matched <ConstInitValue>: 1 + 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3 + 3
[INFO] Matched <ConstExpression>: 3 + 3
[INFO] Matched <ScalarConstInitValue>: 3 + 3
[INFO] Matched <ConstInitValue>: 3 + 3
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {1 + 1, 3 + 3}
[INFO] Matched <ConstInitValue>: {1 + 1, 3 + 3}
[INFO] Matched <ConstDefinition>.c_array[2] = {1 + 1, 3 + 3}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int c_array[2] = {1 + 1, 3 + 3};
[INFO] Matched <Declaration>: const int c_array[2] = {1 + 1, 3 + 3};
[INFO] Matched <BlockItem>:
const int c_array[2] = {1 + 1, 3 + 3};
[INFO] Consumed Token: int
[INFO] Consumed Token: var_AAA
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: var_AAA
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: var_AAA
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: var_AAA
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1}
[INFO] Matched <VarInitValue>: {1}
[INFO] Matched <VarDefinition>: var_AAA[1] = {1}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int var_AAA[1] = {1};
[INFO] Matched <Declaration>: int var_AAA[1] = {1};
[INFO] Matched <BlockItem>:
int var_AAA[1] = {1};
[INFO] Consumed Token: int
[INFO] Consumed Token: var_2dim
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: var_2dim
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: var_2dim
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: var_2dim
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2}
[INFO] Matched <VarInitValue>: {1, 2}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[0]
[INFO] Matched <PrimaryExpression>: var_array[0]
[INFO] Matched <UnaryExpression>: var_array[0]
[INFO] Matched <MultiplicativeExpression>: var_array[0]
[INFO] Matched <AdditiveExpression>: var_array[0]
[INFO] Matched <Expression>: var_array[0]
[INFO] Matched <ScalarVarInitValue>: var_array[0]
[INFO] Matched <VarInitValue>: var_array[0]
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[1]
[INFO] Matched <PrimaryExpression>: var_array[1]
[INFO] Matched <UnaryExpression>: var_array[1]
[INFO] Matched <MultiplicativeExpression>: var_array[1]
[INFO] Matched <AdditiveExpression>: var_array[1]
[INFO] Matched <Expression>: var_array[1]
[INFO] Matched <ScalarVarInitValue>: var_array[1]
[INFO] Matched <VarInitValue>: var_array[1]
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {var_array[0], var_array[1]}
[INFO] Matched <VarInitValue>: {var_array[0], var_array[1]}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{1, 2}, {var_array[0], var_array[1]}}
[INFO] Matched <VarInitValue>: {{1, 2}, {var_array[0], var_array[1]}}
[INFO] Matched <VarDefinition>: var_2dim[2][2] = {{1, 2}, {var_array[0], var_array[1]}}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int var_2dim[2][2] = {{1, 2}, {var_array[0], var_array[1]}};
[INFO] Matched <Declaration>: int var_2dim[2][2] = {{1, 2}, {var_array[0], var_array[1]}};
[INFO] Matched <BlockItem>:
int var_2dim[2][2] = {{1, 2}, {var_array[0], var_array[1]}};
[INFO] Matching <BlockItem>.
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: ONE
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Matched <ConstDefinition>.ONE = 1
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int ONE = 1;
[INFO] Matched <Declaration>: const int ONE = 1;
[INFO] Matched <BlockItem>:
const int ONE = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: 0
[INFO] Matched <EqualityExpression>: 0
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <RelationalExpression>: 1
[INFO] Matched <EqualityExpression>: 1
[INFO] Matched <LogicalAndExpression>: 0 && 1
[INFO] Matched <LogicalOrExpression>: 0 && 1
[INFO] Matched <Condition>: 0 && 1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[1]
[INFO] Matched <PrimaryExpression>: var_array[1]
[INFO] Matched <UnaryExpression>: var_array[1]
[INFO] Matched <MultiplicativeExpression>: var_array[1]
[INFO] Matched <AdditiveExpression>: var_array[1]
[INFO] Matched <Expression>: var_array[1]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[1]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[1]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: var_array[1] = 3;
[INFO] Matched <Statement>: var_array[1] = 3;
[INFO] Matched <BlockItem>:
var_array[1] = 3;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    var_array[1] = 3;
}
[INFO] Matched <Statement>:
{
    var_array[1] = 3;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <RelationalExpression>: 1
[INFO] Matched <EqualityExpression>: 1
[INFO] Matched <LogicalAndExpression>: 1
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ONE
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ONE
[INFO] Matched <LeftValue>: ONE
[INFO] Matched <PrimaryExpression>: ONE
[INFO] Matched <UnaryExpression>: ONE
[INFO] Matched <UnaryOperatedExpression>: !ONE
[INFO] Matched <UnaryExpression>: !ONE
[INFO] Matched <MultiplicativeExpression>: !ONE
[INFO] Matched <AdditiveExpression>: !ONE
[INFO] Matched <RelationalExpression>: !ONE
[INFO] Matched <EqualityExpression>: !ONE
[INFO] Matched <LogicalAndExpression>: !ONE
[INFO] Matched <LogicalOrExpression>: 1 || !ONE
[INFO] Matched <Condition>: 1 || !ONE
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[0]
[INFO] Matched <PrimaryExpression>: var_array[0]
[INFO] Matched <UnaryExpression>: var_array[0]
[INFO] Matched <MultiplicativeExpression>: var_array[0]
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 99
[INFO] Matched <Number>: 99
[INFO] Matched <PrimaryExpression>: 99
[INFO] Matched <UnaryExpression>: 99
[INFO] Matched <MultiplicativeExpression>: 99
[INFO] Matched <AdditiveExpression>: var_array[0] + 99
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 99
[INFO] Matched <Number>: 99
[INFO] Matched <PrimaryExpression>: 99
[INFO] Matched <UnaryExpression>: 99
[INFO] Matched <MultiplicativeExpression>: 99
[INFO] Matched <AdditiveExpression>: 99
[INFO] Matched <RelationalExpression>: var_array[0] + 99 < 99
[INFO] Matched <EqualityExpression>: var_array[0] + 99 < 99
[INFO] Matched <LogicalAndExpression>: var_array[0] + 99 < 99
[INFO] Matched <LogicalOrExpression>: var_array[0] + 99 < 99
[INFO] Matched <Condition>: var_array[0] + 99 < 99
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[1]
[INFO] Matched <PrimaryExpression>: var_array[1]
[INFO] Matched <UnaryExpression>: var_array[1]
[INFO] Matched <MultiplicativeExpression>: var_array[1]
[INFO] Matched <AdditiveExpression>: var_array[1]
[INFO] Matched <Expression>: var_array[1]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[1]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[1]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 99
[INFO] Matched <Number>: 99
[INFO] Matched <PrimaryExpression>: 99
[INFO] Matched <UnaryExpression>: 99
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: add
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: add
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: add()
[INFO] Matched <UnaryExpression>: add()
[INFO] Matched <MultiplicativeExpression>: 99 / add()
[INFO] Matched <AdditiveExpression>: 99 / add()
[INFO] Matched <Expression>: 99 / add()
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: var_array[1] = 99 / add();
[INFO] Matched <Statement>: var_array[1] = 99 / add();
[INFO] Matched <BlockItem>:
var_array[1] = 99 / add();
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    var_array[1] = 99 / add();
}
[INFO] Matched <Statement>:
{
    var_array[1] = 99 / add();
}
[INFO] Matched <IfStatement>:
if (var_array[0] + 99 < 99) {
    var_array[1] = 99 / add();
}  
[INFO] Matched <Statement>:
if (var_array[0] + 99 < 99) {
    var_array[1] = 99 / add();
}  
[INFO] Matched <BlockItem>:
if (var_array[0] + 99 < 99) {
    var_array[1] = 99 / add();
}  
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (var_array[0] + 99 < 99) {
        var_array[1] = 99 / add();
    }  
}
[INFO] Matched <Statement>:
{
    if (var_array[0] + 99 < 99) {
        var_array[1] = 99 / add();
    }  
}
[INFO] Matched <IfStatement>:
if (1 || !ONE) {
    if (var_array[0] + 99 < 99) {
        var_array[1] = 99 / add();
    }  
}  
[INFO] Matched <Statement>:
if (1 || !ONE) {
    if (var_array[0] + 99 < 99) {
        var_array[1] = 99 / add();
    }  
}  
[INFO] Matched <IfStatement>:
if (0 && 1) {
    var_array[1] = 3;
} else if (1 || !ONE) {
    if (var_array[0] + 99 < 99) {
        var_array[1] = 99 / add();
    }  
}  
[INFO] Matched <Statement>:
if (0 && 1) {
    var_array[1] = 3;
} else if (1 || !ONE) {
    if (var_array[0] + 99 < 99) {
        var_array[1] = 99 / add();
    }  
}  
[INFO] Matched <BlockItem>:
if (0 && 1) {
    var_array[1] = 3;
} else if (1 || !ONE) {
    if (var_array[0] + 99 < 99) {
        var_array[1] = 99 / add();
    }  
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: add1
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: add1
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 4 % 3
[INFO] Matched <AdditiveExpression>: 4 % 3
[INFO] Matched <Expression>: 4 % 3
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[4 % 3]
[INFO] Matched <PrimaryExpression>: var_array[4 % 3]
[INFO] Matched <UnaryExpression>: var_array[4 % 3]
[INFO] Matched <MultiplicativeExpression>: var_array[4 % 3]
[INFO] Matched <AdditiveExpression>: var_array[4 % 3]
[INFO] Matched <Expression>: var_array[4 % 3]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[2]
[INFO] Matched <PrimaryExpression>: var_array[2]
[INFO] Matched <UnaryExpression>: var_array[2]
[INFO] Matched <MultiplicativeExpression>: var_array[2]
[INFO] Matched <AdditiveExpression>: var_array[2]
[INFO] Matched <Expression>: var_array[2]
[INFO] Matched <FuncArgList>: var_array[4 % 3], var_array[2]
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: add1(var_array[4 % 3], var_array[2])
[INFO] Matched <UnaryExpression>: add1(var_array[4 % 3], var_array[2])
[INFO] Matched <MultiplicativeExpression>: add1(var_array[4 % 3], var_array[2])
[INFO] Matched <AdditiveExpression>: add1(var_array[4 % 3], var_array[2])
[INFO] Matched <Expression>: add1(var_array[4 % 3], var_array[2])
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: add1(var_array[4 % 3], var_array[2]);
[INFO] Matched <Statement>: add1(var_array[4 % 3], var_array[2]);
[INFO] Matched <BlockItem>:
add1(var_array[4 % 3], var_array[2]);
[INFO] Consumed Token: int
[INFO] Consumed Token: input_n
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: input_n
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: input_n
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: input_n
[INFO] Matched <VarDefinition>: input_n
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: input_m
[INFO] Matched <VarDefinition>: input_m
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int input_n, input_m;
[INFO] Matched <Declaration>: int input_n, input_m;
[INFO] Matched <BlockItem>:
int input_n, input_m;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: input_n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: input_n
[INFO] Matched <LeftValue>: input_n
[INFO] Matched <PrimaryExpression>: input_n
[INFO] Matched <UnaryExpression>: input_n
[INFO] Matched <MultiplicativeExpression>: input_n
[INFO] Matched <AdditiveExpression>: input_n
[INFO] Matched <Expression>: input_n
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: input_n
[INFO] Matched <LeftValue>: input_n
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: input_n = getint();
[INFO] Matched <Statement>: input_n = getint();
[INFO] Matched <BlockItem>:
input_n = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: add1
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: add1
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: input_n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: input_n
[INFO] Matched <LeftValue>: input_n
[INFO] Matched <PrimaryExpression>: input_n
[INFO] Matched <UnaryExpression>: input_n
[INFO] Matched <MultiplicativeExpression>: input_n
[INFO] Matched <AdditiveExpression>: input_n
[INFO] Matched <Expression>: input_n
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: array[0][1]
[INFO] Matched <PrimaryExpression>: array[0][1]
[INFO] Matched <UnaryExpression>: array[0][1]
[INFO] Matched <UnaryOperatedExpression>: +array[0][1]
[INFO] Matched <UnaryExpression>: +array[0][1]
[INFO] Matched <MultiplicativeExpression>: +array[0][1]
[INFO] Matched <AdditiveExpression>: +array[0][1]
[INFO] Matched <Expression>: +array[0][1]
[INFO] Matched <FuncArgList>: input_n, +array[0][1]
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: add1(input_n, +array[0][1])
[INFO] Matched <UnaryExpression>: add1(input_n, +array[0][1])
[INFO] Matched <MultiplicativeExpression>: add1(input_n, +array[0][1])
[INFO] Matched <AdditiveExpression>: add1(input_n, +array[0][1])
[INFO] Matched <Expression>: add1(input_n, +array[0][1])
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: add1(input_n, +array[0][1]);
[INFO] Matched <Statement>: add1(input_n, +array[0][1]);
[INFO] Matched <BlockItem>:
add1(input_n, +array[0][1]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: add1
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: add1
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: input_n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: input_n
[INFO] Matched <LeftValue>: input_n
[INFO] Matched <PrimaryExpression>: input_n
[INFO] Matched <UnaryExpression>: input_n
[INFO] Matched <UnaryOperatedExpression>: -input_n
[INFO] Matched <UnaryExpression>: -input_n
[INFO] Matched <MultiplicativeExpression>: -input_n
[INFO] Matched <AdditiveExpression>: -input_n
[INFO] Matched <Expression>: -input_n
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: array[0][1]
[INFO] Matched <PrimaryExpression>: array[0][1]
[INFO] Matched <UnaryExpression>: array[0][1]
[INFO] Matched <MultiplicativeExpression>: array[0][1]
[INFO] Matched <AdditiveExpression>: array[0][1]
[INFO] Matched <Expression>: array[0][1]
[INFO] Matched <FuncArgList>: -input_n, array[0][1]
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: add1(-input_n, array[0][1])
[INFO] Matched <UnaryExpression>: add1(-input_n, array[0][1])
[INFO] Matched <MultiplicativeExpression>: add1(-input_n, array[0][1])
[INFO] Matched <AdditiveExpression>: add1(-input_n, array[0][1])
[INFO] Matched <Expression>: add1(-input_n, array[0][1])
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: add1(-input_n, array[0][1]);
[INFO] Matched <Statement>: add1(-input_n, array[0][1]);
[INFO] Matched <BlockItem>:
add1(-input_n, array[0][1]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: add1
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: add1
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: input_n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: input_n
[INFO] Matched <LeftValue>: input_n
[INFO] Matched <PrimaryExpression>: input_n
[INFO] Matched <UnaryExpression>: input_n
[INFO] Matched <MultiplicativeExpression>: input_n
[INFO] Matched <AdditiveExpression>: input_n
[INFO] Matched <Expression>: input_n
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ONE
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: ONE
[INFO] Matched <LeftValue>: ONE
[INFO] Matched <PrimaryExpression>: ONE
[INFO] Matched <UnaryExpression>: ONE
[INFO] Matched <MultiplicativeExpression>: ONE
[INFO] Matched <AdditiveExpression>: ONE
[INFO] Matched <Expression>: ONE
[INFO] Matched <FuncArgList>: input_n, ONE
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: add1(input_n, ONE)
[INFO] Matched <UnaryExpression>: add1(input_n, ONE)
[INFO] Matched <MultiplicativeExpression>: add1(input_n, ONE)
[INFO] Matched <AdditiveExpression>: add1(input_n, ONE)
[INFO] Matched <Expression>: add1(input_n, ONE)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: add1(input_n, ONE);
[INFO] Matched <Statement>: add1(input_n, ONE);
[INFO] Matched <BlockItem>:
add1(input_n, ONE);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: addmmm
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: addmmm
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <FuncArgList>: 1, 2, 3
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: addmmm(1, 2, 3)
[INFO] Matched <UnaryExpression>: addmmm(1, 2, 3)
[INFO] Matched <MultiplicativeExpression>: addmmm(1, 2, 3)
[INFO] Matched <AdditiveExpression>: addmmm(1, 2, 3)
[INFO] Matched <Expression>: addmmm(1, 2, 3)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: addmmm(1, 2, 3);
[INFO] Matched <Statement>: addmmm(1, 2, 3);
[INFO] Matched <BlockItem>:
addmmm(1, 2, 3);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[3]
[INFO] Matched <PrimaryExpression>: var_array[3]
[INFO] Matched <UnaryExpression>: var_array[3]
[INFO] Matched <MultiplicativeExpression>: var_array[3]
[INFO] Matched <AdditiveExpression>: var_array[3]
[INFO] Matched <Expression>: var_array[3]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[3]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[3]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[3]
[INFO] Matched <PrimaryExpression>: var_array[3]
[INFO] Matched <UnaryExpression>: var_array[3]
[INFO] Matched <MultiplicativeExpression>: var_array[3]
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <Expression>: 5
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[5]
[INFO] Matched <PrimaryExpression>: var_array[5]
[INFO] Matched <UnaryExpression>: var_array[5]
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: add
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: add
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: add()
[INFO] Matched <UnaryExpression>: add()
[INFO] Matched <MultiplicativeExpression>: var_array[5] * add()
[INFO] Matched <AdditiveExpression>: var_array[3] - var_array[5] * add()
[INFO] Matched <Expression>: var_array[3] - var_array[5] * add()
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: var_array[3] = var_array[3] - var_array[5] * add();
[INFO] Matched <Statement>: var_array[3] = var_array[3] - var_array[5] * add();
[INFO] Matched <BlockItem>:
var_array[3] = var_array[3] - var_array[5] * add();
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: i
[INFO] Matched <VarDefinition>: i
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int i;
[INFO] Matched <Declaration>: int i;
[INFO] Matched <BlockItem>:
int i;
[INFO] Consumed Token: int
[INFO] Consumed Token: ui
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: ui
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: ui
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: ui
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <UnaryOperatedExpression>: +i
[INFO] Matched <UnaryExpression>: +i
[INFO] Matched <UnaryOperatedExpression>: -+i
[INFO] Matched <UnaryExpression>: -+i
[INFO] Matched <UnaryOperatedExpression>: +-+i
[INFO] Matched <UnaryExpression>: +-+i
[INFO] Matched <MultiplicativeExpression>: +-+i
[INFO] Matched <AdditiveExpression>: +-+i
[INFO] Matched <Expression>: +-+i
[INFO] Matched <ScalarVarInitValue>: +-+i
[INFO] Matched <VarInitValue>: +-+i
[INFO] Matched <VarDefinition>: ui = +-+i
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int ui = +-+i;
[INFO] Matched <Declaration>: int ui = +-+i;
[INFO] Matched <BlockItem>:
int ui = +-+i;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: add
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: add
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: add()
[INFO] Matched <UnaryExpression>: add()
[INFO] Matched <MultiplicativeExpression>: add()
[INFO] Matched <AdditiveExpression>: add()
[INFO] Matched <Expression>: add()
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = add();
[INFO] Matched <Statement>: i = add();
[INFO] Matched <BlockItem>:
i = add();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: add1
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: add1
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <FuncArgList>: 1, 3
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: add1(1, 3)
[INFO] Matched <UnaryExpression>: add1(1, 3)
[INFO] Matched <MultiplicativeExpression>: add1(1, 3)
[INFO] Matched <AdditiveExpression>: add1(1, 3)
[INFO] Matched <Expression>: add1(1, 3)
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = add1(1, 3);
[INFO] Matched <Statement>: i = add1(1, 3);
[INFO] Matched <BlockItem>:
i = add1(1, 3);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[0]
[INFO] Matched <PrimaryExpression>: var_array[0]
[INFO] Matched <UnaryExpression>: var_array[0]
[INFO] Matched <MultiplicativeExpression>: var_array[0]
[INFO] Matched <AdditiveExpression>: i + var_array[0]
[INFO] Matched <Expression>: i + var_array[0]
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (i + var_array[0])
[INFO] Matched <PrimaryExpression>: (i + var_array[0])
[INFO] Matched <UnaryExpression>: (i + var_array[0])
[INFO] Matched <MultiplicativeExpression>: (i + var_array[0])
[INFO] Matched <AdditiveExpression>: (i + var_array[0])
[INFO] Matched <Expression>: (i + var_array[0])
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = (i + var_array[0]);
[INFO] Matched <Statement>: i = (i + var_array[0]);
[INFO] Matched <BlockItem>:
i = (i + var_array[0]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = 0;
[INFO] Matched <Statement>: i = 0;
[INFO] Matched <BlockItem>:
i = 0;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <RelationalExpression>: i
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: 0
[INFO] Matched <EqualityExpression>: i == 0
[INFO] Matched <LogicalAndExpression>: i == 0
[INFO] Matched <LogicalOrExpression>: i == 0
[INFO] Matched <Condition>: i == 0
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <IfStatement>:
if (i == 0) {}  
[INFO] Matched <Statement>:
if (i == 0) {}  
[INFO] Matched <BlockItem>:
if (i == 0) {}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <RelationalExpression>: 1
[INFO] Matched <EqualityExpression>: 1
[INFO] Matched <LogicalAndExpression>: 1
[INFO] Matched <LogicalOrExpression>: 1
[INFO] Matched <Condition>: 1
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[i]
[INFO] Matched <PrimaryExpression>: var_array[i]
[INFO] Matched <UnaryExpression>: var_array[i]
[INFO] Matched <MultiplicativeExpression>: var_array[i]
[INFO] Matched <AdditiveExpression>: var_array[i]
[INFO] Matched <RelationalExpression>: var_array[i]
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <RelationalExpression>: 2
[INFO] Matched <EqualityExpression>: var_array[i] == 2
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[0]
[INFO] Matched <PrimaryExpression>: var_array[0]
[INFO] Matched <UnaryExpression>: var_array[0]
[INFO] Matched <MultiplicativeExpression>: var_array[0]
[INFO] Matched <AdditiveExpression>: var_array[0]
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: var_array[0] > 0
[INFO] Matched <EqualityExpression>: var_array[0] > 0
[INFO] Matched <LogicalAndExpression>: var_array[i] == 2 && var_array[0] > 0
[INFO] Matched <LogicalOrExpression>: var_array[i] == 2 && var_array[0] > 0
[INFO] Matched <Condition>: var_array[i] == 2 && var_array[0] > 0
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[i]
[INFO] Matched <PrimaryExpression>: var_array[i]
[INFO] Matched <UnaryExpression>: var_array[i]
[INFO] Matched <MultiplicativeExpression>: var_array[i]
[INFO] Matched <AdditiveExpression>: var_array[i]
[INFO] Matched <Expression>: var_array[i]
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", var_array[i]);
[INFO] Matched <Statement>: printf("%d\n", var_array[i]);
[INFO] Matched <BlockItem>:
printf("%d\n", var_array[i]);
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("%d\n", var_array[i]);
}
[INFO] Matched <Statement>:
{
    printf("%d\n", var_array[i]);
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <IfStatement>:
if (var_array[i] == 2 && var_array[0] > 0) {
    printf("%d\n", var_array[i]);
} else ;
[INFO] Matched <Statement>:
if (var_array[i] == 2 && var_array[0] > 0) {
    printf("%d\n", var_array[i]);
} else ;
[INFO] Matched <BlockItem>:
if (var_array[i] == 2 && var_array[0] > 0) {
    printf("%d\n", var_array[i]);
} else ;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[i]
[INFO] Matched <PrimaryExpression>: var_array[i]
[INFO] Matched <UnaryExpression>: var_array[i]
[INFO] Matched <MultiplicativeExpression>: var_array[i]
[INFO] Matched <AdditiveExpression>: var_array[i]
[INFO] Matched <RelationalExpression>: var_array[i]
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <RelationalExpression>: 2
[INFO] Matched <EqualityExpression>: var_array[i] != 2
[INFO] Matched <LogicalAndExpression>: var_array[i] != 2
[INFO] Matched <LogicalOrExpression>: var_array[i] != 2
[INFO] Matched <Condition>: var_array[i] != 2
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d is not 2\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[i]
[INFO] Matched <PrimaryExpression>: var_array[i]
[INFO] Matched <UnaryExpression>: var_array[i]
[INFO] Matched <MultiplicativeExpression>: var_array[i]
[INFO] Matched <AdditiveExpression>: var_array[i]
[INFO] Matched <Expression>: var_array[i]
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d is not 2\n", var_array[i]);
[INFO] Matched <Statement>: printf("%d is not 2\n", var_array[i]);
[INFO] Matched <BlockItem>:
printf("%d is not 2\n", var_array[i]);
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("%d is not 2\n", var_array[i]);
}
[INFO] Matched <Statement>:
{
    printf("%d is not 2\n", var_array[i]);
}
[INFO] Matched <IfStatement>:
if (var_array[i] != 2) {
    printf("%d is not 2\n", var_array[i]);
}  
[INFO] Matched <Statement>:
if (var_array[i] != 2) {
    printf("%d is not 2\n", var_array[i]);
}  
[INFO] Matched <BlockItem>:
if (var_array[i] != 2) {
    printf("%d is not 2\n", var_array[i]);
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "xxxx\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("xxxx\n");
[INFO] Matched <Statement>: printf("xxxx\n");
[INFO] Matched <BlockItem>:
printf("xxxx\n");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: i + 1
[INFO] Matched <Expression>: i + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = i + 1;
[INFO] Matched <Statement>: i = i + 1;
[INFO] Matched <BlockItem>:
i = i + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[i]
[INFO] Matched <PrimaryExpression>: var_array[i]
[INFO] Matched <UnaryExpression>: var_array[i]
[INFO] Matched <UnaryOperatedExpression>: -var_array[i]
[INFO] Matched <UnaryExpression>: -var_array[i]
[INFO] Matched <MultiplicativeExpression>: -var_array[i]
[INFO] Matched <AdditiveExpression>: -var_array[i]
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: -var_array[i] >= 0
[INFO] Matched <EqualityExpression>: -var_array[i] >= 0
[INFO] Matched <LogicalAndExpression>: -var_array[i] >= 0
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[0]
[INFO] Matched <PrimaryExpression>: var_array[0]
[INFO] Matched <UnaryExpression>: var_array[0]
[INFO] Matched <MultiplicativeExpression>: var_array[0]
[INFO] Matched <AdditiveExpression>: var_array[0]
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: var_array[0] <= 0
[INFO] Matched <EqualityExpression>: var_array[0] <= 0
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <RelationalExpression>: 1
[INFO] Matched <EqualityExpression>: 1
[INFO] Matched <LogicalAndExpression>: var_array[0] <= 0 && 1
[INFO] Matched <LogicalOrExpression>: -var_array[i] >= 0 || var_array[0] <= 0 && 1
[INFO] Matched <Condition>: -var_array[i] >= 0 || var_array[0] <= 0 && 1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[i]
[INFO] Matched <PrimaryExpression>: var_array[i]
[INFO] Matched <UnaryExpression>: var_array[i]
[INFO] Matched <MultiplicativeExpression>: var_array[i]
[INFO] Matched <AdditiveExpression>: var_array[i]
[INFO] Matched <Expression>: var_array[i]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[i]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[i]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: var_array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: var_array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: var_array[i]
[INFO] Matched <PrimaryExpression>: var_array[i]
[INFO] Matched <UnaryExpression>: var_array[i]
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: var_array[i] * 3
[INFO] Matched <AdditiveExpression>: var_array[i] * 3
[INFO] Matched <Expression>: var_array[i] * 3
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: var_array[i] = var_array[i] * 3;
[INFO] Matched <Statement>: var_array[i] = var_array[i] * 3;
[INFO] Matched <BlockItem>:
var_array[i] = var_array[i] * 3;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    var_array[i] = var_array[i] * 3;
    break;
}
[INFO] Matched <Statement>:
{
    var_array[i] = var_array[i] * 3;
    break;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ContinueStatement>.
[INFO] Consumed Token: continue
[INFO] Consumed Token: ;
[INFO] Matched <ContinueStatement>: continue;
[INFO] Matched <Statement>: continue;
[INFO] Matched <BlockItem>:
continue;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    continue;
}
[INFO] Matched <Statement>:
{
    continue;
}
[INFO] Matched <IfStatement>:
if (-var_array[i] >= 0 || var_array[0] <= 0 && 1) {
    var_array[i] = var_array[i] * 3;
    break;
} else {
    continue;
}
[INFO] Matched <Statement>:
if (-var_array[i] >= 0 || var_array[0] <= 0 && 1) {
    var_array[i] = var_array[i] * 3;
    break;
} else {
    continue;
}
[INFO] Matched <BlockItem>:
if (-var_array[i] >= 0 || var_array[0] <= 0 && 1) {
    var_array[i] = var_array[i] * 3;
    break;
} else {
    continue;
}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (var_array[i] == 2 && var_array[0] > 0) {
        printf("%d\n", var_array[i]);
    } else ;
    if (var_array[i] != 2) {
        printf("%d is not 2\n", var_array[i]);
    }  
    printf("xxxx\n");
    i = i + 1;
    if (-var_array[i] >= 0 || var_array[0] <= 0 && 1) {
        var_array[i] = var_array[i] * 3;
        break;
    } else {
        continue;
    }
}
[INFO] Matched <Statement>:
{
    if (var_array[i] == 2 && var_array[0] > 0) {
        printf("%d\n", var_array[i]);
    } else ;
    if (var_array[i] != 2) {
        printf("%d is not 2\n", var_array[i]);
    }  
    printf("xxxx\n");
    i = i + 1;
    if (-var_array[i] >= 0 || var_array[0] <= 0 && 1) {
        var_array[i] = var_array[i] * 3;
        break;
    } else {
        continue;
    }
}
[INFO] Matched <ForStatementSelection>:
for (; 1; ) {
    if (var_array[i] == 2 && var_array[0] > 0) {
        printf("%d\n", var_array[i]);
    } else ;
    if (var_array[i] != 2) {
        printf("%d is not 2\n", var_array[i]);
    }  
    printf("xxxx\n");
    i = i + 1;
    if (-var_array[i] >= 0 || var_array[0] <= 0 && 1) {
        var_array[i] = var_array[i] * 3;
        break;
    } else {
        continue;
    }
}
[INFO] Matched <Statement>:
for (; 1; ) {
    if (var_array[i] == 2 && var_array[0] > 0) {
        printf("%d\n", var_array[i]);
    } else ;
    if (var_array[i] != 2) {
        printf("%d is not 2\n", var_array[i]);
    }  
    printf("xxxx\n");
    i = i + 1;
    if (-var_array[i] >= 0 || var_array[0] <= 0 && 1) {
        var_array[i] = var_array[i] * 3;
        break;
    } else {
        continue;
    }
}
[INFO] Matched <BlockItem>:
for (; 1; ) {
    if (var_array[i] == 2 && var_array[0] > 0) {
        printf("%d\n", var_array[i]);
    } else ;
    if (var_array[i] != 2) {
        printf("%d is not 2\n", var_array[i]);
    }  
    printf("xxxx\n");
    i = i + 1;
    if (-var_array[i] >= 0 || var_array[0] <= 0 && 1) {
        var_array[i] = var_array[i] * 3;
        break;
    } else {
        continue;
    }
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: printarr
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: printarr
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: array[0]
[INFO] Matched <PrimaryExpression>: array[0]
[INFO] Matched <UnaryExpression>: array[0]
[INFO] Matched <MultiplicativeExpression>: array[0]
[INFO] Matched <AdditiveExpression>: array[0]
[INFO] Matched <Expression>: array[0]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: array
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: array[1]
[INFO] Matched <PrimaryExpression>: array[1]
[INFO] Matched <UnaryExpression>: array[1]
[INFO] Matched <MultiplicativeExpression>: array[1]
[INFO] Matched <AdditiveExpression>: array[1]
[INFO] Matched <Expression>: array[1]
[INFO] Matched <FuncArgList>: array[0], array[1]
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: printarr(array[0], array[1])
[INFO] Matched <UnaryExpression>: printarr(array[0], array[1])
[INFO] Matched <MultiplicativeExpression>: printarr(array[0], array[1])
[INFO] Matched <AdditiveExpression>: printarr(array[0], array[1])
[INFO] Matched <Expression>: printarr(array[0], array[1])
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: printarr(array[0], array[1]);
[INFO] Matched <Statement>: printarr(array[0], array[1]);
[INFO] Matched <BlockItem>:
printarr(array[0], array[1]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: printarrrr
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: printarrrr
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: array
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: array
[INFO] Matched <LeftValue>: array
[INFO] Matched <PrimaryExpression>: array
[INFO] Matched <UnaryExpression>: array
[INFO] Matched <MultiplicativeExpression>: array
[INFO] Matched <AdditiveExpression>: array
[INFO] Matched <Expression>: array
[INFO] Matched <FuncArgList>: array
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: printarrrr(array)
[INFO] Matched <UnaryExpression>: printarrrr(array)
[INFO] Matched <MultiplicativeExpression>: printarrrr(array)
[INFO] Matched <AdditiveExpression>: printarrrr(array)
[INFO] Matched <Expression>: printarrrr(array)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: printarrrr(array);
[INFO] Matched <Statement>: printarrrr(array);
[INFO] Matched <BlockItem>:
printarrrr(array);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int var_array[7] = {1, 2, 3, 4, 5, 7, 8};
    const int c_array[2] = {1 + 1, 3 + 3};
    int var_AAA[1] = {1};
    int var_2dim[2][2] = {{1, 2}, {var_array[0], var_array[1]}};
    const int ONE = 1;
    if (0 && 1) {
        var_array[1] = 3;
    } else if (1 || !ONE) {
        if (var_array[0] + 99 < 99) {
            var_array[1] = 99 / add();
        }  
    }  
    add1(var_array[4 % 3], var_array[2]);
    int input_n, input_m;
    input_n = getint();
    add1(input_n, +array[0][1]);
    add1(-input_n, array[0][1]);
    add1(input_n, ONE);
    addmmm(1, 2, 3);
    var_array[3] = var_array[3] - var_array[5] * add();
    int i;
    int ui = +-+i;
    i = add();
    i = add1(1, 3);
    i = (i + var_array[0]);
    i = 0;
    if (i == 0) {}  
    for (; 1; ) {
        if (var_array[i] == 2 && var_array[0] > 0) {
            printf("%d\n", var_array[i]);
        } else ;
        if (var_array[i] != 2) {
            printf("%d is not 2\n", var_array[i]);
        }  
        printf("xxxx\n");
        i = i + 1;
        if (-var_array[i] >= 0 || var_array[0] <= 0 && 1) {
            var_array[i] = var_array[i] * 3;
            break;
        } else {
            continue;
        }
    }
    printarr(array[0], array[1]);
    printarrrr(array);
    return 0;
}
[INFO] Matched <MainFuncDefinition>:
int main() {
    int var_array[7] = {1, 2, 3, 4, 5, 7, 8};
    const int c_array[2] = {1 + 1, 3 + 3};
    int var_AAA[1] = {1};
    int var_2dim[2][2] = {{1, 2}, {var_array[0], var_array[1]}};
    const int ONE = 1;
    if (0 && 1) {
        var_array[1] = 3;
    } else if (1 || !ONE) {
        if (var_array[0] + 99 < 99) {
            var_array[1] = 99 / add();
        }  
    }  
    add1(var_array[4 % 3], var_array[2]);
    int input_n, input_m;
    input_n = getint();
    add1(input_n, +array[0][1]);
    add1(-input_n, array[0][1]);
    add1(input_n, ONE);
    addmmm(1, 2, 3);
    var_array[3] = var_array[3] - var_array[5] * add();
    int i;
    int ui = +-+i;
    i = add();
    i = add1(1, 3);
    i = (i + var_array[0]);
    i = 0;
    if (i == 0) {}  
    for (; 1; ) {
        if (var_array[i] == 2 && var_array[0] > 0) {
            printf("%d\n", var_array[i]);
        } else ;
        if (var_array[i] != 2) {
            printf("%d is not 2\n", var_array[i]);
        }  
        printf("xxxx\n");
        i = i + 1;
        if (-var_array[i] >= 0 || var_array[0] <= 0 && 1) {
            var_array[i] = var_array[i] * 3;
            break;
        } else {
            continue;
        }
    }
    printarr(array[0], array[1]);
    printarrrr(array);
    return 0;
}
[INFO] Matched <CompileUnit>:
int u = 3 % 3, v = 6, s = 9;
int dim_2[3][3];
int array[2][2] = {{1, 2}, {2, 4}};

int add_three(int a, int arr[], int b) {
    return a + arr[0] + b;
}

int add1(int a, int b) {
    int ans;
    const int AAA = 3, BBB_ = 3, CCC = 9;
    const int a1 = 12, a2 = 22;
    ans = a + b;
    printf("a = %d\n", a);
    printf("b = %d\n", b);
    return ans;
}

int addmmm(int a, int b, int c) {
    return a + b + c;
}

int add() {
    return 99;
}

void printarrrr(int arr[][2]) {
    printf("first: %d", arr[0][0]);
    return;
}

void printarr(int arr[], int arr2[]) {
    printf("first : %d", arr[0]);
}

int main() {
    int var_array[7] = {1, 2, 3, 4, 5, 7, 8};
    const int c_array[2] = {1 + 1, 3 + 3};
    int var_AAA[1] = {1};
    int var_2dim[2][2] = {{1, 2}, {var_array[0], var_array[1]}};
    const int ONE = 1;
    if (0 && 1) {
        var_array[1] = 3;
    } else if (1 || !ONE) {
        if (var_array[0] + 99 < 99) {
            var_array[1] = 99 / add();
        }  
    }  
    add1(var_array[4 % 3], var_array[2]);
    int input_n, input_m;
    input_n = getint();
    add1(input_n, +array[0][1]);
    add1(-input_n, array[0][1]);
    add1(input_n, ONE);
    addmmm(1, 2, 3);
    var_array[3] = var_array[3] - var_array[5] * add();
    int i;
    int ui = +-+i;
    i = add();
    i = add1(1, 3);
    i = (i + var_array[0]);
    i = 0;
    if (i == 0) {}  
    for (; 1; ) {
        if (var_array[i] == 2 && var_array[0] > 0) {
            printf("%d\n", var_array[i]);
        } else ;
        if (var_array[i] != 2) {
            printf("%d is not 2\n", var_array[i]);
        }  
        printf("xxxx\n");
        i = i + 1;
        if (-var_array[i] >= 0 || var_array[0] <= 0 && 1) {
            var_array[i] = var_array[i] * 3;
            break;
        } else {
            continue;
        }
    }
    printarr(array[0], array[1]);
    printarrrr(array);
    return 0;
}
[INFO] Test 14
[INFO] Matching <CompileUnit>
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: N
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 510
[INFO] Matched <Number>: 510
[INFO] Matched <PrimaryExpression>: 510
[INFO] Matched <UnaryExpression>: 510
[INFO] Matched <MultiplicativeExpression>: 510
[INFO] Matched <AdditiveExpression>: 510
[INFO] Matched <ConstExpression>: 510
[INFO] Matched <ScalarConstInitValue>: 510
[INFO] Matched <ConstInitValue>: 510
[INFO] Matched <ConstDefinition>.N = 510
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: M
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 520
[INFO] Matched <Number>: 520
[INFO] Matched <PrimaryExpression>: 520
[INFO] Matched <UnaryExpression>: 520
[INFO] Matched <UnaryOperatedExpression>: -520
[INFO] Matched <UnaryExpression>: -520
[INFO] Matched <MultiplicativeExpression>: -520
[INFO] Matched <AdditiveExpression>: -520
[INFO] Matched <ConstExpression>: -520
[INFO] Matched <ScalarConstInitValue>: -520
[INFO] Matched <ConstInitValue>: -520
[INFO] Matched <ConstDefinition>.M = -520
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: KK
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: -1
[INFO] Matched <UnaryExpression>: -1
[INFO] Matched <MultiplicativeExpression>: -1
[INFO] Matched <AdditiveExpression>: -1
[INFO] Matched <ConstExpression>: -1
[INFO] Matched <ScalarConstInitValue>: -1
[INFO] Matched <ConstInitValue>: -1
[INFO] Matched <ConstDefinition>.KK = -1
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int N = 510, M = -520, KK = -1;
[INFO] Matched <Declaration>: const int N = 510, M = -520, KK = -1;
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: NN
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 55
[INFO] Matched <Number>: 55
[INFO] Matched <PrimaryExpression>: 55
[INFO] Matched <UnaryExpression>: 55
[INFO] Matched <MultiplicativeExpression>: 55
[INFO] Matched <AdditiveExpression>: 55
[INFO] Matched <ConstExpression>: 55
[INFO] Matched <ScalarConstInitValue>: 55
[INFO] Matched <ConstInitValue>: 55
[INFO] Matched <ConstDefinition>.NN = 55
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: MM
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2222
[INFO] Matched <Number>: 2222
[INFO] Matched <PrimaryExpression>: 2222
[INFO] Matched <UnaryExpression>: 2222
[INFO] Matched <MultiplicativeExpression>: 2222
[INFO] Matched <AdditiveExpression>: 2222
[INFO] Matched <ConstExpression>: 2222
[INFO] Matched <ScalarConstInitValue>: 2222
[INFO] Matched <ConstInitValue>: 2222
[INFO] Matched <ConstDefinition>.MM = 2222
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int NN = 55, MM = 2222;
[INFO] Matched <Declaration>: const int NN = 55, MM = 2222;
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: K
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 24
[INFO] Matched <Number>: 24
[INFO] Matched <PrimaryExpression>: 24
[INFO] Matched <UnaryExpression>: 24
[INFO] Matched <UnaryOperatedExpression>: -24
[INFO] Matched <UnaryExpression>: -24
[INFO] Matched <MultiplicativeExpression>: -24
[INFO] Matched <AdditiveExpression>: -24
[INFO] Matched <ConstExpression>: -24
[INFO] Matched <ScalarConstInitValue>: -24
[INFO] Matched <ConstInitValue>: -24
[INFO] Matched <ConstDefinition>.K = -24
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int K = -24;
[INFO] Matched <Declaration>: const int K = -24;
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: a_3
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <ConstExpression>: 4
[INFO] Matched <ScalarConstInitValue>: 4
[INFO] Matched <ConstInitValue>: 4
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <ConstExpression>: 5
[INFO] Matched <ScalarConstInitValue>: 5
[INFO] Matched <ConstInitValue>: 5
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {4, 5}
[INFO] Matched <ConstInitValue>: {4, 5}
[INFO] Matched <ConstDefinition>.a_3[2] = {4, 5}
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: a_4
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 899
[INFO] Matched <Number>: 899
[INFO] Matched <PrimaryExpression>: 899
[INFO] Matched <UnaryExpression>: 899
[INFO] Matched <MultiplicativeExpression>: 899
[INFO] Matched <AdditiveExpression>: 899
[INFO] Matched <ConstExpression>: 899
[INFO] Matched <ScalarConstInitValue>: 899
[INFO] Matched <ConstInitValue>: 899
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 99
[INFO] Matched <Number>: 99
[INFO] Matched <PrimaryExpression>: 99
[INFO] Matched <UnaryExpression>: 99
[INFO] Matched <MultiplicativeExpression>: 99
[INFO] Matched <AdditiveExpression>: 99
[INFO] Matched <ConstExpression>: 99
[INFO] Matched <ScalarConstInitValue>: 99
[INFO] Matched <ConstInitValue>: 99
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {899, 99}
[INFO] Matched <ConstInitValue>: {899, 99}
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1222
[INFO] Matched <Number>: 1222
[INFO] Matched <PrimaryExpression>: 1222
[INFO] Matched <UnaryExpression>: 1222
[INFO] Matched <MultiplicativeExpression>: 1222
[INFO] Matched <AdditiveExpression>: 1222
[INFO] Matched <ConstExpression>: 1222
[INFO] Matched <ScalarConstInitValue>: 1222
[INFO] Matched <ConstInitValue>: 1222
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 25555
[INFO] Matched <Number>: 25555
[INFO] Matched <PrimaryExpression>: 25555
[INFO] Matched <UnaryExpression>: 25555
[INFO] Matched <MultiplicativeExpression>: 25555
[INFO] Matched <AdditiveExpression>: 25555
[INFO] Matched <ConstExpression>: 25555
[INFO] Matched <ScalarConstInitValue>: 25555
[INFO] Matched <ConstInitValue>: 25555
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {1222, 25555}
[INFO] Matched <ConstInitValue>: {1222, 25555}
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {{899, 99}, {1222, 25555}}
[INFO] Matched <ConstInitValue>: {{899, 99}, {1222, 25555}}
[INFO] Matched <ConstDefinition>.a_4[2][2] = {{899, 99}, {1222, 25555}}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int a_3[2] = {4, 5}, a_4[2][2] = {{899, 99}, {1222, 25555}};
[INFO] Matched <Declaration>: const int a_3[2] = {4, 5}, a_4[2][2] = {{899, 99}, {1222, 25555}};
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: a_1
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Matched <ScalarConstInitValue>: 1
[INFO] Matched <ConstInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {1, 2}
[INFO] Matched <ConstInitValue>: {1, 2}
[INFO] Matched <ConstDefinition>.a_1[2] = {1, 2}
[INFO] Consumed Token: ,
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: a_2
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <ConstExpression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ArrayConstInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Matched <ScalarConstInitValue>: 2
[INFO] Matched <ConstInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {2}
[INFO] Matched <ConstInitValue>: {2}
[INFO] Consumed Token: }
[INFO] Matched <ArrayConstInitValue>: {{2}}
[INFO] Matched <ConstInitValue>: {{2}}
[INFO] Matched <ConstDefinition>.a_2[1][1] = {{2}}
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int a_1[2] = {1, 2}, a_2[1][1] = {{2}};
[INFO] Matched <Declaration>: const int a_1[2] = {1, 2}, a_2[1][1] = {{2}};
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 510
[INFO] Matched <Number>: 510
[INFO] Matched <PrimaryExpression>: 510
[INFO] Matched <UnaryExpression>: 510
[INFO] Matched <MultiplicativeExpression>: 510
[INFO] Matched <AdditiveExpression>: 510
[INFO] Matched <ConstExpression>: 510
[INFO] Consumed Token: ]
[INFO] Matched <VarDefinition>: a[510]
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: b
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 510
[INFO] Matched <Number>: 510
[INFO] Matched <PrimaryExpression>: 510
[INFO] Matched <UnaryExpression>: 510
[INFO] Matched <MultiplicativeExpression>: 510
[INFO] Matched <AdditiveExpression>: 510
[INFO] Matched <ConstExpression>: 510
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 510
[INFO] Matched <Number>: 510
[INFO] Matched <PrimaryExpression>: 510
[INFO] Matched <UnaryExpression>: 510
[INFO] Matched <MultiplicativeExpression>: 510
[INFO] Matched <AdditiveExpression>: 510
[INFO] Matched <ConstExpression>: 510
[INFO] Consumed Token: ]
[INFO] Matched <VarDefinition>: b[510][510]
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: n
[INFO] Matched <VarDefinition>: n
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: m
[INFO] Matched <VarDefinition>: m
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int a[510], b[510][510], n, m;
[INFO] Matched <Declaration>: int a[510], b[510][510], n, m;
[INFO] Consumed Token: int
[INFO] Consumed Token: xxxx
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: xxxx
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: xxxx
[INFO] Matched <VarDefinition>: xxxx
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: yyyy
[INFO] Matched <VarDefinition>: yyyy
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int xxxx, yyyy;
[INFO] Matched <Declaration>: int xxxx, yyyy;
[INFO] Consumed Token: int
[INFO] Consumed Token: t
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: t
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: t
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1234
[INFO] Matched <Number>: 1234
[INFO] Matched <PrimaryExpression>: 1234
[INFO] Matched <UnaryExpression>: 1234
[INFO] Matched <MultiplicativeExpression>: 1234
[INFO] Matched <AdditiveExpression>: 1234
[INFO] Matched <Expression>: 1234
[INFO] Matched <ScalarVarInitValue>: 1234
[INFO] Matched <VarInitValue>: 1234
[INFO] Matched <VarDefinition>: t = 1234
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: u
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2345
[INFO] Matched <Number>: 2345
[INFO] Matched <PrimaryExpression>: 2345
[INFO] Matched <UnaryExpression>: 2345
[INFO] Matched <MultiplicativeExpression>: 2345
[INFO] Matched <AdditiveExpression>: 2345
[INFO] Matched <Expression>: 2345
[INFO] Matched <ScalarVarInitValue>: 2345
[INFO] Matched <VarInitValue>: 2345
[INFO] Matched <VarDefinition>: u = 2345
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int t = 1234, u = 2345;
[INFO] Matched <Declaration>: int t = 1234, u = 2345;
[INFO] Consumed Token: int
[INFO] Consumed Token: d
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: d
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: d
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 1 + 3
[INFO] Matched <Expression>: 1 + 3
[INFO] Matched <ScalarVarInitValue>: 1 + 3
[INFO] Matched <VarInitValue>: 1 + 3
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 2 - 4
[INFO] Matched <Expression>: 2 - 4
[INFO] Matched <ScalarVarInitValue>: 2 - 4
[INFO] Matched <VarInitValue>: 2 - 4
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1 + 3, 2 - 4}
[INFO] Matched <VarInitValue>: {1 + 3, 2 - 4}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 3 * 5
[INFO] Matched <AdditiveExpression>: 3 * 5
[INFO] Matched <Expression>: 3 * 5
[INFO] Matched <ScalarVarInitValue>: 3 * 5
[INFO] Matched <VarInitValue>: 3 * 5
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 4 * 1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 4 * 1 + 2
[INFO] Matched <Expression>: 4 * 1 + 2
[INFO] Matched <ScalarVarInitValue>: 4 * 1 + 2
[INFO] Matched <VarInitValue>: 4 * 1 + 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {3 * 5, 4 * 1 + 2}
[INFO] Matched <VarInitValue>: {3 * 5, 4 * 1 + 2}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{1 + 3, 2 - 4}, {3 * 5, 4 * 1 + 2}}
[INFO] Matched <VarInitValue>: {{1 + 3, 2 - 4}, {3 * 5, 4 * 1 + 2}}
[INFO] Matched <VarDefinition>: d[2][2] = {{1 + 3, 2 - 4}, {3 * 5, 4 * 1 + 2}}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int d[2][2] = {{1 + 3, 2 - 4}, {3 * 5, 4 * 1 + 2}};
[INFO] Matched <Declaration>: int d[2][2] = {{1 + 3, 2 - 4}, {3 * 5, 4 * 1 + 2}};
[INFO] Consumed Token: int
[INFO] Consumed Token: tmp_0
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: tmp_0
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: tmp_0
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <ConstExpression>: 5
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <Expression>: 4
[INFO] Matched <ScalarVarInitValue>: 4
[INFO] Matched <VarInitValue>: 4
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {0, 1, 2, 3, 4}
[INFO] Matched <VarInitValue>: {0, 1, 2, 3, 4}
[INFO] Matched <VarDefinition>: tmp_0[5] = {0, 1, 2, 3, 4}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int tmp_0[5] = {0, 1, 2, 3, 4};
[INFO] Matched <Declaration>: int tmp_0[5] = {0, 1, 2, 3, 4};
[INFO] Consumed Token: void
[INFO] Consumed Token: pr
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: pr
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Failed to match <BasicType>.
[INFO] Failed to match <FuncParam>.
[INFO] Failed to match <FuncParamList>.
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return;
}
[INFO] Matched <FuncDefinition>:
void pr() {
    return;
}
[INFO] Consumed Token: void
[INFO] Consumed Token: nonsense
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: nonsense
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Failed to match <BasicType>.
[INFO] Failed to match <FuncParam>.
[INFO] Failed to match <FuncParamList>.
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    ;
    ;
    return;
}
[INFO] Matched <FuncDefinition>:
void nonsense() {
    ;
    ;
    return;
}
[INFO] Consumed Token: void
[INFO] Consumed Token: matrix
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: matrix
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Failed to match <BasicType>.
[INFO] Failed to match <FuncParam>.
[INFO] Failed to match <FuncParamList>.
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: m
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: m
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: m
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: m
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <ConstExpression>: 4
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: -1
[INFO] Matched <UnaryExpression>: -1
[INFO] Matched <MultiplicativeExpression>: -1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 3 * 4 / 5 % 6
[INFO] Matched <AdditiveExpression>: -1 + 2 - 3 * 4 / 5 % 6
[INFO] Matched <Expression>: -1 + 2 - 3 * 4 / 5 % 6
[INFO] Matched <ScalarVarInitValue>: -1 + 2 - 3 * 4 / 5 % 6
[INFO] Matched <VarInitValue>: -1 + 2 - 3 * 4 / 5 % 6
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: -1
[INFO] Matched <UnaryExpression>: -1
[INFO] Matched <MultiplicativeExpression>: -1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: -1 + 2 + 3 + 4
[INFO] Matched <Expression>: -1 + 2 + 3 + 4
[INFO] Matched <ScalarVarInitValue>: -1 + 2 + 3 + 4
[INFO] Matched <VarInitValue>: -1 + 2 + 3 + 4
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 1 - 2
[INFO] Matched <Expression>: 1 - 2
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (1 - 2)
[INFO] Matched <PrimaryExpression>: (1 - 2)
[INFO] Matched <UnaryExpression>: (1 - 2)
[INFO] Matched <MultiplicativeExpression>: (1 - 2)
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: (1 - 2) - 3 - 4
[INFO] Matched <Expression>: (1 - 2) - 3 - 4
[INFO] Matched <ScalarVarInitValue>: (1 - 2) - 3 - 4
[INFO] Matched <VarInitValue>: (1 - 2) - 3 - 4
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 1 * 2 * 3 * 4
[INFO] Matched <AdditiveExpression>: 1 * 2 * 3 * 4
[INFO] Matched <Expression>: 1 * 2 * 3 * 4
[INFO] Matched <ScalarVarInitValue>: 1 * 2 * 3 * 4
[INFO] Matched <VarInitValue>: 1 * 2 * 3 * 4
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {-1 + 2 - 3 * 4 / 5 % 6, -1 + 2 + 3 + 4, (1 - 2) - 3 - 4, 1 * 2 * 3 * 4}
[INFO] Matched <VarInitValue>: {-1 + 2 - 3 * 4 / 5 % 6, -1 + 2 + 3 + 4, (1 - 2) - 3 - 4, 1 * 2 * 3 * 4}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 100
[INFO] Matched <Number>: 100
[INFO] Matched <PrimaryExpression>: 100
[INFO] Matched <UnaryExpression>: 100
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: -1
[INFO] Matched <UnaryExpression>: -1
[INFO] Matched <MultiplicativeExpression>: -1
[INFO] Matched <AdditiveExpression>: -1
[INFO] Matched <Expression>: -1
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (-1)
[INFO] Matched <PrimaryExpression>: (-1)
[INFO] Matched <UnaryExpression>: (-1)
[INFO] Matched <MultiplicativeExpression>: 100 / 10 / 10 * (-1)
[INFO] Matched <AdditiveExpression>: 100 / 10 / 10 * (-1)
[INFO] Matched <Expression>: 100 / 10 / 10 * (-1)
[INFO] Matched <ScalarVarInitValue>: 100 / 10 / 10 * (-1)
[INFO] Matched <VarInitValue>: 100 / 10 / 10 * (-1)
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 1 - 2
[INFO] Matched <Expression>: 1 - 2
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (1 - 2)
[INFO] Matched <PrimaryExpression>: (1 - 2)
[INFO] Matched <UnaryExpression>: (1 - 2)
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 3 + 5
[INFO] Matched <Expression>: 3 + 5
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (3 + 5)
[INFO] Matched <PrimaryExpression>: (3 + 5)
[INFO] Matched <UnaryExpression>: (3 + 5)
[INFO] Matched <MultiplicativeExpression>: (1 - 2) * (3 + 5)
[INFO] Matched <AdditiveExpression>: (1 - 2) * (3 + 5)
[INFO] Matched <Expression>: (1 - 2) * (3 + 5)
[INFO] Matched <ScalarVarInitValue>: (1 - 2) * (3 + 5)
[INFO] Matched <VarInitValue>: (1 - 2) * (3 + 5)
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {100 / 10 / 10 * (-1), (1 - 2) * (3 + 5), 1, 2}
[INFO] Matched <VarInitValue>: {100 / 10 / 10 * (-1), (1 - 2) * (3 + 5), 1, 2}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{-1 + 2 - 3 * 4 / 5 % 6, -1 + 2 + 3 + 4, (1 - 2) - 3 - 4, 1 * 2 * 3 * 4}, {100 / 10 / 10 * (-1), (1 - 2) * (3 + 5), 1, 2}}
[INFO] Matched <VarInitValue>: {{-1 + 2 - 3 * 4 / 5 % 6, -1 + 2 + 3 + 4, (1 - 2) - 3 - 4, 1 * 2 * 3 * 4}, {100 / 10 / 10 * (-1), (1 - 2) * (3 + 5), 1, 2}}
[INFO] Matched <VarDefinition>: m[2][4] = {{-1 + 2 - 3 * 4 / 5 % 6, -1 + 2 + 3 + 4, (1 - 2) - 3 - 4, 1 * 2 * 3 * 4}, {100 / 10 / 10 * (-1), (1 - 2) * (3 + 5), 1, 2}}
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: m1
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <UnaryOperatedExpression>: -2
[INFO] Matched <UnaryExpression>: -2
[INFO] Matched <MultiplicativeExpression>: -2
[INFO] Matched <AdditiveExpression>: -2
[INFO] Matched <Expression>: -2
[INFO] Matched <ScalarVarInitValue>: -2
[INFO] Matched <VarInitValue>: -2
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, -2, 3}
[INFO] Matched <VarInitValue>: {1, -2, 3}
[INFO] Matched <VarDefinition>: m1[3] = {1, -2, 3}
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: m2
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <VarDefinition>: m2[2][2]
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int m[2][4] = {{-1 + 2 - 3 * 4 / 5 % 6, -1 + 2 + 3 + 4, (1 - 2) - 3 - 4, 1 * 2 * 3 * 4}, {100 / 10 / 10 * (-1), (1 - 2) * (3 + 5), 1, 2}}, m1[3] = {1, -2, 3}, m2[2][2];
[INFO] Matched <Declaration>: int m[2][4] = {{-1 + 2 - 3 * 4 / 5 % 6, -1 + 2 + 3 + 4, (1 - 2) - 3 - 4, 1 * 2 * 3 * 4}, {100 / 10 / 10 * (-1), (1 - 2) * (3 + 5), 1, 2}}, m1[3] = {1, -2, 3}, m2[2][2];
[INFO] Matched <BlockItem>:
int m[2][4] = {{-1 + 2 - 3 * 4 / 5 % 6, -1 + 2 + 3 + 4, (1 - 2) - 3 - 4, 1 * 2 * 3 * 4}, {100 / 10 / 10 * (-1), (1 - 2) * (3 + 5), 1, 2}}, m1[3] = {1, -2, 3}, m2[2][2];
[INFO] Consumed Token: int
[INFO] Consumed Token: tu
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: tu
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: tu
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: tu
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: t
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: t
[INFO] Matched <LeftValue>: t
[INFO] Matched <PrimaryExpression>: t
[INFO] Matched <UnaryExpression>: t
[INFO] Matched <MultiplicativeExpression>: t
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: u
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: u
[INFO] Matched <LeftValue>: u
[INFO] Matched <PrimaryExpression>: u
[INFO] Matched <UnaryExpression>: u
[INFO] Matched <MultiplicativeExpression>: u
[INFO] Matched <AdditiveExpression>: t + u
[INFO] Matched <Expression>: t + u
[INFO] Matched <ScalarVarInitValue>: t + u
[INFO] Matched <VarInitValue>: t + u
[INFO] Matched <VarDefinition>: tu = t + u
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int tu = t + u;
[INFO] Matched <Declaration>: int tu = t + u;
[INFO] Matched <BlockItem>:
int tu = t + u;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: tu
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: tu
[INFO] Matched <LeftValue>: tu
[INFO] Matched <PrimaryExpression>: tu
[INFO] Matched <UnaryExpression>: tu
[INFO] Matched <MultiplicativeExpression>: tu
[INFO] Matched <AdditiveExpression>: tu
[INFO] Matched <Expression>: tu
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: tu
[INFO] Matched <LeftValue>: tu
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: tu
[INFO] Matched <LeftValue>: tu
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: t
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: t
[INFO] Matched <LeftValue>: t
[INFO] Matched <PrimaryExpression>: t
[INFO] Matched <UnaryExpression>: t
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: u
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: u
[INFO] Matched <LeftValue>: u
[INFO] Matched <PrimaryExpression>: u
[INFO] Matched <UnaryExpression>: u
[INFO] Matched <MultiplicativeExpression>: t * u
[INFO] Matched <AdditiveExpression>: t * u
[INFO] Matched <Expression>: t * u
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: tu = t * u;
[INFO] Matched <Statement>: tu = t * u;
[INFO] Matched <BlockItem>:
tu = t * u;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: tmp_0
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: tmp_0
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: tmp_0[0]
[INFO] Matched <PrimaryExpression>: tmp_0[0]
[INFO] Matched <UnaryExpression>: tmp_0[0]
[INFO] Matched <MultiplicativeExpression>: tmp_0[0]
[INFO] Matched <AdditiveExpression>: tmp_0[0]
[INFO] Matched <Expression>: tmp_0[0]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: tmp_0
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: tmp_0[0]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: tmp_0
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: tmp_0[0]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5 * 5
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 5 * 5 + 1
[INFO] Matched <Expression>: 5 * 5 + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: tmp_0[0] = 5 * 5 + 1;
[INFO] Matched <Statement>: tmp_0[0] = 5 * 5 + 1;
[INFO] Matched <BlockItem>:
tmp_0[0] = 5 * 5 + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: m
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: m
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: m[0][0]
[INFO] Matched <PrimaryExpression>: m[0][0]
[INFO] Matched <UnaryExpression>: m[0][0]
[INFO] Matched <MultiplicativeExpression>: m[0][0]
[INFO] Matched <AdditiveExpression>: m[0][0]
[INFO] Matched <Expression>: m[0][0]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: m
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: m[0][0]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: m
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: m[0][0]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 134
[INFO] Matched <Number>: 134
[INFO] Matched <PrimaryExpression>: 134
[INFO] Matched <UnaryExpression>: 134
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 100
[INFO] Matched <Number>: 100
[INFO] Matched <PrimaryExpression>: 100
[INFO] Matched <UnaryExpression>: 100
[INFO] Matched <MultiplicativeExpression>: 134 % 100
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: -1
[INFO] Matched <UnaryExpression>: -1
[INFO] Matched <MultiplicativeExpression>: -1
[INFO] Matched <AdditiveExpression>: 134 % 100 + -1
[INFO] Matched <Expression>: 134 % 100 + -1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: m[0][0] = 134 % 100 + -1;
[INFO] Matched <Statement>: m[0][0] = 134 % 100 + -1;
[INFO] Matched <BlockItem>:
m[0][0] = 134 % 100 + -1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int m[2][4] = {{-1 + 2 - 3 * 4 / 5 % 6, -1 + 2 + 3 + 4, (1 - 2) - 3 - 4, 1 * 2 * 3 * 4}, {100 / 10 / 10 * (-1), (1 - 2) * (3 + 5), 1, 2}}, m1[3] = {1, -2, 3}, m2[2][2];
    int tu = t + u;
    tu = t * u;
    tmp_0[0] = 5 * 5 + 1;
    m[0][0] = 134 % 100 + -1;
    return;
}
[INFO] Matched <FuncDefinition>:
void matrix() {
    int m[2][4] = {{-1 + 2 - 3 * 4 / 5 % 6, -1 + 2 + 3 + 4, (1 - 2) - 3 - 4, 1 * 2 * 3 * 4}, {100 / 10 / 10 * (-1), (1 - 2) * (3 + 5), 1, 2}}, m1[3] = {1, -2, 3}, m2[2][2];
    int tu = t + u;
    tu = t * u;
    tmp_0[0] = 5 * 5 + 1;
    m[0][0] = 134 % 100 + -1;
    return;
}
[INFO] Consumed Token: void
[INFO] Consumed Token: logic
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: logic
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Failed to match <BasicType>.
[INFO] Failed to match <FuncParam>.
[INFO] Failed to match <FuncParamList>.
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: i
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: i = 0
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: j
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: j = 0
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int i = 0, j = 0;
[INFO] Matched <Declaration>: int i = 0, j = 0;
[INFO] Matched <BlockItem>:
int i = 0, j = 0;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <RelationalExpression>: i <= j
[INFO] Matched <EqualityExpression>: i <= j
[INFO] Matched <LogicalAndExpression>: i <= j
[INFO] Matched <LogicalOrExpression>: i <= j
[INFO] Matched <Condition>: i <= j
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <Expression>: j
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = j;
[INFO] Matched <Statement>: i = j;
[INFO] Matched <BlockItem>:
i = j;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    i = j;
}
[INFO] Matched <Statement>:
{
    i = j;
}
[INFO] Matched <IfStatement>:
if (i <= j) {
    i = j;
}  
[INFO] Matched <Statement>:
if (i <= j) {
    i = j;
}  
[INFO] Matched <BlockItem>:
if (i <= j) {
    i = j;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <RelationalExpression>: i >= j
[INFO] Matched <EqualityExpression>: i >= j
[INFO] Matched <LogicalAndExpression>: i >= j
[INFO] Matched <LogicalOrExpression>: i >= j
[INFO] Matched <Condition>: i >= j
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <Expression>: j
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = j;
[INFO] Matched <Statement>: i = j;
[INFO] Matched <BlockItem>:
i = j;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    i = j;
}
[INFO] Matched <Statement>:
{
    i = j;
}
[INFO] Matched <IfStatement>:
if (i >= j) {
    i = j;
}  
[INFO] Matched <Statement>:
if (i >= j) {
    i = j;
}  
[INFO] Matched <BlockItem>:
if (i >= j) {
    i = j;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 100
[INFO] Matched <Number>: 100
[INFO] Matched <PrimaryExpression>: 100
[INFO] Matched <UnaryExpression>: 100
[INFO] Matched <MultiplicativeExpression>: 100
[INFO] Matched <AdditiveExpression>: 100
[INFO] Matched <RelationalExpression>: i < 100
[INFO] Matched <EqualityExpression>: i < 100
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 100
[INFO] Matched <Number>: 100
[INFO] Matched <PrimaryExpression>: 100
[INFO] Matched <UnaryExpression>: 100
[INFO] Matched <MultiplicativeExpression>: 100
[INFO] Matched <AdditiveExpression>: 100
[INFO] Matched <RelationalExpression>: j > 100
[INFO] Matched <EqualityExpression>: j > 100
[INFO] Matched <LogicalAndExpression>: i < 100 && j > 100
[INFO] Matched <LogicalOrExpression>: i < 100 && j > 100
[INFO] Matched <Condition>: i < 100 && j > 100
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <IfStatement>:
if (i < 100 && j > 100) {}  
[INFO] Matched <Statement>:
if (i < 100 && j > 100) {}  
[INFO] Matched <BlockItem>:
if (i < 100 && j > 100) {}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <RelationalExpression>: i
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: 0
[INFO] Matched <EqualityExpression>: i == 0
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <RelationalExpression>: j
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: 0
[INFO] Matched <EqualityExpression>: j != 0
[INFO] Matched <LogicalAndExpression>: i == 0 && j != 0
[INFO] Matched <LogicalOrExpression>: i == 0 && j != 0
[INFO] Matched <Condition>: i == 0 && j != 0
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <IfStatement>:
if (i == 0 && j != 0) {}  
[INFO] Matched <Statement>:
if (i == 0 && j != 0) {}  
[INFO] Matched <BlockItem>:
if (i == 0 && j != 0) {}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <RelationalExpression>: i
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: 0
[INFO] Matched <EqualityExpression>: i == 0
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <UnaryOperatedExpression>: !j
[INFO] Matched <UnaryExpression>: !j
[INFO] Matched <MultiplicativeExpression>: !j
[INFO] Matched <AdditiveExpression>: !j
[INFO] Matched <RelationalExpression>: !j
[INFO] Matched <EqualityExpression>: !j
[INFO] Matched <LogicalAndExpression>: i == 0 && !j
[INFO] Matched <LogicalOrExpression>: i == 0 && !j
[INFO] Matched <Condition>: i == 0 && !j
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "YeG1\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("YeG1\n");
[INFO] Matched <Statement>: printf("YeG1\n");
[INFO] Matched <BlockItem>:
printf("YeG1\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("YeG1\n");
}
[INFO] Matched <Statement>:
{
    printf("YeG1\n");
}
[INFO] Matched <IfStatement>:
if (i == 0 && !j) {
    printf("YeG1\n");
}  
[INFO] Matched <Statement>:
if (i == 0 && !j) {
    printf("YeG1\n");
}  
[INFO] Matched <BlockItem>:
if (i == 0 && !j) {
    printf("YeG1\n");
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <UnaryOperatedExpression>: !i
[INFO] Matched <UnaryExpression>: !i
[INFO] Matched <MultiplicativeExpression>: !i
[INFO] Matched <AdditiveExpression>: !i
[INFO] Matched <RelationalExpression>: !i
[INFO] Matched <EqualityExpression>: !i
[INFO] Matched <LogicalAndExpression>: !i
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <RelationalExpression>: j
[INFO] Matched <EqualityExpression>: j
[INFO] Matched <LogicalAndExpression>: j
[INFO] Matched <LogicalOrExpression>: !i || j
[INFO] Matched <Condition>: !i || j
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "YeG2\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("YeG2\n");
[INFO] Matched <Statement>: printf("YeG2\n");
[INFO] Matched <BlockItem>:
printf("YeG2\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("YeG2\n");
}
[INFO] Matched <Statement>:
{
    printf("YeG2\n");
}
[INFO] Matched <IfStatement>:
if (!i || j) {
    printf("YeG2\n");
}  
[INFO] Matched <Statement>:
if (!i || j) {
    printf("YeG2\n");
}  
[INFO] Matched <BlockItem>:
if (!i || j) {
    printf("YeG2\n");
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <RelationalExpression>: i
[INFO] Matched <EqualityExpression>: i
[INFO] Matched <LogicalAndExpression>: i
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <UnaryOperatedExpression>: !j
[INFO] Matched <UnaryExpression>: !j
[INFO] Matched <MultiplicativeExpression>: !j
[INFO] Matched <AdditiveExpression>: !j
[INFO] Matched <RelationalExpression>: !j
[INFO] Matched <EqualityExpression>: !j
[INFO] Matched <LogicalAndExpression>: !j
[INFO] Matched <LogicalOrExpression>: i || !j
[INFO] Matched <Condition>: i || !j
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "YeG3\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("YeG3\n");
[INFO] Matched <Statement>: printf("YeG3\n");
[INFO] Matched <BlockItem>:
printf("YeG3\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("YeG3\n");
}
[INFO] Matched <Statement>:
{
    printf("YeG3\n");
}
[INFO] Matched <IfStatement>:
if (i || !j) {
    printf("YeG3\n");
}  
[INFO] Matched <Statement>:
if (i || !j) {
    printf("YeG3\n");
}  
[INFO] Matched <BlockItem>:
if (i || !j) {
    printf("YeG3\n");
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <UnaryOperatedExpression>: !i
[INFO] Matched <UnaryExpression>: !i
[INFO] Matched <MultiplicativeExpression>: !i
[INFO] Matched <AdditiveExpression>: !i
[INFO] Matched <RelationalExpression>: !i
[INFO] Matched <EqualityExpression>: !i
[INFO] Matched <LogicalAndExpression>: !i
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <UnaryOperatedExpression>: !j
[INFO] Matched <UnaryExpression>: !j
[INFO] Matched <MultiplicativeExpression>: !j
[INFO] Matched <AdditiveExpression>: !j
[INFO] Matched <RelationalExpression>: !j
[INFO] Matched <EqualityExpression>: !j
[INFO] Matched <LogicalAndExpression>: !j
[INFO] Matched <LogicalOrExpression>: !i || !j
[INFO] Matched <Condition>: !i || !j
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "YeG4\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("YeG4\n");
[INFO] Matched <Statement>: printf("YeG4\n");
[INFO] Matched <BlockItem>:
printf("YeG4\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("YeG4\n");
}
[INFO] Matched <Statement>:
{
    printf("YeG4\n");
}
[INFO] Matched <IfStatement>:
if (!i || !j) {
    printf("YeG4\n");
}  
[INFO] Matched <Statement>:
if (!i || !j) {
    printf("YeG4\n");
}  
[INFO] Matched <BlockItem>:
if (!i || !j) {
    printf("YeG4\n");
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <UnaryOperatedExpression>: !i
[INFO] Matched <UnaryExpression>: !i
[INFO] Matched <MultiplicativeExpression>: !i
[INFO] Matched <AdditiveExpression>: !i
[INFO] Matched <RelationalExpression>: !i
[INFO] Matched <EqualityExpression>: !i
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <UnaryOperatedExpression>: !j
[INFO] Matched <UnaryExpression>: !j
[INFO] Matched <MultiplicativeExpression>: !j
[INFO] Matched <AdditiveExpression>: !j
[INFO] Matched <RelationalExpression>: !j
[INFO] Matched <EqualityExpression>: !j
[INFO] Matched <LogicalAndExpression>: !i && !j
[INFO] Matched <LogicalOrExpression>: !i && !j
[INFO] Matched <Condition>: !i && !j
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "YeG5\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("YeG5\n");
[INFO] Matched <Statement>: printf("YeG5\n");
[INFO] Matched <BlockItem>:
printf("YeG5\n");
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("YeG5\n");
}
[INFO] Matched <Statement>:
{
    printf("YeG5\n");
}
[INFO] Matched <IfStatement>:
if (!i && !j) {
    printf("YeG5\n");
}  
[INFO] Matched <Statement>:
if (!i && !j) {
    printf("YeG5\n");
}  
[INFO] Matched <BlockItem>:
if (!i && !j) {
    printf("YeG5\n");
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <UnaryOperatedExpression>: !i
[INFO] Matched <UnaryExpression>: !i
[INFO] Matched <MultiplicativeExpression>: !i
[INFO] Matched <AdditiveExpression>: !i
[INFO] Matched <RelationalExpression>: !i
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <RelationalExpression>: j
[INFO] Matched <EqualityExpression>: !i != j
[INFO] Matched <LogicalAndExpression>: !i != j
[INFO] Matched <LogicalOrExpression>: !i != j
[INFO] Matched <Condition>: !i != j
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <Expression>: j
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = j;
[INFO] Matched <Statement>: i = j;
[INFO] Matched <BlockItem>:
i = j;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    i = j;
}
[INFO] Matched <Statement>:
{
    i = j;
}
[INFO] Matched <IfStatement>:
if (!i != j) {
    i = j;
}  
[INFO] Matched <Statement>:
if (!i != j) {
    i = j;
}  
[INFO] Matched <BlockItem>:
if (!i != j) {
    i = j;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <RelationalExpression>: i
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <UnaryOperatedExpression>: !j
[INFO] Matched <UnaryExpression>: !j
[INFO] Matched <MultiplicativeExpression>: !j
[INFO] Matched <AdditiveExpression>: !j
[INFO] Matched <RelationalExpression>: !j
[INFO] Matched <EqualityExpression>: i != !j
[INFO] Matched <LogicalAndExpression>: i != !j
[INFO] Matched <LogicalOrExpression>: i != !j
[INFO] Matched <Condition>: i != !j
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <Expression>: j
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: j = i;
[INFO] Matched <Statement>: j = i;
[INFO] Matched <BlockItem>:
j = i;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    j = i;
}
[INFO] Matched <Statement>:
{
    j = i;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <Expression>: j
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <UnaryOperatedExpression>: +i
[INFO] Matched <UnaryExpression>: +i
[INFO] Matched <UnaryOperatedExpression>: -+i
[INFO] Matched <UnaryExpression>: -+i
[INFO] Matched <UnaryOperatedExpression>: +-+i
[INFO] Matched <UnaryExpression>: +-+i
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 100
[INFO] Matched <Number>: 100
[INFO] Matched <PrimaryExpression>: 100
[INFO] Matched <UnaryExpression>: 100
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <ParenthesisedPrimeExpression>.
[INFO] Consumed Token: (
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <UnaryOperatedExpression>: -1
[INFO] Matched <UnaryExpression>: -1
[INFO] Matched <MultiplicativeExpression>: -1
[INFO] Matched <AdditiveExpression>: -1
[INFO] Matched <Expression>: -1
[INFO] Consumed Token: )
[INFO] Matched <ParenthesisedPrimeExpression>: (-1)
[INFO] Matched <PrimaryExpression>: (-1)
[INFO] Matched <UnaryExpression>: (-1)
[INFO] Matched <MultiplicativeExpression>: +-+i * 100 / 10 % 10 * (-1)
[INFO] Matched <AdditiveExpression>: i - +-+i * 100 / 10 % 10 * (-1)
[INFO] Matched <Expression>: i - +-+i * 100 / 10 % 10 * (-1)
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: j = i - +-+i * 100 / 10 % 10 * (-1);
[INFO] Matched <Statement>: j = i - +-+i * 100 / 10 % 10 * (-1);
[INFO] Matched <BlockItem>:
j = i - +-+i * 100 / 10 % 10 * (-1);
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    j = i - +-+i * 100 / 10 % 10 * (-1);
}
[INFO] Matched <Statement>:
{
    j = i - +-+i * 100 / 10 % 10 * (-1);
}
[INFO] Matched <IfStatement>:
if (i != !j) {
    j = i;
} else {
    j = i - +-+i * 100 / 10 % 10 * (-1);
}
[INFO] Matched <Statement>:
if (i != !j) {
    j = i;
} else {
    j = i - +-+i * 100 / 10 % 10 * (-1);
}
[INFO] Matched <BlockItem>:
if (i != !j) {
    j = i;
} else {
    j = i - +-+i * 100 / 10 % 10 * (-1);
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int i = 0, j = 0;
    if (i <= j) {
        i = j;
    }  
    if (i >= j) {
        i = j;
    }  
    if (i < 100 && j > 100) {}  
    if (i == 0 && j != 0) {}  
    if (i == 0 && !j) {
        printf("YeG1\n");
    }  
    if (!i || j) {
        printf("YeG2\n");
    }  
    if (i || !j) {
        printf("YeG3\n");
    }  
    if (!i || !j) {
        printf("YeG4\n");
    }  
    if (!i && !j) {
        printf("YeG5\n");
    }  
    if (!i != j) {
        i = j;
    }  
    if (i != !j) {
        j = i;
    } else {
        j = i - +-+i * 100 / 10 % 10 * (-1);
    }
    return;
}
[INFO] Matched <FuncDefinition>:
void logic() {
    int i = 0, j = 0;
    if (i <= j) {
        i = j;
    }  
    if (i >= j) {
        i = j;
    }  
    if (i < 100 && j > 100) {}  
    if (i == 0 && j != 0) {}  
    if (i == 0 && !j) {
        printf("YeG1\n");
    }  
    if (!i || j) {
        printf("YeG2\n");
    }  
    if (i || !j) {
        printf("YeG3\n");
    }  
    if (!i || !j) {
        printf("YeG4\n");
    }  
    if (!i && !j) {
        printf("YeG5\n");
    }  
    if (!i != j) {
        i = j;
    }  
    if (i != !j) {
        j = i;
    } else {
        j = i - +-+i * 100 / 10 % 10 * (-1);
    }
    return;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: getInt
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: getInt
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Failed to match <BasicType>.
[INFO] Failed to match <FuncParam>.
[INFO] Failed to match <FuncParamList>.
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: a
[INFO] Matched <VarDefinition>: a
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int a;
[INFO] Matched <Declaration>: int a;
[INFO] Matched <BlockItem>:
int a;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: a = getint();
[INFO] Matched <Statement>: a = getint();
[INFO] Matched <BlockItem>:
a = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return a;
[INFO] Matched <Statement>: return a;
[INFO] Matched <BlockItem>:
return a;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int a;
    a = getint();
    return a;
}
[INFO] Matched <FuncDefinition>:
int getInt() {
    int a;
    a = getint();
    return a;
}
[INFO] Consumed Token: void
[INFO] Consumed Token: prd
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: prd
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: d
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int d[][2]
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: x
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int a[]
[INFO] Matched <FuncParamList>: int d[][2], int x, int a[]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: i
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: i = 0
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: j
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Matched <ScalarVarInitValue>: 0
[INFO] Matched <VarInitValue>: 0
[INFO] Matched <VarDefinition>: j = 0
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int i = 0, j = 0;
[INFO] Matched <Declaration>: int i = 0, j = 0;
[INFO] Matched <BlockItem>:
int i = 0, j = 0;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <RelationalExpression>: i >= 0
[INFO] Matched <EqualityExpression>: i >= 0
[INFO] Matched <LogicalAndExpression>: i >= 0
[INFO] Matched <LogicalOrExpression>: i >= 0
[INFO] Matched <Condition>: i >= 0
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: d
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: d
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <Expression>: j
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: d[i][j]
[INFO] Matched <PrimaryExpression>: d[i][j]
[INFO] Matched <UnaryExpression>: d[i][j]
[INFO] Matched <MultiplicativeExpression>: d[i][j]
[INFO] Matched <AdditiveExpression>: d[i][j]
[INFO] Matched <Expression>: d[i][j]
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", d[i][j]);
[INFO] Matched <Statement>: printf("%d\n", d[i][j]);
[INFO] Matched <BlockItem>:
printf("%d\n", d[i][j]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <Expression>: j
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: j + 1
[INFO] Matched <Expression>: j + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: j = j + 1;
[INFO] Matched <Statement>: j = j + 1;
[INFO] Matched <BlockItem>:
j = j + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <RelationalExpression>: j
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <RelationalExpression>: 2
[INFO] Matched <EqualityExpression>: j == 2
[INFO] Matched <LogicalAndExpression>: j == 2
[INFO] Matched <LogicalOrExpression>: j == 2
[INFO] Matched <Condition>: j == 2
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: j
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Matched <PrimaryExpression>: j
[INFO] Matched <UnaryExpression>: j
[INFO] Matched <MultiplicativeExpression>: j
[INFO] Matched <AdditiveExpression>: j
[INFO] Matched <Expression>: j
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: j
[INFO] Matched <LeftValue>: j
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: j = 0;
[INFO] Matched <Statement>: j = 0;
[INFO] Matched <BlockItem>:
j = 0;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <Expression>: i
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: i + 1
[INFO] Matched <Expression>: i + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: i = i + 1;
[INFO] Matched <Statement>: i = i + 1;
[INFO] Matched <BlockItem>:
i = i + 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    j = 0;
    i = i + 1;
}
[INFO] Matched <Statement>:
{
    j = 0;
    i = i + 1;
}
[INFO] Matched <IfStatement>:
if (j == 2) {
    j = 0;
    i = i + 1;
}  
[INFO] Matched <Statement>:
if (j == 2) {
    j = 0;
    i = i + 1;
}  
[INFO] Matched <BlockItem>:
if (j == 2) {
    j = 0;
    i = i + 1;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: i
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: i
[INFO] Matched <LeftValue>: i
[INFO] Matched <PrimaryExpression>: i
[INFO] Matched <UnaryExpression>: i
[INFO] Matched <MultiplicativeExpression>: i
[INFO] Matched <AdditiveExpression>: i
[INFO] Matched <RelationalExpression>: i
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <RelationalExpression>: 2
[INFO] Matched <EqualityExpression>: i == 2
[INFO] Matched <LogicalAndExpression>: i == 2
[INFO] Matched <LogicalOrExpression>: i == 2
[INFO] Matched <Condition>: i == 2
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    break;
}
[INFO] Matched <Statement>:
{
    break;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ContinueStatement>.
[INFO] Consumed Token: continue
[INFO] Consumed Token: ;
[INFO] Matched <ContinueStatement>: continue;
[INFO] Matched <Statement>: continue;
[INFO] Matched <BlockItem>:
continue;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    continue;
}
[INFO] Matched <Statement>:
{
    continue;
}
[INFO] Matched <IfStatement>:
if (i == 2) {
    break;
} else {
    continue;
}
[INFO] Matched <Statement>:
if (i == 2) {
    break;
} else {
    continue;
}
[INFO] Matched <BlockItem>:
if (i == 2) {
    break;
} else {
    continue;
}
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("%d\n", d[i][j]);
    j = j + 1;
    if (j == 2) {
        j = 0;
        i = i + 1;
    }  
    if (i == 2) {
        break;
    } else {
        continue;
    }
}
[INFO] Matched <Statement>:
{
    printf("%d\n", d[i][j]);
    j = j + 1;
    if (j == 2) {
        j = 0;
        i = i + 1;
    }  
    if (i == 2) {
        break;
    } else {
        continue;
    }
}
[INFO] Matched <ForStatementSelection>:
for (; i >= 0; ) {
    printf("%d\n", d[i][j]);
    j = j + 1;
    if (j == 2) {
        j = 0;
        i = i + 1;
    }  
    if (i == 2) {
        break;
    } else {
        continue;
    }
}
[INFO] Matched <Statement>:
for (; i >= 0; ) {
    printf("%d\n", d[i][j]);
    j = j + 1;
    if (j == 2) {
        j = 0;
        i = i + 1;
    }  
    if (i == 2) {
        break;
    } else {
        continue;
    }
}
[INFO] Matched <BlockItem>:
for (; i >= 0; ) {
    printf("%d\n", d[i][j]);
    j = j + 1;
    if (j == 2) {
        j = 0;
        i = i + 1;
    }  
    if (i == 2) {
        break;
    } else {
        continue;
    }
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    int i = 0, j = 0;
    for (; i >= 0; ) {
        printf("%d\n", d[i][j]);
        j = j + 1;
        if (j == 2) {
            j = 0;
            i = i + 1;
        }  
        if (i == 2) {
            break;
        } else {
            continue;
        }
    }
    return;
}
[INFO] Matched <FuncDefinition>:
void prd(int d[][2], int x, int a[]) {
    int i = 0, j = 0;
    for (; i >= 0; ) {
        printf("%d\n", d[i][j]);
        j = j + 1;
        if (j == 2) {
            j = 0;
            i = i + 1;
        }  
        if (i == 2) {
            break;
        } else {
            continue;
        }
    }
    return;
}
[INFO] Consumed Token: void
[INFO] Consumed Token: f1
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: f1
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: x
[INFO] Matched <FuncParamList>: int x
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: x
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: x
[INFO] Matched <LeftValue>: x
[INFO] Matched <PrimaryExpression>: x
[INFO] Matched <UnaryExpression>: x
[INFO] Matched <MultiplicativeExpression>: x
[INFO] Matched <AdditiveExpression>: x
[INFO] Matched <Expression>: x
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d", x);
[INFO] Matched <Statement>: printf("%d", x);
[INFO] Matched <BlockItem>:
printf("%d", x);
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("%d", x);
}
[INFO] Matched <FuncDefinition>:
void f1(int x) {
    printf("%d", x);
}
[INFO] Consumed Token: void
[INFO] Consumed Token: f2
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: f2
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: d
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1 + 1
[INFO] Matched <ConstExpression>: 1 + 1
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int d[][1 + 1]
[INFO] Matched <FuncParamList>: int d[][1 + 1]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: d
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: d
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: d[0][1]
[INFO] Matched <PrimaryExpression>: d[0][1]
[INFO] Matched <UnaryExpression>: d[0][1]
[INFO] Matched <MultiplicativeExpression>: d[0][1]
[INFO] Matched <AdditiveExpression>: d[0][1]
[INFO] Matched <Expression>: d[0][1]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: d
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: d[0][1]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: d
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: d[0][1]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10000
[INFO] Matched <Number>: 10000
[INFO] Matched <PrimaryExpression>: 10000
[INFO] Matched <UnaryExpression>: 10000
[INFO] Matched <MultiplicativeExpression>: 10000
[INFO] Matched <AdditiveExpression>: 10000
[INFO] Matched <Expression>: 10000
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: d[0][1] = 10000;
[INFO] Matched <Statement>: d[0][1] = 10000;
[INFO] Matched <BlockItem>:
d[0][1] = 10000;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    d[0][1] = 10000;
}
[INFO] Matched <FuncDefinition>:
void f2(int d[][1 + 1]) {
    d[0][1] = 10000;
}
[INFO] Consumed Token: void
[INFO] Consumed Token: f3
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: f3
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: x
[INFO] Matched <FuncParamList>: int x
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ;
[INFO] Matched <Statement>: ;
[INFO] Matched <BlockItem>:
;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    ;
    ;
}
[INFO] Matched <FuncDefinition>:
void f3(int x) {
    ;
    ;
}
[INFO] Consumed Token: void
[INFO] Consumed Token: f4
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: f4
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int a[]
[INFO] Matched <FuncParamList>: int a[]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <FuncDefinition>:
void f4(int a[]) {}
[INFO] Consumed Token: void
[INFO] Consumed Token: f5
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: f5
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: x
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: y
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int y[]
[INFO] Matched <FuncParamList>: int x, int y[]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <FuncDefinition>:
void f5(int x, int y[]) {}
[INFO] Consumed Token: int
[INFO] Lexer rolling back...
[INFO] Matching <MainFuncDefinition>.
[INFO] Consumed Token: int
[INFO] Consumed Token: main
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: pr
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: pr
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: pr()
[INFO] Matched <UnaryExpression>: pr()
[INFO] Matched <MultiplicativeExpression>: pr()
[INFO] Matched <AdditiveExpression>: pr()
[INFO] Matched <Expression>: pr()
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: pr();
[INFO] Matched <Statement>: pr();
[INFO] Matched <BlockItem>:
pr();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: nonsense
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: nonsense
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: nonsense()
[INFO] Matched <UnaryExpression>: nonsense()
[INFO] Matched <MultiplicativeExpression>: nonsense()
[INFO] Matched <AdditiveExpression>: nonsense()
[INFO] Matched <Expression>: nonsense()
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: nonsense();
[INFO] Matched <Statement>: nonsense();
[INFO] Matched <BlockItem>:
nonsense();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Matched <Expression>: n
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: getInt
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: getInt
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: getInt()
[INFO] Matched <UnaryExpression>: getInt()
[INFO] Matched <MultiplicativeExpression>: getInt()
[INFO] Matched <AdditiveExpression>: getInt()
[INFO] Matched <Expression>: getInt()
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: n = getInt();
[INFO] Matched <Statement>: n = getInt();
[INFO] Matched <BlockItem>:
n = getInt();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: m
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: m
[INFO] Matched <LeftValue>: m
[INFO] Matched <PrimaryExpression>: m
[INFO] Matched <UnaryExpression>: m
[INFO] Matched <MultiplicativeExpression>: m
[INFO] Matched <AdditiveExpression>: m
[INFO] Matched <Expression>: m
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: m
[INFO] Matched <LeftValue>: m
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: m
[INFO] Matched <LeftValue>: m
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: getInt
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: getInt
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: getInt()
[INFO] Matched <UnaryExpression>: getInt()
[INFO] Matched <MultiplicativeExpression>: getInt()
[INFO] Matched <AdditiveExpression>: getInt()
[INFO] Matched <Expression>: getInt()
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: m = getInt();
[INFO] Matched <Statement>: m = getInt();
[INFO] Matched <BlockItem>:
m = getInt();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: matrix
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: matrix
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: matrix()
[INFO] Matched <UnaryExpression>: matrix()
[INFO] Matched <MultiplicativeExpression>: matrix()
[INFO] Matched <AdditiveExpression>: matrix()
[INFO] Matched <Expression>: matrix()
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: matrix();
[INFO] Matched <Statement>: matrix();
[INFO] Matched <BlockItem>:
matrix();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f1
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: f1
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Matched <Expression>: n
[INFO] Matched <FuncArgList>: n
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: f1(n)
[INFO] Matched <UnaryExpression>: f1(n)
[INFO] Matched <MultiplicativeExpression>: f1(n)
[INFO] Matched <AdditiveExpression>: f1(n)
[INFO] Matched <Expression>: f1(n)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: f1(n);
[INFO] Matched <Statement>: f1(n);
[INFO] Matched <BlockItem>:
f1(n);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f2
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: f2
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: d
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: d
[INFO] Matched <LeftValue>: d
[INFO] Matched <PrimaryExpression>: d
[INFO] Matched <UnaryExpression>: d
[INFO] Matched <MultiplicativeExpression>: d
[INFO] Matched <AdditiveExpression>: d
[INFO] Matched <Expression>: d
[INFO] Matched <FuncArgList>: d
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: f2(d)
[INFO] Matched <UnaryExpression>: f2(d)
[INFO] Matched <MultiplicativeExpression>: f2(d)
[INFO] Matched <AdditiveExpression>: f2(d)
[INFO] Matched <Expression>: f2(d)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: f2(d);
[INFO] Matched <Statement>: f2(d);
[INFO] Matched <BlockItem>:
f2(d);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f3
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: f3
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: m
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: m
[INFO] Matched <LeftValue>: m
[INFO] Matched <PrimaryExpression>: m
[INFO] Matched <UnaryExpression>: m
[INFO] Matched <MultiplicativeExpression>: m
[INFO] Matched <AdditiveExpression>: n + m
[INFO] Matched <Expression>: n + m
[INFO] Matched <FuncArgList>: n + m
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: f3(n + m)
[INFO] Matched <UnaryExpression>: f3(n + m)
[INFO] Matched <MultiplicativeExpression>: f3(n + m)
[INFO] Matched <AdditiveExpression>: f3(n + m)
[INFO] Matched <Expression>: f3(n + m)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: f3(n + m);
[INFO] Matched <Statement>: f3(n + m);
[INFO] Matched <BlockItem>:
f3(n + m);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f3
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: f3
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: tmp_0
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: tmp_0
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: tmp_0[0]
[INFO] Matched <PrimaryExpression>: tmp_0[0]
[INFO] Matched <UnaryExpression>: tmp_0[0]
[INFO] Matched <MultiplicativeExpression>: tmp_0[0]
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: tmp_0
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: tmp_0
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: tmp_0[1]
[INFO] Matched <PrimaryExpression>: tmp_0[1]
[INFO] Matched <UnaryExpression>: tmp_0[1]
[INFO] Matched <MultiplicativeExpression>: tmp_0[1]
[INFO] Matched <AdditiveExpression>: tmp_0[0] + tmp_0[1]
[INFO] Matched <Expression>: tmp_0[0] + tmp_0[1]
[INFO] Matched <FuncArgList>: tmp_0[0] + tmp_0[1]
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: f3(tmp_0[0] + tmp_0[1])
[INFO] Matched <UnaryExpression>: f3(tmp_0[0] + tmp_0[1])
[INFO] Matched <MultiplicativeExpression>: f3(tmp_0[0] + tmp_0[1])
[INFO] Matched <AdditiveExpression>: f3(tmp_0[0] + tmp_0[1])
[INFO] Matched <Expression>: f3(tmp_0[0] + tmp_0[1])
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: f3(tmp_0[0] + tmp_0[1]);
[INFO] Matched <Statement>: f3(tmp_0[0] + tmp_0[1]);
[INFO] Matched <BlockItem>:
f3(tmp_0[0] + tmp_0[1]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f3
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: f3
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a_2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a_2
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a_2[0][0]
[INFO] Matched <PrimaryExpression>: a_2[0][0]
[INFO] Matched <UnaryExpression>: a_2[0][0]
[INFO] Matched <MultiplicativeExpression>: a_2[0][0]
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a_2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a_2
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a_2[0][0]
[INFO] Matched <PrimaryExpression>: a_2[0][0]
[INFO] Matched <UnaryExpression>: a_2[0][0]
[INFO] Matched <MultiplicativeExpression>: a_2[0][0]
[INFO] Matched <AdditiveExpression>: a_2[0][0] + a_2[0][0]
[INFO] Matched <Expression>: a_2[0][0] + a_2[0][0]
[INFO] Matched <FuncArgList>: a_2[0][0] + a_2[0][0]
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: f3(a_2[0][0] + a_2[0][0])
[INFO] Matched <UnaryExpression>: f3(a_2[0][0] + a_2[0][0])
[INFO] Matched <MultiplicativeExpression>: f3(a_2[0][0] + a_2[0][0])
[INFO] Matched <AdditiveExpression>: f3(a_2[0][0] + a_2[0][0])
[INFO] Matched <Expression>: f3(a_2[0][0] + a_2[0][0])
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: f3(a_2[0][0] + a_2[0][0]);
[INFO] Matched <Statement>: f3(a_2[0][0] + a_2[0][0]);
[INFO] Matched <BlockItem>:
f3(a_2[0][0] + a_2[0][0]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f3
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: f3
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a_2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a_2
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a_2[0][0]
[INFO] Matched <PrimaryExpression>: a_2[0][0]
[INFO] Matched <UnaryExpression>: a_2[0][0]
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: tmp_0
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: tmp_0
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: tmp_0[0]
[INFO] Matched <PrimaryExpression>: tmp_0[0]
[INFO] Matched <UnaryExpression>: tmp_0[0]
[INFO] Matched <MultiplicativeExpression>: a_2[0][0] * tmp_0[0]
[INFO] Matched <AdditiveExpression>: a_2[0][0] * tmp_0[0]
[INFO] Matched <Expression>: a_2[0][0] * tmp_0[0]
[INFO] Matched <FuncArgList>: a_2[0][0] * tmp_0[0]
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: f3(a_2[0][0] * tmp_0[0])
[INFO] Matched <UnaryExpression>: f3(a_2[0][0] * tmp_0[0])
[INFO] Matched <MultiplicativeExpression>: f3(a_2[0][0] * tmp_0[0])
[INFO] Matched <AdditiveExpression>: f3(a_2[0][0] * tmp_0[0])
[INFO] Matched <Expression>: f3(a_2[0][0] * tmp_0[0])
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: f3(a_2[0][0] * tmp_0[0]);
[INFO] Matched <Statement>: f3(a_2[0][0] * tmp_0[0]);
[INFO] Matched <BlockItem>:
f3(a_2[0][0] * tmp_0[0]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f3
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: f3
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: tmp_0
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: tmp_0
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: tmp_0[0]
[INFO] Matched <PrimaryExpression>: tmp_0[0]
[INFO] Matched <UnaryExpression>: tmp_0[0]
[INFO] Matched <MultiplicativeExpression>: tmp_0[0]
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: tmp_0[0] + n
[INFO] Matched <Expression>: tmp_0[0] + n
[INFO] Matched <FuncArgList>: tmp_0[0] + n
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: f3(tmp_0[0] + n)
[INFO] Matched <UnaryExpression>: f3(tmp_0[0] + n)
[INFO] Matched <MultiplicativeExpression>: f3(tmp_0[0] + n)
[INFO] Matched <AdditiveExpression>: f3(tmp_0[0] + n)
[INFO] Matched <Expression>: f3(tmp_0[0] + n)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: f3(tmp_0[0] + n);
[INFO] Matched <Statement>: f3(tmp_0[0] + n);
[INFO] Matched <BlockItem>:
f3(tmp_0[0] + n);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f3
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: f3
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a_2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a_2
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a_2[0][0]
[INFO] Matched <PrimaryExpression>: a_2[0][0]
[INFO] Matched <UnaryExpression>: a_2[0][0]
[INFO] Matched <MultiplicativeExpression>: a_2[0][0]
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: m
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: m
[INFO] Matched <LeftValue>: m
[INFO] Matched <PrimaryExpression>: m
[INFO] Matched <UnaryExpression>: m
[INFO] Matched <MultiplicativeExpression>: m
[INFO] Matched <AdditiveExpression>: a_2[0][0] + m
[INFO] Matched <Expression>: a_2[0][0] + m
[INFO] Matched <FuncArgList>: a_2[0][0] + m
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: f3(a_2[0][0] + m)
[INFO] Matched <UnaryExpression>: f3(a_2[0][0] + m)
[INFO] Matched <MultiplicativeExpression>: f3(a_2[0][0] + m)
[INFO] Matched <AdditiveExpression>: f3(a_2[0][0] + m)
[INFO] Matched <Expression>: f3(a_2[0][0] + m)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: f3(a_2[0][0] + m);
[INFO] Matched <Statement>: f3(a_2[0][0] + m);
[INFO] Matched <BlockItem>:
f3(a_2[0][0] + m);
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f4
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: f4
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: d
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: d
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: d[1]
[INFO] Matched <PrimaryExpression>: d[1]
[INFO] Matched <UnaryExpression>: d[1]
[INFO] Matched <MultiplicativeExpression>: d[1]
[INFO] Matched <AdditiveExpression>: d[1]
[INFO] Matched <Expression>: d[1]
[INFO] Matched <FuncArgList>: d[1]
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: f4(d[1])
[INFO] Matched <UnaryExpression>: f4(d[1])
[INFO] Matched <MultiplicativeExpression>: f4(d[1])
[INFO] Matched <AdditiveExpression>: f4(d[1])
[INFO] Matched <Expression>: f4(d[1])
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: f4(d[1]);
[INFO] Matched <Statement>: f4(d[1]);
[INFO] Matched <BlockItem>:
f4(d[1]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f5
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: f5
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: tmp_0
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: tmp_0
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: tmp_0[0]
[INFO] Matched <PrimaryExpression>: tmp_0[0]
[INFO] Matched <UnaryExpression>: tmp_0[0]
[INFO] Matched <MultiplicativeExpression>: tmp_0[0]
[INFO] Matched <AdditiveExpression>: tmp_0[0]
[INFO] Matched <Expression>: tmp_0[0]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: d
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: d
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: d[0]
[INFO] Matched <PrimaryExpression>: d[0]
[INFO] Matched <UnaryExpression>: d[0]
[INFO] Matched <MultiplicativeExpression>: d[0]
[INFO] Matched <AdditiveExpression>: d[0]
[INFO] Matched <Expression>: d[0]
[INFO] Matched <FuncArgList>: tmp_0[0], d[0]
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: f5(tmp_0[0], d[0])
[INFO] Matched <UnaryExpression>: f5(tmp_0[0], d[0])
[INFO] Matched <MultiplicativeExpression>: f5(tmp_0[0], d[0])
[INFO] Matched <AdditiveExpression>: f5(tmp_0[0], d[0])
[INFO] Matched <Expression>: f5(tmp_0[0], d[0])
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: f5(tmp_0[0], d[0]);
[INFO] Matched <Statement>: f5(tmp_0[0], d[0]);
[INFO] Matched <BlockItem>:
f5(tmp_0[0], d[0]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f5
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: f5
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Matched <Expression>: n
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: tmp_0
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: tmp_0
[INFO] Matched <LeftValue>: tmp_0
[INFO] Matched <PrimaryExpression>: tmp_0
[INFO] Matched <UnaryExpression>: tmp_0
[INFO] Matched <MultiplicativeExpression>: tmp_0
[INFO] Matched <AdditiveExpression>: tmp_0
[INFO] Matched <Expression>: tmp_0
[INFO] Matched <FuncArgList>: n, tmp_0
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: f5(n, tmp_0)
[INFO] Matched <UnaryExpression>: f5(n, tmp_0)
[INFO] Matched <MultiplicativeExpression>: f5(n, tmp_0)
[INFO] Matched <AdditiveExpression>: f5(n, tmp_0)
[INFO] Matched <Expression>: f5(n, tmp_0)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: f5(n, tmp_0);
[INFO] Matched <Statement>: f5(n, tmp_0);
[INFO] Matched <BlockItem>:
f5(n, tmp_0);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: logic
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: logic
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: logic()
[INFO] Matched <UnaryExpression>: logic()
[INFO] Matched <MultiplicativeExpression>: logic()
[INFO] Matched <AdditiveExpression>: logic()
[INFO] Matched <Expression>: logic()
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: logic();
[INFO] Matched <Statement>: logic();
[INFO] Matched <BlockItem>:
logic();
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: a
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Matched <Expression>: n
[INFO] Matched <ScalarVarInitValue>: n
[INFO] Matched <VarInitValue>: n
[INFO] Matched <VarDefinition>: a = n
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int a = n;
[INFO] Matched <Declaration>: int a = n;
[INFO] Matched <BlockItem>:
int a = n;
[INFO] Consumed Token: int
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: b
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: m
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: m
[INFO] Matched <LeftValue>: m
[INFO] Matched <PrimaryExpression>: m
[INFO] Matched <UnaryExpression>: m
[INFO] Matched <MultiplicativeExpression>: m
[INFO] Matched <AdditiveExpression>: m
[INFO] Matched <Expression>: m
[INFO] Matched <ScalarVarInitValue>: m
[INFO] Matched <VarInitValue>: m
[INFO] Matched <VarDefinition>: b = m
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int b = m;
[INFO] Matched <Declaration>: int b = m;
[INFO] Matched <BlockItem>:
int b = m;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <UnaryOperatedExpression>: +a
[INFO] Matched <UnaryExpression>: +a
[INFO] Matched <UnaryOperatedExpression>: -+a
[INFO] Matched <UnaryExpression>: -+a
[INFO] Matched <MultiplicativeExpression>: -+a
[INFO] Matched <AdditiveExpression>: a + -+a
[INFO] Matched <Expression>: a + -+a
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = a + -+a;
[INFO] Matched <Statement>: a = a + -+a;
[INFO] Matched <BlockItem>:
a = a + -+a;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <Expression>: b
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: +
[INFO] Matched <UnaryOperator>: +
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: -
[INFO] Matched <UnaryOperator>: -
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <UnaryOperatedExpression>: -a
[INFO] Matched <UnaryExpression>: -a
[INFO] Matched <UnaryOperatedExpression>: +-a
[INFO] Matched <UnaryExpression>: +-a
[INFO] Matched <MultiplicativeExpression>: +-a
[INFO] Matched <AdditiveExpression>: b - +-a
[INFO] Matched <Expression>: b - +-a
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: b = b - +-a;
[INFO] Matched <Statement>: b = b - +-a;
[INFO] Matched <BlockItem>:
b = b - +-a;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <RelationalExpression>: a
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <RelationalExpression>: b
[INFO] Matched <EqualityExpression>: a == b
[INFO] Matched <LogicalAndExpression>: a == b
[INFO] Matched <LogicalOrExpression>: a == b
[INFO] Matched <Condition>: a == b
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = 1;
[INFO] Matched <Statement>: a = 1;
[INFO] Matched <BlockItem>:
a = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <Expression>: b
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: b = 1;
[INFO] Matched <Statement>: b = 1;
[INFO] Matched <BlockItem>:
b = 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a = 1;
    b = 1;
}
[INFO] Matched <Statement>:
{
    a = 1;
    b = 1;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <RelationalExpression>: a <= b
[INFO] Matched <EqualityExpression>: a <= b
[INFO] Matched <LogicalAndExpression>: a <= b
[INFO] Matched <LogicalOrExpression>: a <= b
[INFO] Matched <Condition>: a <= b
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = 1;
[INFO] Matched <Statement>: a = 1;
[INFO] Matched <BlockItem>:
a = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <Expression>: b
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: b = 2;
[INFO] Matched <Statement>: b = 2;
[INFO] Matched <BlockItem>:
b = 2;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a = 1;
    b = 2;
}
[INFO] Matched <Statement>:
{
    a = 1;
    b = 2;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = 2;
[INFO] Matched <Statement>: a = 2;
[INFO] Matched <BlockItem>:
a = 2;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: b
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Matched <PrimaryExpression>: b
[INFO] Matched <UnaryExpression>: b
[INFO] Matched <MultiplicativeExpression>: b
[INFO] Matched <AdditiveExpression>: b
[INFO] Matched <Expression>: b
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: b
[INFO] Matched <LeftValue>: b
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: b = 1;
[INFO] Matched <Statement>: b = 1;
[INFO] Matched <BlockItem>:
b = 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a = 2;
    b = 1;
}
[INFO] Matched <Statement>:
{
    a = 2;
    b = 1;
}
[INFO] Matched <IfStatement>:
if (a <= b) {
    a = 1;
    b = 2;
} else {
    a = 2;
    b = 1;
}
[INFO] Matched <Statement>:
if (a <= b) {
    a = 1;
    b = 2;
} else {
    a = 2;
    b = 1;
}
[INFO] Matched <IfStatement>:
if (a == b) {
    a = 1;
    b = 1;
} else if (a <= b) {
    a = 1;
    b = 2;
} else {
    a = 2;
    b = 1;
}
[INFO] Matched <Statement>:
if (a == b) {
    a = 1;
    b = 1;
} else if (a <= b) {
    a = 1;
    b = 2;
} else {
    a = 2;
    b = 1;
}
[INFO] Matched <BlockItem>:
if (a == b) {
    a = 1;
    b = 1;
} else if (a <= b) {
    a = 1;
    b = 2;
} else {
    a = 2;
    b = 1;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <UnaryOperatedExpression>: !a
[INFO] Matched <UnaryExpression>: !a
[INFO] Matched <MultiplicativeExpression>: !a
[INFO] Matched <AdditiveExpression>: !a
[INFO] Matched <RelationalExpression>: !a
[INFO] Matched <EqualityExpression>: !a
[INFO] Matched <LogicalAndExpression>: !a
[INFO] Matched <LogicalOrExpression>: !a
[INFO] Matched <Condition>: !a
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10000
[INFO] Matched <Number>: 10000
[INFO] Matched <PrimaryExpression>: 10000
[INFO] Matched <UnaryExpression>: 10000
[INFO] Matched <MultiplicativeExpression>: 10000
[INFO] Matched <AdditiveExpression>: 10000
[INFO] Matched <Expression>: 10000
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a = 10000;
[INFO] Matched <Statement>: a = 10000;
[INFO] Matched <BlockItem>:
a = 10000;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a = 10000;
}
[INFO] Matched <Statement>:
{
    a = 10000;
}
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{}
[INFO] Matched <Statement>:
{}
[INFO] Matched <IfStatement>:
if (!a) {
    a = 10000;
} else {}
[INFO] Matched <Statement>:
if (!a) {
    a = 10000;
} else {}
[INFO] Matched <BlockItem>:
if (!a) {
    a = 10000;
} else {}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d -- %d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Matched <Expression>: n
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: m
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: m
[INFO] Matched <LeftValue>: m
[INFO] Matched <PrimaryExpression>: m
[INFO] Matched <UnaryExpression>: m
[INFO] Matched <MultiplicativeExpression>: m
[INFO] Matched <AdditiveExpression>: m
[INFO] Matched <Expression>: m
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d -- %d\n", n, m);
[INFO] Matched <Statement>: printf("%d -- %d\n", n, m);
[INFO] Matched <BlockItem>:
printf("%d -- %d\n", n, m);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: prd
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: prd
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: d
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: d
[INFO] Matched <LeftValue>: d
[INFO] Matched <PrimaryExpression>: d
[INFO] Matched <UnaryExpression>: d
[INFO] Matched <MultiplicativeExpression>: d
[INFO] Matched <AdditiveExpression>: d
[INFO] Matched <Expression>: d
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 100
[INFO] Matched <Number>: 100
[INFO] Matched <PrimaryExpression>: 100
[INFO] Matched <UnaryExpression>: 100
[INFO] Matched <MultiplicativeExpression>: 100
[INFO] Matched <AdditiveExpression>: 100
[INFO] Matched <Expression>: 100
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: tmp_0
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: tmp_0
[INFO] Matched <LeftValue>: tmp_0
[INFO] Matched <PrimaryExpression>: tmp_0
[INFO] Matched <UnaryExpression>: tmp_0
[INFO] Matched <MultiplicativeExpression>: tmp_0
[INFO] Matched <AdditiveExpression>: tmp_0
[INFO] Matched <Expression>: tmp_0
[INFO] Matched <FuncArgList>: d, 100, tmp_0
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: prd(d, 100, tmp_0)
[INFO] Matched <UnaryExpression>: prd(d, 100, tmp_0)
[INFO] Matched <MultiplicativeExpression>: prd(d, 100, tmp_0)
[INFO] Matched <AdditiveExpression>: prd(d, 100, tmp_0)
[INFO] Matched <Expression>: prd(d, 100, tmp_0)
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: prd(d, 100, tmp_0);
[INFO] Matched <Statement>: prd(d, 100, tmp_0);
[INFO] Matched <BlockItem>:
prd(d, 100, tmp_0);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: m
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: m
[INFO] Matched <LeftValue>: m
[INFO] Matched <PrimaryExpression>: m
[INFO] Matched <UnaryExpression>: m
[INFO] Matched <MultiplicativeExpression>: m
[INFO] Matched <AdditiveExpression>: n + m
[INFO] Matched <Expression>: n + m
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", n + m);
[INFO] Matched <Statement>: printf("%d\n", n + m);
[INFO] Matched <BlockItem>:
printf("%d\n", n + m);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: m
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: m
[INFO] Matched <LeftValue>: m
[INFO] Matched <PrimaryExpression>: m
[INFO] Matched <UnaryExpression>: m
[INFO] Matched <MultiplicativeExpression>: m
[INFO] Matched <AdditiveExpression>: n - m
[INFO] Matched <Expression>: n - m
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", n - m);
[INFO] Matched <Statement>: printf("%d\n", n - m);
[INFO] Matched <BlockItem>:
printf("%d\n", n - m);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: m
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: m
[INFO] Matched <LeftValue>: m
[INFO] Matched <PrimaryExpression>: m
[INFO] Matched <UnaryExpression>: m
[INFO] Matched <MultiplicativeExpression>: n * m
[INFO] Matched <AdditiveExpression>: n * m
[INFO] Matched <Expression>: n * m
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", n * m);
[INFO] Matched <Statement>: printf("%d\n", n * m);
[INFO] Matched <BlockItem>:
printf("%d\n", n * m);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: m
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: m
[INFO] Matched <LeftValue>: m
[INFO] Matched <PrimaryExpression>: m
[INFO] Matched <UnaryExpression>: m
[INFO] Matched <MultiplicativeExpression>: n % m
[INFO] Matched <AdditiveExpression>: n % m
[INFO] Matched <Expression>: n % m
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", n % m);
[INFO] Matched <Statement>: printf("%d\n", n % m);
[INFO] Matched <BlockItem>:
printf("%d\n", n % m);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    pr();
    nonsense();
    n = getInt();
    m = getInt();
    matrix();
    f1(n);
    f2(d);
    f3(n + m);
    f3(tmp_0[0] + tmp_0[1]);
    f3(a_2[0][0] + a_2[0][0]);
    f3(a_2[0][0] * tmp_0[0]);
    f3(tmp_0[0] + n);
    f3(a_2[0][0] + m);
    f4(d[1]);
    f5(tmp_0[0], d[0]);
    f5(n, tmp_0);
    logic();
    int a = n;
    int b = m;
    a = a + -+a;
    b = b - +-a;
    if (a == b) {
        a = 1;
        b = 1;
    } else if (a <= b) {
        a = 1;
        b = 2;
    } else {
        a = 2;
        b = 1;
    }
    if (!a) {
        a = 10000;
    } else {}
    printf("%d -- %d\n", n, m);
    prd(d, 100, tmp_0);
    printf("%d\n", n + m);
    printf("%d\n", n - m);
    printf("%d\n", n * m);
    printf("%d\n", n % m);
    return 0;
}
[INFO] Matched <MainFuncDefinition>:
int main() {
    pr();
    nonsense();
    n = getInt();
    m = getInt();
    matrix();
    f1(n);
    f2(d);
    f3(n + m);
    f3(tmp_0[0] + tmp_0[1]);
    f3(a_2[0][0] + a_2[0][0]);
    f3(a_2[0][0] * tmp_0[0]);
    f3(tmp_0[0] + n);
    f3(a_2[0][0] + m);
    f4(d[1]);
    f5(tmp_0[0], d[0]);
    f5(n, tmp_0);
    logic();
    int a = n;
    int b = m;
    a = a + -+a;
    b = b - +-a;
    if (a == b) {
        a = 1;
        b = 1;
    } else if (a <= b) {
        a = 1;
        b = 2;
    } else {
        a = 2;
        b = 1;
    }
    if (!a) {
        a = 10000;
    } else {}
    printf("%d -- %d\n", n, m);
    prd(d, 100, tmp_0);
    printf("%d\n", n + m);
    printf("%d\n", n - m);
    printf("%d\n", n * m);
    printf("%d\n", n % m);
    return 0;
}
[INFO] Matched <CompileUnit>:
const int N = 510, M = -520, KK = -1;
const int NN = 55, MM = 2222;
const int K = -24;
const int a_3[2] = {4, 5}, a_4[2][2] = {{899, 99}, {1222, 25555}};
const int a_1[2] = {1, 2}, a_2[1][1] = {{2}};
int a[510], b[510][510], n, m;
int xxxx, yyyy;
int t = 1234, u = 2345;
int d[2][2] = {{1 + 3, 2 - 4}, {3 * 5, 4 * 1 + 2}};
int tmp_0[5] = {0, 1, 2, 3, 4};

void pr() {
    return;
}

void nonsense() {
    ;
    ;
    return;
}

void matrix() {
    int m[2][4] = {{-1 + 2 - 3 * 4 / 5 % 6, -1 + 2 + 3 + 4, (1 - 2) - 3 - 4, 1 * 2 * 3 * 4}, {100 / 10 / 10 * (-1), (1 - 2) * (3 + 5), 1, 2}}, m1[3] = {1, -2, 3}, m2[2][2];
    int tu = t + u;
    tu = t * u;
    tmp_0[0] = 5 * 5 + 1;
    m[0][0] = 134 % 100 + -1;
    return;
}

void logic() {
    int i = 0, j = 0;
    if (i <= j) {
        i = j;
    }  
    if (i >= j) {
        i = j;
    }  
    if (i < 100 && j > 100) {}  
    if (i == 0 && j != 0) {}  
    if (i == 0 && !j) {
        printf("YeG1\n");
    }  
    if (!i || j) {
        printf("YeG2\n");
    }  
    if (i || !j) {
        printf("YeG3\n");
    }  
    if (!i || !j) {
        printf("YeG4\n");
    }  
    if (!i && !j) {
        printf("YeG5\n");
    }  
    if (!i != j) {
        i = j;
    }  
    if (i != !j) {
        j = i;
    } else {
        j = i - +-+i * 100 / 10 % 10 * (-1);
    }
    return;
}

int getInt() {
    int a;
    a = getint();
    return a;
}

void prd(int d[][2], int x, int a[]) {
    int i = 0, j = 0;
    for (; i >= 0; ) {
        printf("%d\n", d[i][j]);
        j = j + 1;
        if (j == 2) {
            j = 0;
            i = i + 1;
        }  
        if (i == 2) {
            break;
        } else {
            continue;
        }
    }
    return;
}

void f1(int x) {
    printf("%d", x);
}

void f2(int d[][1 + 1]) {
    d[0][1] = 10000;
}

void f3(int x) {
    ;
    ;
}

void f4(int a[]) {}

void f5(int x, int y[]) {}

int main() {
    pr();
    nonsense();
    n = getInt();
    m = getInt();
    matrix();
    f1(n);
    f2(d);
    f3(n + m);
    f3(tmp_0[0] + tmp_0[1]);
    f3(a_2[0][0] + a_2[0][0]);
    f3(a_2[0][0] * tmp_0[0]);
    f3(tmp_0[0] + n);
    f3(a_2[0][0] + m);
    f4(d[1]);
    f5(tmp_0[0], d[0]);
    f5(n, tmp_0);
    logic();
    int a = n;
    int b = m;
    a = a + -+a;
    b = b - +-a;
    if (a == b) {
        a = 1;
        b = 1;
    } else if (a <= b) {
        a = 1;
        b = 2;
    } else {
        a = 2;
        b = 1;
    }
    if (!a) {
        a = 10000;
    } else {}
    printf("%d -- %d\n", n, m);
    prd(d, 100, tmp_0);
    printf("%d\n", n + m);
    printf("%d\n", n - m);
    printf("%d\n", n * m);
    printf("%d\n", n % m);
    return 0;
}
[INFO] Test 15
[INFO] Matching <CompileUnit>
[INFO] Matching <Declaration>.
[INFO] Matching <ConstDeclaration>.
[INFO] Consumed Token: const
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <ConstDefinition>.
[INFO] Consumed Token: a0
[INFO] Consumed Token: =
[INFO] Matching <ConstInitValue>.
[INFO] Matching <ScalarConstInitValue>.
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <ConstExpression>: 0
[INFO] Matched <ScalarConstInitValue>: 0
[INFO] Matched <ConstInitValue>: 0
[INFO] Matched <ConstDefinition>.a0 = 0
[INFO] Consumed Token: ;
[INFO] Matched <ConstDeclaration>: const int a0 = 0;
[INFO] Matched <Declaration>: const int a0 = 0;
[INFO] Consumed Token: void
[INFO] Consumed Token: f
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: f
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Failed to match <BasicType>.
[INFO] Failed to match <FuncParam>.
[INFO] Failed to match <FuncParamList>.
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return;
}
[INFO] Matched <FuncDefinition>:
void f() {
    return;
}
[INFO] Consumed Token: void
[INFO] Consumed Token: ff
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: void
[INFO] Matched <FuncType>: void
[INFO] Consumed Token: ff
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: b
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: c
[INFO] Matched <FuncParamList>: int a, int b, int c
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Matched <LeftValue>: c
[INFO] Matched <PrimaryExpression>: c
[INFO] Matched <UnaryExpression>: c
[INFO] Matched <MultiplicativeExpression>: c
[INFO] Matched <AdditiveExpression>: c
[INFO] Matched <Expression>: c
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Matched <LeftValue>: c
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Matched <LeftValue>: c
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: c
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: c
[INFO] Matched <LeftValue>: c
[INFO] Matched <PrimaryExpression>: c
[INFO] Matched <UnaryExpression>: c
[INFO] Matched <MultiplicativeExpression>: c
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: c + 1
[INFO] Matched <Expression>: c + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: c = c + 1;
[INFO] Matched <Statement>: c = c + 1;
[INFO] Matched <BlockItem>:
c = c + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return;
[INFO] Matched <Statement>: return;
[INFO] Matched <BlockItem>:
return;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    c = c + 1;
    return;
}
[INFO] Matched <FuncDefinition>:
void ff(int a, int b, int c) {
    c = c + 1;
    return;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: fd
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: fd
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Matched <FuncParamList>: int a
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a
[INFO] Matched <LeftValue>: a
[INFO] Matched <PrimaryExpression>: a
[INFO] Matched <UnaryExpression>: a
[INFO] Matched <MultiplicativeExpression>: a
[INFO] Matched <AdditiveExpression>: a
[INFO] Matched <Expression>: a
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return a;
[INFO] Matched <Statement>: return a;
[INFO] Matched <BlockItem>:
return a;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return a;
}
[INFO] Matched <FuncDefinition>:
int fd(int a) {
    return a;
}
[INFO] Consumed Token: int
[INFO] Consumed Token: fk
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncDefinition>.
[INFO] Matching <FuncType>.
[INFO] Consumed Token: int
[INFO] Matched <FuncType>: int
[INFO] Consumed Token: fk
[INFO] Consumed Token: (
[INFO] Matching <FuncParamList>.
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: a
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: b
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int b[]
[INFO] Consumed Token: ,
[INFO] Matching <FuncParam>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Consumed Token: c
[INFO] Consumed Token: [
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <FuncParam>: int c[][2]
[INFO] Matched <FuncParamList>: int a, int b[], int c[][2]
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 1;
[INFO] Matched <Statement>: return 1;
[INFO] Matched <BlockItem>:
return 1;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    return 1;
}
[INFO] Matched <FuncDefinition>:
int fk(int a, int b[], int c[][2]) {
    return 1;
}
[INFO] Consumed Token: int
[INFO] Lexer rolling back...
[INFO] Matching <MainFuncDefinition>.
[INFO] Consumed Token: int
[INFO] Consumed Token: main
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "21371064"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("21371064");
[INFO] Matched <Statement>: printf("21371064");
[INFO] Matched <BlockItem>:
printf("21371064");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("\n");
[INFO] Matched <Statement>: printf("\n");
[INFO] Matched <BlockItem>:
printf("\n");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "heihei%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a0
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a0
[INFO] Matched <LeftValue>: a0
[INFO] Matched <PrimaryExpression>: a0
[INFO] Matched <UnaryExpression>: a0
[INFO] Matched <MultiplicativeExpression>: a0
[INFO] Matched <AdditiveExpression>: a0
[INFO] Matched <Expression>: a0
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("heihei%d\n", a0);
[INFO] Matched <Statement>: printf("heihei%d\n", a0);
[INFO] Matched <BlockItem>:
printf("heihei%d\n", a0);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "%d\n"
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 8
[INFO] Matched <Number>: 8
[INFO] Matched <PrimaryExpression>: 8
[INFO] Matched <UnaryExpression>: 8
[INFO] Matched <MultiplicativeExpression>: 8
[INFO] Matched <AdditiveExpression>: 8
[INFO] Matched <Expression>: 8
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("%d\n", 8);
[INFO] Matched <Statement>: printf("%d\n", 8);
[INFO] Matched <BlockItem>:
printf("%d\n", 8);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "AC\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("AC\n");
[INFO] Matched <Statement>: printf("AC\n");
[INFO] Matched <BlockItem>:
printf("AC\n");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "WA\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("WA\n");
[INFO] Matched <Statement>: printf("WA\n");
[INFO] Matched <BlockItem>:
printf("WA\n");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "TLE\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("TLE\n");
[INFO] Matched <Statement>: printf("TLE\n");
[INFO] Matched <BlockItem>:
printf("TLE\n");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "RE\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("RE\n");
[INFO] Matched <Statement>: printf("RE\n");
[INFO] Matched <BlockItem>:
printf("RE\n");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "PE\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("PE\n");
[INFO] Matched <Statement>: printf("PE\n");
[INFO] Matched <BlockItem>:
printf("PE\n");
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <PrintfStatement>.
[INFO] Consumed Token: printf
[INFO] Consumed Token: (
[INFO] Consumed Token: "AK!!\n"
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <PrintfStatement>: printf("AK!!\n");
[INFO] Matched <Statement>: printf("AK!!\n");
[INFO] Matched <BlockItem>:
printf("AK!!\n");
[INFO] Consumed Token: int
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: a1
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Matched <VarDefinition>: a1 = 1
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int a1 = 1;
[INFO] Matched <Declaration>: int a1 = 1;
[INFO] Matched <BlockItem>:
int a1 = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a0
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a0
[INFO] Matched <LeftValue>: a0
[INFO] Matched <PrimaryExpression>: a0
[INFO] Matched <UnaryExpression>: a0
[INFO] Matched <MultiplicativeExpression>: a0
[INFO] Matched <AdditiveExpression>: a0
[INFO] Consumed Token: <
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <RelationalExpression>: a0 < a1
[INFO] Matched <EqualityExpression>: a0 < a1
[INFO] Matched <LogicalAndExpression>: a0 < a1
[INFO] Matched <LogicalOrExpression>: a0 < a1
[INFO] Matched <Condition>: a0 < a1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <Expression>: a1
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a1 = 1;
[INFO] Matched <Statement>: a1 = 1;
[INFO] Matched <IfStatement>:
if (a0 < a1) a1 = 1;  
[INFO] Matched <Statement>:
if (a0 < a1) a1 = 1;  
[INFO] Matched <BlockItem>:
if (a0 < a1) a1 = 1;  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a0
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a0
[INFO] Matched <LeftValue>: a0
[INFO] Matched <PrimaryExpression>: a0
[INFO] Matched <UnaryExpression>: a0
[INFO] Matched <MultiplicativeExpression>: a0
[INFO] Matched <AdditiveExpression>: a0
[INFO] Consumed Token: >
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <RelationalExpression>: a0 > a1
[INFO] Matched <EqualityExpression>: a0 > a1
[INFO] Matched <LogicalAndExpression>: a0 > a1
[INFO] Matched <LogicalOrExpression>: a0 > a1
[INFO] Matched <Condition>: a0 > a1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <Expression>: a1
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a1 = 1;
[INFO] Matched <Statement>: a1 = 1;
[INFO] Consumed Token: else
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <Expression>: a1
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a1 = 1;
[INFO] Matched <Statement>: a1 = 1;
[INFO] Matched <IfStatement>:
if (a0 > a1) a1 = 1; else a1 = 1;
[INFO] Matched <Statement>:
if (a0 > a1) a1 = 1; else a1 = 1;
[INFO] Matched <BlockItem>:
if (a0 > a1) a1 = 1; else a1 = 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a0
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a0
[INFO] Matched <LeftValue>: a0
[INFO] Matched <PrimaryExpression>: a0
[INFO] Matched <UnaryExpression>: a0
[INFO] Matched <MultiplicativeExpression>: a0
[INFO] Matched <AdditiveExpression>: a0
[INFO] Matched <RelationalExpression>: a0
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <RelationalExpression>: a1
[INFO] Matched <EqualityExpression>: a0 == a1
[INFO] Matched <LogicalAndExpression>: a0 == a1
[INFO] Matched <LogicalOrExpression>: a0 == a1
[INFO] Matched <Condition>: a0 == a1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <Expression>: a1
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 3 * 4
[INFO] Matched <AdditiveExpression>: 3 * 4
[INFO] Matched <Expression>: 3 * 4
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a1 = 3 * 4;
[INFO] Matched <Statement>: a1 = 3 * 4;
[INFO] Matched <IfStatement>:
if (a0 == a1) a1 = 3 * 4;  
[INFO] Matched <Statement>:
if (a0 == a1) a1 = 3 * 4;  
[INFO] Matched <BlockItem>:
if (a0 == a1) a1 = 3 * 4;  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <UnaryOperatedExpression>.
[INFO] Matching <UnaryOperator>.
[INFO] Consumed Token: !
[INFO] Matched <UnaryOperator>: !
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <UnaryOperatedExpression>: !a1
[INFO] Matched <UnaryExpression>: !a1
[INFO] Matched <MultiplicativeExpression>: !a1
[INFO] Matched <AdditiveExpression>: !a1
[INFO] Matched <RelationalExpression>: !a1
[INFO] Matched <EqualityExpression>: !a1
[INFO] Matched <LogicalAndExpression>: !a1
[INFO] Matched <LogicalOrExpression>: !a1
[INFO] Matched <Condition>: !a1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <Expression>: a1
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 3 - 4 + 5
[INFO] Matched <Expression>: 3 - 4 + 5
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a1 = 3 - 4 + 5;
[INFO] Matched <Statement>: a1 = 3 - 4 + 5;
[INFO] Matched <IfStatement>:
if (!a1) a1 = 3 - 4 + 5;  
[INFO] Matched <Statement>:
if (!a1) a1 = 3 - 4 + 5;  
[INFO] Matched <BlockItem>:
if (!a1) a1 = 3 - 4 + 5;  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a0
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a0
[INFO] Matched <LeftValue>: a0
[INFO] Matched <PrimaryExpression>: a0
[INFO] Matched <UnaryExpression>: a0
[INFO] Matched <MultiplicativeExpression>: a0
[INFO] Matched <AdditiveExpression>: a0
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <RelationalExpression>: a0 >= a1
[INFO] Matched <EqualityExpression>: a0 >= a1
[INFO] Matched <LogicalAndExpression>: a0 >= a1
[INFO] Matched <LogicalOrExpression>: a0 >= a1
[INFO] Matched <Condition>: a0 >= a1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <Expression>: a1
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 9
[INFO] Matched <Number>: 9
[INFO] Matched <PrimaryExpression>: 9
[INFO] Matched <UnaryExpression>: 9
[INFO] Matched <MultiplicativeExpression>: 9
[INFO] Matched <AdditiveExpression>: 9
[INFO] Matched <Expression>: 9
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a1 = 9;
[INFO] Matched <Statement>: a1 = 9;
[INFO] Matched <IfStatement>:
if (a0 >= a1) a1 = 9;  
[INFO] Matched <Statement>:
if (a0 >= a1) a1 = 9;  
[INFO] Matched <BlockItem>:
if (a0 >= a1) a1 = 9;  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a0
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a0
[INFO] Matched <LeftValue>: a0
[INFO] Matched <PrimaryExpression>: a0
[INFO] Matched <UnaryExpression>: a0
[INFO] Matched <MultiplicativeExpression>: a0
[INFO] Matched <AdditiveExpression>: a0
[INFO] Consumed Token: <=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <RelationalExpression>: a0 <= a1
[INFO] Matched <EqualityExpression>: a0 <= a1
[INFO] Matched <LogicalAndExpression>: a0 <= a1
[INFO] Matched <LogicalOrExpression>: a0 <= a1
[INFO] Matched <Condition>: a0 <= a1
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <Expression>: a1
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 10
[INFO] Matched <Number>: 10
[INFO] Matched <PrimaryExpression>: 10
[INFO] Matched <UnaryExpression>: 10
[INFO] Matched <MultiplicativeExpression>: 10
[INFO] Matched <AdditiveExpression>: 10
[INFO] Matched <Expression>: 10
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a1 = 10;
[INFO] Matched <Statement>: a1 = 10;
[INFO] Matched <IfStatement>:
if (a0 <= a1) a1 = 10;  
[INFO] Matched <Statement>:
if (a0 <= a1) a1 = 10;  
[INFO] Matched <BlockItem>:
if (a0 <= a1) a1 = 10;  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a0
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a0
[INFO] Matched <LeftValue>: a0
[INFO] Matched <PrimaryExpression>: a0
[INFO] Matched <UnaryExpression>: a0
[INFO] Matched <MultiplicativeExpression>: a0
[INFO] Matched <AdditiveExpression>: a0
[INFO] Consumed Token: >=
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <RelationalExpression>: a0 >= a1
[INFO] Matched <EqualityExpression>: a0 >= a1
[INFO] Matched <LogicalAndExpression>: a0 >= a1
[INFO] Matched <LogicalOrExpression>: a0 >= a1
[INFO] Matched <Condition>: a0 >= a1
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <RelationalExpression>: a1
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <RelationalExpression>: 4
[INFO] Matched <EqualityExpression>: a1 == 4
[INFO] Matched <LogicalAndExpression>: a1 == 4
[INFO] Matched <LogicalOrExpression>: a1 == 4
[INFO] Matched <Condition>: a1 == 4
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <Expression>: a1
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <Expression>: 5
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a1 = 5;
[INFO] Matched <Statement>: a1 = 5;
[INFO] Matched <IfStatement>:
if (a1 == 4) a1 = 5;  
[INFO] Matched <Statement>:
if (a1 == 4) a1 = 5;  
[INFO] Matched <BlockItem>:
if (a1 == 4) a1 = 5;  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <BreakStatement>.
[INFO] Consumed Token: break
[INFO] Consumed Token: ;
[INFO] Matched <BreakStatement>: break;
[INFO] Matched <Statement>: break;
[INFO] Matched <BlockItem>:
break;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ContinueStatement>.
[INFO] Consumed Token: continue
[INFO] Consumed Token: ;
[INFO] Matched <ContinueStatement>: continue;
[INFO] Matched <Statement>: continue;
[INFO] Matched <BlockItem>:
continue;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    if (a1 == 4) a1 = 5;  
    break;
    continue;
}
[INFO] Matched <Statement>:
{
    if (a1 == 4) a1 = 5;  
    break;
    continue;
}
[INFO] Matched <ForStatementSelection>:
for (; a0 >= a1; ) {
    if (a1 == 4) a1 = 5;  
    break;
    continue;
}
[INFO] Matched <Statement>:
for (; a0 >= a1; ) {
    if (a1 == 4) a1 = 5;  
    break;
    continue;
}
[INFO] Matched <BlockItem>:
for (; a0 >= a1; ) {
    if (a1 == 4) a1 = 5;  
    break;
    continue;
}
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <Expression>: a1
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 3 / 5
[INFO] Matched <AdditiveExpression>: 3 / 5
[INFO] Matched <Expression>: 3 / 5
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a1 = 3 / 5;
[INFO] Matched <Statement>: a1 = 3 / 5;
[INFO] Matched <BlockItem>:
a1 = 3 / 5;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <Expression>: a1
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: a1 % 6
[INFO] Matched <AdditiveExpression>: a1 % 6
[INFO] Matched <Expression>: a1 % 6
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a1 = a1 % 6;
[INFO] Matched <Statement>: a1 = a1 % 6;
[INFO] Matched <BlockItem>:
a1 = a1 % 6;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <Expression>: a1
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a1 = 2;
[INFO] Matched <Statement>: a1 = 2;
[INFO] Matched <BlockItem>:
a1 = 2;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <RelationalExpression>: a1
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <RelationalExpression>: 2
[INFO] Matched <EqualityExpression>: a1 == 2
[INFO] Matched <LogicalAndExpression>: a1 == 2
[INFO] Matched <LogicalOrExpression>: a1 == 2
[INFO] Matched <Condition>: a1 == 2
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <Expression>: a1
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a1 = 3;
[INFO] Matched <Statement>: a1 = 3;
[INFO] Matched <BlockItem>:
a1 = 3;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <Expression>: a1
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <Expression>: 4
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a1 = 4;
[INFO] Matched <Statement>: a1 = 4;
[INFO] Matched <BlockItem>:
a1 = 4;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a1 = 3;
    a1 = 4;
}
[INFO] Matched <Statement>:
{
    a1 = 3;
    a1 = 4;
}
[INFO] Matched <IfStatement>:
if (a1 == 2) {
    a1 = 3;
    a1 = 4;
}  
[INFO] Matched <Statement>:
if (a1 == 2) {
    a1 = 3;
    a1 = 4;
}  
[INFO] Matched <BlockItem>:
if (a1 == 2) {
    a1 = 3;
    a1 = 4;
}  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ForStatementSelection>.
[INFO] Consumed Token: for
[INFO] Consumed Token: (
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: ;
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <RelationalExpression>: a1
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <RelationalExpression>: 4
[INFO] Matched <EqualityExpression>: a1 == 4
[INFO] Matched <LogicalAndExpression>: a1 == 4
[INFO] Matched <LogicalOrExpression>: a1 == 4
[INFO] Matched <Condition>: a1 == 4
[INFO] Consumed Token: ;
[INFO] Matching <ForStatement>.
[INFO] Matching <LeftValue>.
[INFO] Failed to match <LeftValue>.
[INFO] Failed to match <ForStatement>.
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <Block>.
[INFO] Consumed Token: {
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <Expression>: a1
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: a1 + 1
[INFO] Matched <Expression>: a1 + 1
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a1 = a1 + 1;
[INFO] Matched <Statement>: a1 = a1 + 1;
[INFO] Matched <BlockItem>:
a1 = a1 + 1;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ContinueStatement>.
[INFO] Consumed Token: continue
[INFO] Consumed Token: ;
[INFO] Matched <ContinueStatement>: continue;
[INFO] Matched <Statement>: continue;
[INFO] Matched <BlockItem>:
continue;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    a1 = a1 + 1;
    continue;
}
[INFO] Matched <Statement>:
{
    a1 = a1 + 1;
    continue;
}
[INFO] Matched <ForStatementSelection>:
for (; a1 == 4; ) {
    a1 = a1 + 1;
    continue;
}
[INFO] Matched <Statement>:
for (; a1 == 4; ) {
    a1 = a1 + 1;
    continue;
}
[INFO] Matched <BlockItem>:
for (; a1 == 4; ) {
    a1 = a1 + 1;
    continue;
}
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <RelationalExpression>: a1
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 5
[INFO] Matched <RelationalExpression>: 5
[INFO] Matched <EqualityExpression>: a1 == 5
[INFO] Consumed Token: &&
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <RelationalExpression>: a1
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <RelationalExpression>: 4
[INFO] Matched <EqualityExpression>: a1 == 4
[INFO] Matched <LogicalAndExpression>: a1 == 5 && a1 == 4
[INFO] Matched <LogicalOrExpression>: a1 == 5 && a1 == 4
[INFO] Matched <Condition>: a1 == 5 && a1 == 4
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <Expression>: a1
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: 6
[INFO] Matched <Expression>: 6
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a1 = 6;
[INFO] Matched <Statement>: a1 = 6;
[INFO] Matched <IfStatement>:
if (a1 == 5 && a1 == 4) a1 = 6;  
[INFO] Matched <Statement>:
if (a1 == 5 && a1 == 4) a1 = 6;  
[INFO] Matched <BlockItem>:
if (a1 == 5 && a1 == 4) a1 = 6;  
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <IfStatement>.
[INFO] Consumed Token: if
[INFO] Consumed Token: (
[INFO] Matching <Condition>.
[INFO] Matching <LogicalOrExpression>.
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <RelationalExpression>: a1
[INFO] Consumed Token: !=
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 6
[INFO] Matched <AdditiveExpression>: 6
[INFO] Matched <RelationalExpression>: 6
[INFO] Matched <EqualityExpression>: a1 != 6
[INFO] Matched <LogicalAndExpression>: a1 != 6
[INFO] Consumed Token: ||
[INFO] Matching <LogicalAndExpression>.
[INFO] Matching <EqualityExpression>.
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <RelationalExpression>: a1
[INFO] Consumed Token: ==
[INFO] Matching <RelationalExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <RelationalExpression>: 3
[INFO] Matched <EqualityExpression>: a1 == 3
[INFO] Matched <LogicalAndExpression>: a1 == 3
[INFO] Matched <LogicalOrExpression>: a1 != 6 || a1 == 3
[INFO] Matched <Condition>: a1 != 6 || a1 == 3
[INFO] Consumed Token: )
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <Expression>: a1
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a0
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a0
[INFO] Matched <LeftValue>: a0
[INFO] Matched <PrimaryExpression>: a0
[INFO] Matched <UnaryExpression>: a0
[INFO] Matched <MultiplicativeExpression>: a0
[INFO] Matched <AdditiveExpression>: a0
[INFO] Matched <Expression>: a0
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: a1 = a0;
[INFO] Matched <Statement>: a1 = a0;
[INFO] Matched <IfStatement>:
if (a1 != 6 || a1 == 3) a1 = a0;  
[INFO] Matched <Statement>:
if (a1 != 6 || a1 == 3) a1 = a0;  
[INFO] Matched <BlockItem>:
if (a1 != 6 || a1 == 3) a1 = a0;  
[INFO] Consumed Token: int
[INFO] Consumed Token: a2
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a2
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a2
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: a2
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Matched <VarDefinition>: a2[2]
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: a3
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2}
[INFO] Matched <VarInitValue>: {1, 2}
[INFO] Matched <VarDefinition>: a3[2] = {1, 2}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int a2[2], a3[2] = {1, 2};
[INFO] Matched <Declaration>: int a2[2], a3[2] = {1, 2};
[INFO] Matched <BlockItem>:
int a2[2], a3[2] = {1, 2};
[INFO] Consumed Token: int
[INFO] Consumed Token: a4
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a4
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a4
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: a4
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2}
[INFO] Matched <VarInitValue>: {1, 2}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <Expression>: 4
[INFO] Matched <ScalarVarInitValue>: 4
[INFO] Matched <VarInitValue>: 4
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {3, 4}
[INFO] Matched <VarInitValue>: {3, 4}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{1, 2}, {3, 4}}
[INFO] Matched <VarInitValue>: {{1, 2}, {3, 4}}
[INFO] Matched <VarDefinition>: a4[2][2] = {{1, 2}, {3, 4}}
[INFO] Consumed Token: ,
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: a5
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <ConstExpression>: 3
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Matched <AdditiveExpression>: 3
[INFO] Matched <Expression>: 3
[INFO] Matched <ScalarVarInitValue>: 3
[INFO] Matched <VarInitValue>: 3
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2, 3}
[INFO] Matched <VarInitValue>: {1, 2, 3}
[INFO] Matched <VarDefinition>: a5[3] = {1, 2, 3}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int a4[2][2] = {{1, 2}, {3, 4}}, a5[3] = {1, 2, 3};
[INFO] Matched <Declaration>: int a4[2][2] = {{1, 2}, {3, 4}}, a5[3] = {1, 2, 3};
[INFO] Matched <BlockItem>:
int a4[2][2] = {{1, 2}, {3, 4}}, a5[3] = {1, 2, 3};
[INFO] Consumed Token: int
[INFO] Consumed Token: a6
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a6
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: a6
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: a6
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2}
[INFO] Matched <VarInitValue>: {1, 2}
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Matched <ScalarVarInitValue>: 1
[INFO] Matched <VarInitValue>: 1
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <Expression>: 2
[INFO] Matched <ScalarVarInitValue>: 2
[INFO] Matched <VarInitValue>: 2
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {1, 2}
[INFO] Matched <VarInitValue>: {1, 2}
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {{1, 2}, {1, 2}}
[INFO] Matched <VarInitValue>: {{1, 2}, {1, 2}}
[INFO] Matched <VarDefinition>: a6[2][2] = {{1, 2}, {1, 2}}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int a6[2][2] = {{1, 2}, {1, 2}};
[INFO] Matched <Declaration>: int a6[2][2] = {{1, 2}, {1, 2}};
[INFO] Matched <BlockItem>:
int a6[2][2] = {{1, 2}, {1, 2}};
[INFO] Consumed Token: int
[INFO] Consumed Token: C
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: C
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: C
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: C
[INFO] Consumed Token: [
[INFO] Matching <ConstExpression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Matched <MultiplicativeExpression>: 2
[INFO] Matched <AdditiveExpression>: 2
[INFO] Matched <ConstExpression>: 2
[INFO] Consumed Token: ]
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ArrayVarInitValue>.
[INFO] Consumed Token: {
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Consumed Token: /
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Consumed Token: *
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 2
[INFO] Matched <Number>: 2
[INFO] Matched <PrimaryExpression>: 2
[INFO] Matched <UnaryExpression>: 2
[INFO] Consumed Token: %
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 6
[INFO] Matched <Number>: 6
[INFO] Matched <PrimaryExpression>: 6
[INFO] Matched <UnaryExpression>: 6
[INFO] Matched <MultiplicativeExpression>: 2 / 4 * 2 % 6
[INFO] Consumed Token: -
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 5
[INFO] Matched <Number>: 5
[INFO] Matched <PrimaryExpression>: 5
[INFO] Matched <UnaryExpression>: 5
[INFO] Matched <MultiplicativeExpression>: 5
[INFO] Matched <AdditiveExpression>: 4 + 2 / 4 * 2 % 6 - 5
[INFO] Matched <Expression>: 4 + 2 / 4 * 2 % 6 - 5
[INFO] Matched <ScalarVarInitValue>: 4 + 2 / 4 * 2 % 6 - 5
[INFO] Matched <VarInitValue>: 4 + 2 / 4 * 2 % 6 - 5
[INFO] Consumed Token: ,
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 9
[INFO] Matched <Number>: 9
[INFO] Matched <PrimaryExpression>: 9
[INFO] Matched <UnaryExpression>: 9
[INFO] Matched <MultiplicativeExpression>: 9
[INFO] Matched <AdditiveExpression>: 9
[INFO] Matched <Expression>: 9
[INFO] Matched <ScalarVarInitValue>: 9
[INFO] Matched <VarInitValue>: 9
[INFO] Consumed Token: }
[INFO] Matched <ArrayVarInitValue>: {4 + 2 / 4 * 2 % 6 - 5, 9}
[INFO] Matched <VarInitValue>: {4 + 2 / 4 * 2 % 6 - 5, 9}
[INFO] Matched <VarDefinition>: C[2] = {4 + 2 / 4 * 2 % 6 - 5, 9}
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int C[2] = {4 + 2 / 4 * 2 % 6 - 5, 9};
[INFO] Matched <Declaration>: int C[2] = {4 + 2 / 4 * 2 % 6 - 5, 9};
[INFO] Matched <BlockItem>:
int C[2] = {4 + 2 / 4 * 2 % 6 - 5, 9};
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: C
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: C
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: C[0]
[INFO] Matched <PrimaryExpression>: C[0]
[INFO] Matched <UnaryExpression>: C[0]
[INFO] Matched <MultiplicativeExpression>: C[0]
[INFO] Matched <AdditiveExpression>: C[0]
[INFO] Matched <Expression>: C[0]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: C
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: C[0]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: C
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: C[0]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: fd
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: fd
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a1
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a1
[INFO] Matched <LeftValue>: a1
[INFO] Matched <PrimaryExpression>: a1
[INFO] Matched <UnaryExpression>: a1
[INFO] Matched <MultiplicativeExpression>: a1
[INFO] Matched <AdditiveExpression>: a1
[INFO] Matched <Expression>: a1
[INFO] Matched <FuncArgList>: a1
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: fd(a1)
[INFO] Matched <UnaryExpression>: fd(a1)
[INFO] Matched <MultiplicativeExpression>: fd(a1)
[INFO] Matched <AdditiveExpression>: fd(a1)
[INFO] Matched <Expression>: fd(a1)
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: C[0] = fd(a1);
[INFO] Matched <Statement>: C[0] = fd(a1);
[INFO] Matched <BlockItem>:
C[0] = fd(a1);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: C
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: C
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: C[1]
[INFO] Matched <PrimaryExpression>: C[1]
[INFO] Matched <UnaryExpression>: C[1]
[INFO] Matched <MultiplicativeExpression>: C[1]
[INFO] Matched <AdditiveExpression>: C[1]
[INFO] Matched <Expression>: C[1]
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: C
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: C[1]
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: C
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: C[1]
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: fk
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: fk
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: C
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: C
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: C[1]
[INFO] Matched <PrimaryExpression>: C[1]
[INFO] Matched <UnaryExpression>: C[1]
[INFO] Matched <MultiplicativeExpression>: C[1]
[INFO] Matched <AdditiveExpression>: C[1]
[INFO] Matched <Expression>: C[1]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a2
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a2
[INFO] Matched <LeftValue>: a2
[INFO] Matched <PrimaryExpression>: a2
[INFO] Matched <UnaryExpression>: a2
[INFO] Matched <MultiplicativeExpression>: a2
[INFO] Matched <AdditiveExpression>: a2
[INFO] Matched <Expression>: a2
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a4
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a4
[INFO] Matched <LeftValue>: a4
[INFO] Matched <PrimaryExpression>: a4
[INFO] Matched <UnaryExpression>: a4
[INFO] Matched <MultiplicativeExpression>: a4
[INFO] Matched <AdditiveExpression>: a4
[INFO] Matched <Expression>: a4
[INFO] Matched <FuncArgList>: C[1], a2, a4
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: fk(C[1], a2, a4)
[INFO] Matched <UnaryExpression>: fk(C[1], a2, a4)
[INFO] Matched <MultiplicativeExpression>: fk(C[1], a2, a4)
[INFO] Matched <AdditiveExpression>: fk(C[1], a2, a4)
[INFO] Matched <Expression>: fk(C[1], a2, a4)
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: C[1] = fk(C[1], a2, a4);
[INFO] Matched <Statement>: C[1] = fk(C[1], a2, a4);
[INFO] Matched <BlockItem>:
C[1] = fk(C[1], a2, a4);
[INFO] Consumed Token: int
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <BlockItem>.
[INFO] Consumed Token: int
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <Declaration>.
[INFO] Consumed Token: int
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <VarDeclaration>.
[INFO] Matching <BasicType>
[INFO] Consumed Token: int
[INFO] Matched <BasicType>: int
[INFO] Matching <VarDefinition>.
[INFO] Consumed Token: n
[INFO] Consumed Token: =
[INFO] Matching <VarInitValue>.
[INFO] Matching <ScalarVarInitValue>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 4
[INFO] Matched <Number>: 4
[INFO] Matched <PrimaryExpression>: 4
[INFO] Matched <UnaryExpression>: 4
[INFO] Matched <MultiplicativeExpression>: 4
[INFO] Matched <AdditiveExpression>: 4
[INFO] Matched <Expression>: 4
[INFO] Matched <ScalarVarInitValue>: 4
[INFO] Matched <VarInitValue>: 4
[INFO] Matched <VarDefinition>: n = 4
[INFO] Consumed Token: ;
[INFO] Matched <VarDeclaration>: int n = 4;
[INFO] Matched <Declaration>: int n = 4;
[INFO] Matched <BlockItem>:
int n = 4;
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Matched <Expression>: n
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Consumed Token: =
[INFO] Consumed Token: getint
[INFO] Consumed Token: (
[INFO] Consumed Token: )
[INFO] Consumed Token: ;
[INFO] Matched <GetIntStatement>: n = getint();
[INFO] Matched <Statement>: n = getint();
[INFO] Matched <BlockItem>:
n = getint();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: f
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: f
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Failed to match <UnaryExpression>.
[INFO] Failed to match <MultiplicativeExpression>.
[INFO] Failed to match <AdditiveExpression>.
[INFO] Failed to match <Expression>.
[INFO] Failed to match <FuncArgList>.
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: f()
[INFO] Matched <UnaryExpression>: f()
[INFO] Matched <MultiplicativeExpression>: f()
[INFO] Matched <AdditiveExpression>: f()
[INFO] Matched <Expression>: f()
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: f();
[INFO] Matched <Statement>: f();
[INFO] Matched <BlockItem>:
f();
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: ff
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: ff
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: C
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: C
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: C[1]
[INFO] Matched <PrimaryExpression>: C[1]
[INFO] Matched <UnaryExpression>: C[1]
[INFO] Matched <MultiplicativeExpression>: C[1]
[INFO] Matched <AdditiveExpression>: C[1]
[INFO] Matched <Expression>: C[1]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a4
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a4
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a4[1][0]
[INFO] Matched <PrimaryExpression>: a4[1][0]
[INFO] Matched <UnaryExpression>: a4[1][0]
[INFO] Matched <MultiplicativeExpression>: a4[1][0]
[INFO] Matched <AdditiveExpression>: a4[1][0]
[INFO] Matched <Expression>: a4[1][0]
[INFO] Consumed Token: ,
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a6
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a6
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Consumed Token: [
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 1
[INFO] Matched <Number>: 1
[INFO] Matched <PrimaryExpression>: 1
[INFO] Matched <UnaryExpression>: 1
[INFO] Matched <MultiplicativeExpression>: 1
[INFO] Matched <AdditiveExpression>: 1
[INFO] Matched <Expression>: 1
[INFO] Consumed Token: ]
[INFO] Matched <LeftValue>: a6[1][1]
[INFO] Matched <PrimaryExpression>: a6[1][1]
[INFO] Matched <UnaryExpression>: a6[1][1]
[INFO] Matched <MultiplicativeExpression>: a6[1][1]
[INFO] Matched <AdditiveExpression>: a6[1][1]
[INFO] Matched <Expression>: a6[1][1]
[INFO] Matched <FuncArgList>: C[1], a4[1][0], a6[1][1]
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: ff(C[1], a4[1][0], a6[1][1])
[INFO] Matched <UnaryExpression>: ff(C[1], a4[1][0], a6[1][1])
[INFO] Matched <MultiplicativeExpression>: ff(C[1], a4[1][0], a6[1][1])
[INFO] Matched <AdditiveExpression>: ff(C[1], a4[1][0], a6[1][1])
[INFO] Matched <Expression>: ff(C[1], a4[1][0], a6[1][1])
[INFO] Consumed Token: ;
[INFO] Matched <ExpressionStatement>: ff(C[1], a4[1][0], a6[1][1]);
[INFO] Matched <Statement>: ff(C[1], a4[1][0], a6[1][1]);
[INFO] Matched <BlockItem>:
ff(C[1], a4[1][0], a6[1][1]);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ExpressionStatement>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: n
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Matched <PrimaryExpression>: n
[INFO] Matched <UnaryExpression>: n
[INFO] Matched <MultiplicativeExpression>: n
[INFO] Matched <AdditiveExpression>: n
[INFO] Matched <Expression>: n
[INFO] Failed to match <ExpressionStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <GetIntStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Consumed Token: =
[INFO] Failed to match <GetIntStatement>.
[INFO] Lexer rolling back...
[INFO] Matching <AssignmentStatement>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: n
[INFO] Matched <LeftValue>: n
[INFO] Consumed Token: =
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: fd
[INFO] Consumed Token: (
[INFO] Lexer rolling back...
[INFO] Matching <FuncInvocation>.
[INFO] Consumed Token: fd
[INFO] Consumed Token: (
[INFO] Matching <FuncArgList>.
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 3
[INFO] Matched <Number>: 3
[INFO] Matched <PrimaryExpression>: 3
[INFO] Matched <UnaryExpression>: 3
[INFO] Matched <MultiplicativeExpression>: 3
[INFO] Consumed Token: +
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Consumed Token: a0
[INFO] Lexer rolling back...
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <LeftValue>.
[INFO] Consumed Token: a0
[INFO] Matched <LeftValue>: a0
[INFO] Matched <PrimaryExpression>: a0
[INFO] Matched <UnaryExpression>: a0
[INFO] Matched <MultiplicativeExpression>: a0
[INFO] Matched <AdditiveExpression>: 3 + a0
[INFO] Matched <Expression>: 3 + a0
[INFO] Matched <FuncArgList>: 3 + a0
[INFO] Consumed Token: )
[INFO] Matched <FuncInvocation>: fd(3 + a0)
[INFO] Matched <UnaryExpression>: fd(3 + a0)
[INFO] Matched <MultiplicativeExpression>: fd(3 + a0)
[INFO] Matched <AdditiveExpression>: fd(3 + a0)
[INFO] Matched <Expression>: fd(3 + a0)
[INFO] Consumed Token: ;
[INFO] Matched <AssignmentStatement>: n = fd(3 + a0);
[INFO] Matched <Statement>: n = fd(3 + a0);
[INFO] Matched <BlockItem>:
n = fd(3 + a0);
[INFO] Matching <BlockItem>.
[INFO] Matching <Statement>.
[INFO] Matching <ReturnStatement>.
[INFO] Consumed Token: return
[INFO] Matching <Expression>.
[INFO] Matching <AdditiveExpression>.
[INFO] Matching <MultiplicativeExpression>.
[INFO] Matching <UnaryExpression>.
[INFO] Matching <PrimaryExpression>.
[INFO] Matching <Number>.
[INFO] Consumed Token: 0
[INFO] Matched <Number>: 0
[INFO] Matched <PrimaryExpression>: 0
[INFO] Matched <UnaryExpression>: 0
[INFO] Matched <MultiplicativeExpression>: 0
[INFO] Matched <AdditiveExpression>: 0
[INFO] Matched <Expression>: 0
[INFO] Consumed Token: ;
[INFO] Matched <ReturnStatement>: return 0;
[INFO] Matched <Statement>: return 0;
[INFO] Matched <BlockItem>:
return 0;
[INFO] Consumed Token: }
[INFO] Matched <Block>:
{
    printf("21371064");
    printf("\n");
    printf("heihei%d\n", a0);
    printf("%d\n", 8);
    printf("AC\n");
    printf("WA\n");
    printf("TLE\n");
    printf("RE\n");
    printf("PE\n");
    printf("AK!!\n");
    int a1 = 1;
    if (a0 < a1) a1 = 1;  
    if (a0 > a1) a1 = 1; else a1 = 1;
    if (a0 == a1) a1 = 3 * 4;  
    if (!a1) a1 = 3 - 4 + 5;  
    if (a0 >= a1) a1 = 9;  
    if (a0 <= a1) a1 = 10;  
    for (; a0 >= a1; ) {
        if (a1 == 4) a1 = 5;  
        break;
        continue;
    }
    a1 = 3 / 5;
    a1 = a1 % 6;
    a1 = 2;
    if (a1 == 2) {
        a1 = 3;
        a1 = 4;
    }  
    for (; a1 == 4; ) {
        a1 = a1 + 1;
        continue;
    }
    if (a1 == 5 && a1 == 4) a1 = 6;  
    if (a1 != 6 || a1 == 3) a1 = a0;  
    int a2[2], a3[2] = {1, 2};
    int a4[2][2] = {{1, 2}, {3, 4}}, a5[3] = {1, 2, 3};
    int a6[2][2] = {{1, 2}, {1, 2}};
    int C[2] = {4 + 2 / 4 * 2 % 6 - 5, 9};
    C[0] = fd(a1);
    C[1] = fk(C[1], a2, a4);
    int n = 4;
    n = getint();
    f();
    ff(C[1], a4[1][0], a6[1][1]);
    n = fd(3 + a0);
    return 0;
}
[INFO] Matched <MainFuncDefinition>:
int main() {
    printf("21371064");
    printf("\n");
    printf("heihei%d\n", a0);
    printf("%d\n", 8);
    printf("AC\n");
    printf("WA\n");
    printf("TLE\n");
    printf("RE\n");
    printf("PE\n");
    printf("AK!!\n");
    int a1 = 1;
    if (a0 < a1) a1 = 1;  
    if (a0 > a1) a1 = 1; else a1 = 1;
    if (a0 == a1) a1 = 3 * 4;  
    if (!a1) a1 = 3 - 4 + 5;  
    if (a0 >= a1) a1 = 9;  
    if (a0 <= a1) a1 = 10;  
    for (; a0 >= a1; ) {
        if (a1 == 4) a1 = 5;  
        break;
        continue;
    }
    a1 = 3 / 5;
    a1 = a1 % 6;
    a1 = 2;
    if (a1 == 2) {
        a1 = 3;
        a1 = 4;
    }  
    for (; a1 == 4; ) {
        a1 = a1 + 1;
        continue;
    }
    if (a1 == 5 && a1 == 4) a1 = 6;  
    if (a1 != 6 || a1 == 3) a1 = a0;  
    int a2[2], a3[2] = {1, 2};
    int a4[2][2] = {{1, 2}, {3, 4}}, a5[3] = {1, 2, 3};
    int a6[2][2] = {{1, 2}, {1, 2}};
    int C[2] = {4 + 2 / 4 * 2 % 6 - 5, 9};
    C[0] = fd(a1);
    C[1] = fk(C[1], a2, a4);
    int n = 4;
    n = getint();
    f();
    ff(C[1], a4[1][0], a6[1][1]);
    n = fd(3 + a0);
    return 0;
}
[INFO] Matched <CompileUnit>:
const int a0 = 0;

void f() {
    return;
}

void ff(int a, int b, int c) {
    c = c + 1;
    return;
}

int fd(int a) {
    return a;
}

int fk(int a, int b[], int c[][2]) {
    return 1;
}

int main() {
    printf("21371064");
    printf("\n");
    printf("heihei%d\n", a0);
    printf("%d\n", 8);
    printf("AC\n");
    printf("WA\n");
    printf("TLE\n");
    printf("RE\n");
    printf("PE\n");
    printf("AK!!\n");
    int a1 = 1;
    if (a0 < a1) a1 = 1;  
    if (a0 > a1) a1 = 1; else a1 = 1;
    if (a0 == a1) a1 = 3 * 4;  
    if (!a1) a1 = 3 - 4 + 5;  
    if (a0 >= a1) a1 = 9;  
    if (a0 <= a1) a1 = 10;  
    for (; a0 >= a1; ) {
        if (a1 == 4) a1 = 5;  
        break;
        continue;
    }
    a1 = 3 / 5;
    a1 = a1 % 6;
    a1 = 2;
    if (a1 == 2) {
        a1 = 3;
        a1 = 4;
    }  
    for (; a1 == 4; ) {
        a1 = a1 + 1;
        continue;
    }
    if (a1 == 5 && a1 == 4) a1 = 6;  
    if (a1 != 6 || a1 == 3) a1 = a0;  
    int a2[2], a3[2] = {1, 2};
    int a4[2][2] = {{1, 2}, {3, 4}}, a5[3] = {1, 2, 3};
    int a6[2][2] = {{1, 2}, {1, 2}};
    int C[2] = {4 + 2 / 4 * 2 % 6 - 5, 9};
    C[0] = fd(a1);
    C[1] = fk(C[1], a2, a4);
    int n = 4;
    n = getint();
    f();
    ff(C[1], a4[1][0], a6[1][1]);
    n = fd(3 + a0);
    return 0;
}
